
	.global	bg_videoram
	.global	bg_colorram
	.global	stack_top
	.global	stack_bottom
	.global invincible_flag
	.global start_level
	.global vb_ticks_count
	.global highscores_need_saving
	.global infinite_lives_flag
	
	.ifdef	__amiga__
	
	.ascii	"RAM_STRT"
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000 plus 0x8000
	* so addresses MSB match real game
	* (alignment is done on "amiga.68k" end of text section else it doesn't work)
	* wastes up to 80k but worth it when developping the game
	* for instance
	* lea	lives_counter_p1_8814,a0       	| [ld   hl,lives_counter_p1_8814]
    * disassembles in raw WinUAE disassembler to
	* 0011b6ee 41fa d124                lea.l (pc,$d124) == $00118814,a0 ($8814 LSW matches!)
	*

	.endif
	.else
	* Neogeo: needs different writable section from ROM code
    .bss
	.endif

	.align	2


bg_videoram:
CHARACTER_RAM:						| $8000
	ds.b	0x400
bg_colorram:
ATTRIBUTE_RAM:						| $8400
	ds.b	0x400
	
*VARIABLES_START:
	* this file is generated by the script which extracts the variables
	* from the reversed Z80 code
	.include	"bagman_game_ram.68k"
*VARIABLES_END:

	.align	2
	
last_played_sound_timer_table:
	ds.w	20
sound_timer:
	.word	0
vbl_sync_counter_start_screen:
	.word	0
high_score_beaten:
	.word	0
invincible_flag:
	.byte	0
infinite_lives_flag:
	.byte	0
start_level:
	.byte	0
highscores_need_saving:
	.byte	0

vb_ticks_count:
	.byte	0
current_ticks_count:
	.byte	0

regscopy:
	ds.b	64
	.ascii	"RAM_END!"
