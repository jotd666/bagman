* bagman (le bagnard)
*
* Z80
* disassembled by JOTD in 2010 (never too late for a good job!!)
*
 * 554C:	 0 no guard collision
* 131B 00 C3 27 13 no timer death
* wp 6025,1,w :	 watchpoints

*  guard sees right:	$80, left $40, up $10, down $20

* todo:	 find the "guard stuck" monitoring routine that resets guard at the third screen:	block the guards at 3rd screen to see!
* gameplay_allowed_6054:	if 0, cannot do anything. pressing start sets to 1:	 unimportant for the game
* elevator_y_current_screen_6587:
* elevator_dir_current_screen_6010:	 direction shared by both elevators:	1 up, 0 down
* elevator_not_moving_6012:	 0 moving:	 characters cannot move, 1 not moving
* the elevator direction and elevator floor timer are shared by both elevators
* the master being the one of the current screen or the one from screen 2
* if player is on screen 1
* elevator not in player screen does not move until in player screen!!!
* this explains the strange elevator behavior. This is deliberate and allows
* for instance to fetch the bags of screen 2 while using the elevator from
* screen 3. By timing it wisely, one can avoid the "go down bug"
* also explains that the guards never wait for an elevator when not in player
* screen:	 they could wait forever since it's not moving!!!!

*  1A0B:	 A.I. for branch with player/guard screen different

* xy <-> logical address conversions (Python proto code)
*def xy2addr(x,y,current_screen):
*     rval = 0x4062 + 0x400 * current_screen + y/8 + ((0xE0-x)/8)*0x20
*     return rval
*def addr2xy(addr):
*     b = addr - 0x4000
*     current_screen = 0
*     while b < 0x400:
*	b-=0x400
*	current_screen+=1
*     b -= 0x62
*     y = (b % 0x20) * 8
*     x = 0xE0 - b / 4
*     return [x,y,current_screen]

*tables:
*2CD3:	guard elevator waiting point table
*5974:	guard path branch address table
*5A10:	guard screen 1 => screen 2 (3 bytes/entry)
*5A3D:	guard screen 2 => screen 1 (3 bytes/entry)
*5A76:	guard screen 2 => screen 3 (3 bytes/entry)
*5AAF:	guard screen 3 => screen 2 (there's a buggy/useless value in this table)
*address is a grid with a 8x8 resolution

 * guard move clocks:	 5A4
 * player move clocks 4E4

  * debug part 1A20

*  from MAME drover
* memory map:
*
* 0000-5fff ROM
* 6000-67ff RAM
* 9000-93ff Video RAM
* 9800-9bff Color RAM
* 9800-981f Sprites (hidden portion of color RAM)
* 9c00-9fff ? (filled with 3f, not used otherwise)
* c000-ffff ROM (Super Bagman only)
*
* memory mapped ports:
*
* read:
* a000      PAL16r6 output. (RD4 line)
* a800      ? (read only in one place, not used) (RD5 line)
* b000      DSW (RD6 line)
* b800      watchdog reset (RD7 line)
*
* write:
* a000      interrupt enable
* a001      horizontal flip
* a002      vertical flip
* a003      video enable, not available on earlier hardware revision(s)
* a004      coin counter
* a007      ? /SCS line in the schems connected to AY8910 pin A4 or AA (schems are unreadable)
*
* a800-a805 these lines control the state machine driving TMS5110 (only bit 0 matters)
*           a800,a801,a802 - speech roms BIT select (000 bit 7, 001 bit 4, 010 bit 2)
*           a803 - 0 keeps the state machine in reset state; 1 starts speech
*           a804 - connected to speech rom 11 (QS) chip enable
*           a805 - connected to speech rom 12 (QT) chip enable
* b000      ?
* b800      ?

    .global bagman_irq
    .global bagman_reset

	*.include	"bagman.inc"
	.ifdef	__amiga__
	.include "bagman_ram.68k"
	.align	2
	.endif

	.macro	LOAD_AX_BE_WORD_DY	ax,dy
	move.b	(\ax),d6               
	lsl.w	#8,\dy
	move.b	(1,\ax),\dy
	.endm
	
	.macro	STORE_DX_BE_WORD_AY	dx,ay
	move.b	\dx,(0x01,\ay)
	move.w	\dx,-(sp)
	lsr.w	#8,\dx
	move.b	\dx,(\ay)
	move.w	(sp)+,\dx
	.endm	
	
	.macro CLEAR_XC_FLAG
	moveq	#0,d7
	roxl.b	#1,d7
	.endm
	.macro SET_XC_FLAG
	st	d7
	roxl.b	#1,d7
	.endm

* < D6: ROM offset
read_rom:
	.ifndef		RELEASE
	cmp.w	#0x6000,d6
	bcc.b	rr_error
	.endif
	
	* .w is okay as D6 can't go over 7FFF
	lea		game_mem,a0
	move.b	(a0,d6.w),d0
	
	rts
	
rr_error:
	jbsr	assert_failed_blitz
	illegal
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpir:
    subq.w    #1,d1
0:
    cmp.b    (a0)+,d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

* < all registers d1-d4/a0-a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 72
exx:
    lea     regscopy+36,a6
    * save current regs in region 1
    movem.l d1-d4/a0-a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+36,a6
    movem.l (a6),d1-d4/a0-a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0-a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0-a4
    movem.l d1-d4/a0-a4,(a6)
    movem.l (a7)+,d1-d4/a0-a4
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpdr:
    subq.w    #1,d1
0:
    subq.w  #1,a0
    cmp.b    (1,a0),d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

*---------------

assert_failed_blitz:
	jbra		osd_break
	
bagman_irq:
	
	
bagman_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count

	jra	l_1200                             	| [$0000: jp   $1200]


game_tick_0038:
	move.w	d0,-(sp)                        	| [$0038: push af]
	movem.w	d1/d2,-(sp)                    	| [$0039: push bc]
	movem.w	d3/d4,-(sp)                    	| [$003a: push de]
	move.l	a1,-(sp)                        	| [$003a: push de]
	move.l	a0,-(sp)                        	| [$003b: push hl]
	move.l	a2,-(sp)                        	| [$003c: push ix]
	move.l	a3,-(sp)                        	| [$003e: push iy]
	jbsr	exx                               	| [$0040: exx]
	movem.w	d1/d2,-(sp)                    	| [$0041: push bc]
	movem.w	d3/d4,-(sp)                    	| [$0042: push de]
	move.l	a1,-(sp)                        	| [$0042: push de]
	move.l	a0,-(sp)                        	| [$0043: push hl]
	exg	d0,d7                              	| [$0044: ex   af,af']
	move.w	d0,-(sp)                        	| [$0045: push af]
	
	jbsr	l_3c47                            	| [$0046: call $3C47]
										| [$0049: xor  a]
    jbsr	osd_disable_vblank_interrupt  	| [$004a: ld   (interrupt_control_A000),a]

	jbsr	l_3123                            	| [$004e: call $3123]
	jbsr	l_38fa                            	| [$0051: call $38FA]
	move.b	unknown_6142,d0                 	| [$0054: ld   a,(unknown_6142)]
	addq.b	#1,d0                           	| [$0057: inc  a]
l_0058:
	move.b	d0,unknown_6142                 	| [$0058: ld   (unknown_6142),a]
	move.b	is_intermission_6274,d0         	| [$005b: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$005e: cp   $01]
	jeq	l_0067                             	| [$0060: jr   z,$0067]
	move.b	unknown_61ED,d0                 	| [$0062: ld   a,(unknown_61ED)]
	                         	| [$0065: cp   $00]
l_0067:
	*bne.b	0f
	* AY-8192 handling
	*jbsr	l_0f7f                            	| [$0067: call z,$0F7F]
*0:
	move.b	unknown_626F,d0                 	| [$006a: ld   a,(unknown_626F)]
	cmp.b	#0x01,d0                         	| [$006d: cp   $01]
	jeq	l_0394                             	| [$006f: jp   z,$0394]
	move.b	unknown_6210,d0                 	| [$0072: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$0075: cp   $01]
	jne	l_009b                             	| [$0077: jr   nz,$009B]
	move.b	gameplay_allowed_6054,d0        	| [$0079: ld   a,(gameplay_allowed_6054)]
	                         	| [$007c: cp   $00]
	jeq	l_009b                             	| [$007e: jr   z,$009B]
	move.b	unknown_61F2,d0                 	| [$0080: ld   a,(unknown_61F2)]
	cmp.b	#0x01,d0                         	| [$0083: cp   $01]
	jeq	l_009b                             	| [$0085: jr   z,$009B]
	move.b	unknown_61ED,d0                 	| [$0087: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$008a: cp   $01]
	jeq	l_009b                             	| [$008c: jr   z,$009B]
	move.b	player_x_6582,d0                	| [$008e: ld   a,(player_x_6582)]
	cmp.b	#0xE9,d0                         	| [$0091: cp   $E9]
	jcc	l_0394                             	| [$0093: jp   nc,$0394]
	cmp.b	#0x0F,d0                         	| [$0096: cp   $0F]
	jcs	l_0394                             	| [$0098: jp   c,$0394]
l_009b:
										| [$009b: ld   a,(watchdog_reset_B800)] watchdog
	                      	| [$009e: ld   de,$9800]
	lea	sprite_shadow_ram_65A0,a0                	| [$00a1: ld   hl,sprite_shadow_ram_65A0]
	jbsr	osd_update_sprites						| [$00a4: ld   bc,$0020] 32
								
										| [$00a7: ldir]
								
								
	*jbsr	log_inserted_coins_34A4                            	| [$00a9: call $34A4]
	jbsr	decrease_timer_353e                            	| [$00ac: call $353E]
	addq.b	#1,unknown_6143                 	| [$00af: ld   a,(unknown_6143)]
												| [$00b2: inc  a]
												| [$00b3: ld   (unknown_6143),a]
	* speed management disabled                        	| [$00b6: call $10D1]
	addq.b	#1,unknown_626D                 	| [$00b9: ld   a,(unknown_626D)]
												| [$00bc: inc  a]
												| [$00bd: ld   (unknown_626D),a]
	lea	previous_guard_1_struct_65B8,a3	| [$00c0: ld   iy,previous_guard_1_struct_65B8]

	move.b	player_screen_600D,d1           	| [$00c4: ld   a,(player_screen_600D)]
												| [$00c7: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$00c8: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$00cb: cp   b]
	jeq	l_00d3                             	| [$00cc: jr   z,$00D3]  same screen:	 skip

 * not the same screen between player and guard 1
	jbsr	set_previous_guard_y_255_10CB     	| [$00ce: call set_previous_guard_y_255_10CB]
	jra	l_00de                             	| [$00d1: jr   $00DE]
 * same screen guard 1 / player
l_00d3:
	lea	guard_1_struct_6594,a2         	| [$00d3: ld   ix,guard_1_struct_6594]
	lea	previous_guard_1_struct_65B8,a3	| [$00d7: ld   iy,previous_guard_1_struct_65B8]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$00db: call copy_4_bytes_ix_iy_1001]

l_00de:
	lea	previous_guard_2_struct_65BC,a3	| [$00de: ld   iy,previous_guard_2_struct_65BC]
	move.b	player_screen_600D,d0           	| [$00e2: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$00e5: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$00e6: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$00e9: cp   b]
	jeq	l_00f1                             	| [$00ea: jr   z,$00F1]  same screen:	 skip

	jbsr	set_previous_guard_y_255_10CB     	| [$00ec: call set_previous_guard_y_255_10CB]
	jra	l_00fc                             	| [$00ef: jr   $00FC]
 * same screen guard 2 / player
l_00f1:
	lea	guard_2_struct_6598,a2         	| [$00f1: ld   ix,guard_2_struct_6598]
	lea	previous_guard_2_struct_65BC,a3	| [$00f5: ld   iy,previous_guard_2_struct_65BC]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$00f9: call copy_4_bytes_ix_iy_1001]

l_00fc:
	move.b	unknown_6053,d0                 	| [$00fc: ld   a,(unknown_6053)]
	cmp.b	#0x01,d0                         	| [$00ff: cp   $01]
	jeq	l_0380                             	| [$0101: jp   z,$0380]
	jbsr	l_0472                            	| [$0104: call $0472]
	move.b	unknown_6151,d0                 	| [$0107: ld   a,(unknown_6151)]
	cmp.b	#0x01,d0                         	| [$010a: cp   $01]
	jeq	l_0380                             	| [$010c: jp   z,$0380]
	jbsr	l_5c9a                            	| [$010f: call $5C9A]
	           	| [$0112: ld   a,(watchdog_reset_B800)]
	jbsr	l_03f4                            	| [$0115: call $03F4]
	jbsr	l_2c96                            	| [$0118: call $2C96]
	jbsr	l_344e                            	| [$011b: call $344E]
	jbsr	l_3cd4                            	| [$011e: call $3CD4]
	           	| [$0121: ld   a,(watchdog_reset_B800)]
	move.b	unknown_6271,d0                 	| [$0124: ld   a,(unknown_6271)]
	move.b	d0,unknown_6272                 	| [$0127: ld   (unknown_6272),a]
	* probably protection, check copyright just in case someones tampers
	* with the "VALADON" bit
	move.b	#0x41,d0                       	| [$012a: ld   a,($570C)] ALADON AUTOMATION !!!!
	move.b	d0,unknown_6271                 	| [$012d: ld   (unknown_6271),a]
	jbsr	l_07fb                            	| [$0130: call $07FB]
	move.b	unknown_602C,d0                 	| [$0133: ld   a,(unknown_602C)]
	cmp.b	#0x01,d0                         	| [$0136: cp   $01]
	jeq	l_0140                             	| [$0138: jr   z,$0140]
	jbsr	player_grip_handle_test_0784      	| [$013a: call player_grip_handle_test_0784]
	           	| [$013d: ld   a,(watchdog_reset_B800)]
l_0140:
	jbsr	l_07d5                            	| [$0140: call $07D5]
	clr.b	d0                               	| [$0143: xor  a]
	move.b	d0,unknown_602C                 	| [$0144: ld   (unknown_602C),a]
	lea	unknown_6156,a3                	| [$0147: ld   iy,unknown_6156]
	lea	guard_1_struct_6594,a2         	| [$014b: ld   ix,guard_1_struct_6594]
	lea	unknown_6148,a1                	| [$014f: ld   de,unknown_6148]
	jbsr	l_0403                            	| [$0152: call $0403]
	lea	unknown_6157,a3                	| [$0155: ld   iy,unknown_6157]
	lea	guard_2_struct_6598,a2         	| [$0159: ld   ix,guard_2_struct_6598]
	lea	unknown_6149,a1                	| [$015d: ld   de,unknown_6149]
	jbsr	l_0403                            	| [$0160: call $0403]
	move.w	guard_1_logical_address_6038,d6	| [$0163: ld   hl,(guard_1_logical_address_6038)]
	lea	unknown_61EB,a2                	| [$0166: ld   ix,unknown_61EB]
	lea	unknown_603A,a3                	| [$016a: ld   iy,unknown_603A]
	move.b	(0x00,a2),d0                    	| [$016e: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$0171: and  (ix+$01)]
	exg	d0,d7                              	| [$0174: ex   af,af']
	lea	guard_1_y_6597,a1              	| [$0175: ld   de,guard_1_y_6597]
	move.b	guard_1_screen_6099,d0          	| [$0178: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$017b: ld   b,a]
	move.b	unknown_61EB,d0                 	| [$017c: ld   a,(unknown_61EB)]
	                         	| [$017f: cp   $00]
	beq.b	0f
	jbsr	l_350e                            	| [$0181: call nz,$350E]
0:
	move.w	guard_2_logical_address_6078,d6	| [$0184: ld   hl,(guard_2_logical_address_6078)]
	lea	unknown_61EC,a2                	| [$0187: ld   ix,unknown_61EC]
	lea	unknown_607A,a3                	| [$018b: ld   iy,unknown_607A]
	lea	guard_2_y_659B,a1              	| [$018f: ld   de,guard_2_y_659B]
	clr.b	d0                               	| [$0192: ld   a,$00]
	exg	d0,d7                              	| [$0194: ex   af,af']
	move.b	guard_2_screen_609A,d0          	| [$0195: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$0198: ld   b,a]
	move.b	unknown_61EC,d0                 	| [$0199: ld   a,(unknown_61EC)]
												| [$019c: cp   $00]
	beq.b	0f
	jbsr	l_350e                            	| [$019e: call nz,$350E]
0:
	jbsr	l_03b1                            	| [$01a1: call $03B1]
	           	| [$01a4: ld   a,(watchdog_reset_B800)]
	move.b	unknown_61ED,d0                 	| [$01a7: ld   a,(unknown_61ED)]
	                         	| [$01aa: cp   $00]
	bne.b	0f
	jbsr	l_1683                            	| [$01ac: call z,$1683]
0:
	jbsr	l_109d                            	| [$01af: call $109D]
	           	| [$01b2: ld   a,(watchdog_reset_B800)]
	jbsr	wagon_player_collision_1D84       	| [$01b5: call wagon_player_collision_1D84]
	jbsr	handle_player_walk_0684                            	| [$01b8: call $0684]
	jbsr	l_31f4                            	| [$01bb: call $31F4]
	jbsr	l_06d5                            	| [$01be: call $06D5]
	           	| [$01c1: ld   a,(watchdog_reset_B800)]
	jbsr	compute_wagon_start_values_08b0                            	| [$01c4: call $08B0]
	jbsr	l_0830                            	| [$01c7: call $0830]
	           	| [$01ca: ld   a,(watchdog_reset_B800)]
	jbsr	l_10ff                            	| [$01cd: call $10FF]
	move.b	unknown_61ED,d0                 	| [$01d0: ld   a,(unknown_61ED)]
	                         	| [$01d3: cp   $00]
	bne.b	0f
	jbsr	l_08f4                            	| [$01d5: call z,$08F4]
0:
	           	| [$01d8: ld   a,(watchdog_reset_B800)]
	jbsr	handle_pick_hold_timer_113c                            	| [$01db: call $113C]
	move.b	player_y_6583,d0                	| [$01de: ld   a,(player_y_6583)]
	move.w	d0,-(sp)                        	| [$01e1: push af]
	subq.b	#1,d0                           	| [$01e2: dec  a]
	move.b	d0,player_y_6583                	| [$01e3: ld   (player_y_6583),a]
	jbsr	update_player_screen_address_from_xy_555E	| [$01e6: call update_player_screen_address_from_xy_555E]
	move.w	(sp)+,d0                        	| [$01e9: pop  af]
	move.b	d0,player_y_6583                	| [$01ea: ld   (player_y_6583),a]
	move.b	holds_barrow_61C7,d0                 	| [$01ed: ld   a,(holds_barrow_61C7)]
												| [$01f0: cp   $00]
	bne.b	0f
	jbsr	l_0dc7                            	| [$01f2: call z,$0DC7]
0:
	move.b	fatal_fall_height_reached_604E,d0	| [$01f5: ld   a,(fatal_fall_height_reached_604E)]
	                         	| [$01f8: cp   $00]
	jne	l_021e                             	| [$01fa: jr   nz,$021E]
	jbsr	update_player_screen_address_from_xy_555E	| [$01fc: call update_player_screen_address_from_xy_555E]
	jbsr	l_3d65                            	| [$01ff: call $3D65]
	move.b	unknown_6014,d0                 	| [$0202: ld   a,(unknown_6014)]
	cmp.b	#0x01,d0                         	| [$0205: cp   $01]
	jne	l_0210                             	| [$0207: jr   nz,$0210]
	move.b	elevator_not_moving_6012,d0     	| [$0209: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$020c: cp   $01]
	jne	l_021e                             	| [$020e: jr   nz,$021E]
l_0210:
	lea	unknown_6047,a3                	| [$0210: ld   iy,unknown_6047]
	lea	player_struct_6580,a2          	| [$0214: ld   ix,player_struct_6580]
	jbsr	player_movement_0B6D              	| [$0218: call player_movement_0B6D]
	           	| [$021b: ld   a,(watchdog_reset_B800)]
l_021e:
	jbsr	l_1010                            	| [$021e: call $1010]
	jbsr	l_104b                            	| [$0221: call $104B]
	move.b	#0x01,d0                        	| [$0224: ld   a,$01]
	move.b	d0,unknown_628A                 	| [$0226: ld   (unknown_628A),a]
	move.b	player_screen_600D,d0           	| [$0229: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$022c: ld   (screen_index_param_6098),a]
	lea	unknown_6014,a0                	| [$022f: ld   hl,unknown_6014]
	lea	player_struct_6580,a2          	| [$0232: ld   ix,player_struct_6580]
	jbsr	l_0a27                            	| [$0236: call $0A27]
	           	| [$0239: ld   a,(watchdog_reset_B800)]
	move.b	unknown_61F2,d0                 	| [$023c: ld   a,(unknown_61F2)]
	                         	| [$023f: cp   $00]
	jne	l_0263                             	| [$0241: jr   nz,$0263]
	move.b	player_screen_600D,d0           	| [$0243: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$0246: ld   (screen_index_param_6098),a]
	lea	unknown_6008,a0                	| [$0249: ld   hl,unknown_6008]
	lea	fall_height_604D,a3            	| [$024c: ld   iy,fall_height_604D]
	lea	player_struct_6580,a2          	| [$0250: ld   ix,player_struct_6580]
	move.b	unknown_6014,d0                 	| [$0254: ld   a,(unknown_6014)]
	move.b	d0,d2                           	| [$0257: ld   c,a]
	move.b	unknown_6013,d0                 	| [$0258: ld   a,(unknown_6013)]
	move.b	#0x19,d1                        	| [$025b: ld   b,$19]
	jbsr	l_0b2e                            	| [$025d: call $0B2E]
	           	| [$0260: ld   a,(watchdog_reset_B800)]
l_0263:
	move.b	player_screen_600D,d0           	| [$0263: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$0266: ld   (screen_index_param_6098),a]
	lea	player_struct_6580,a2          	| [$0269: ld   ix,player_struct_6580]
	lea	unknown_6014,a3                	| [$026d: ld   iy,unknown_6014]
	jbsr	handle_elevators_0a66                            	| [$0271: call $0A66]
	lea	player_struct_6580,a2          	| [$0274: ld   ix,player_struct_6580]
	lea	unknown_6014,a0                	| [$0278: ld   hl,unknown_6014]
	jbsr	l_09a0                            	| [$027b: call $09A0]
	move.b	unknown_6156,d0                 	| [$027e: ld   a,(unknown_6156)]
	                         	| [$0281: cp   $00]
	jne	l_02ba                             	| [$0283: jr   nz,$02BA]
	move.b	unknown_6211,d0                 	| [$0285: ld   a,(unknown_6211)]
	                         	| [$0288: cp   $00]
	jne	l_029d                             	| [$028a: jr   nz,$029D]
	move.b	guard_1_in_elevator_603B,d0     	| [$028c: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$028f: cp   $01]
	jne	l_029a                             	| [$0291: jr   nz,$029A]
	move.b	elevator_not_moving_6012,d0     	| [$0293: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$0296: cp   $01]
	jne	l_029d                             	| [$0298: jr   nz,$029D]
 * routine actually moving the guards
*  theres some other routine monitoring the guard movements
*  if they don't move, then reset them to the center up of the neighbor screen
*  did not locate this routine yet but this is not really important

l_029a:
	jbsr	guard_1_movement_116F             	| [$029a: call guard_1_movement_116F]
l_029d:
	lea		unknown_6057,a3    		           	| [$029d: ld   iy,unknown_6057]
	move.l	a3,guard_struct_pointer_6093                 	| [$02a1: ld   (guard_struct_pointer_6093),iy]
	move.w	guard_1_logical_address_6038,stored_logical_address_6044	| [$02a5: ld   hl,(guard_1_logical_address_6038)]
	              	| [$02a8: ld   (stored_logical_address_6044),hl]
	lea	guard_1_ladder_frame_6035,a0   	| [$02ab: ld   hl,guard_1_ladder_frame_6035]
	lea	guard_2_direction_6027,a3      	| [$02ae: ld   iy,guard_2_direction_6027]
	move.b	unknown_6037,d0                 	| [$02b2: ld   a,(unknown_6037)]
	cmp.b	#0x01,d0                         	| [$02b5: cp   $01]
	beq.b	0f
	jbsr	guard_ladder_movement_04AD        	| [$02b7: call nz,guard_ladder_movement_04AD]
0:
l_02ba:
	move.b	unknown_6157,d0                 	| [$02ba: ld   a,(unknown_6157)]
	                         	| [$02bd: cp   $00]
	jne	l_02fc                             	| [$02bf: jr   nz,$02FC]
	move.b	unknown_6212,d0                 	| [$02c1: ld   a,(unknown_6212)]
	                         	| [$02c4: cp   $00]
	jne	l_02d9                             	| [$02c6: jr   nz,$02D9]
	move.b	guard_2_in_elevator_607B,d0     	| [$02c8: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$02cb: cp   $01]
	jne	l_02d6                             	| [$02cd: jr   nz,$02D6]
	move.b	elevator_not_moving_6012,d0     	| [$02cf: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$02d2: cp   $01]
	jne	l_02d9                             	| [$02d4: jr   nz,$02D9]
l_02d6:
	jbsr	guard_2_movement_119B             	| [$02d6: call guard_2_movement_119B]
l_02d9:
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$02d9: ld   hl,(guard_2_logical_address_6078)]
	                 	| [$02dc: ld   (stored_logical_address_6044),hl]
	lea	unknown_6097,a3                	| [$02df: ld   iy,unknown_6097]
	move.l	a3,guard_struct_pointer_6093                 	| [$02e3: ld   (guard_struct_pointer_6093),iy]
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$02e7: ld   hl,(guard_2_logical_address_6078)]
	                 	| [$02ea: ld   (stored_logical_address_6044),hl]
	lea	guard_2_ladder_frame_6075,a0   	| [$02ed: ld   hl,guard_2_ladder_frame_6075]
	lea	guard_1_direction_6067,a3      	| [$02f0: ld   iy,guard_1_direction_6067]
	move.b	unknown_6077,d0                 	| [$02f4: ld   a,(unknown_6077)]
	cmp.b	#0x01,d0                         	| [$02f7: cp   $01]
	beq.b	0f
	jbsr	guard_ladder_movement_04AD        	| [$02f9: call nz,guard_ladder_movement_04AD]
0:
l_02fc:
	move.b	guard_2_screen_609A,d0          	| [$02fc: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$02ff: ld   (screen_index_param_6098),a]
	lea	guard_2_in_elevator_607B,a0    	| [$0302: ld   hl,guard_2_in_elevator_607B]
	lea	guard_2_struct_6598,a2         	| [$0305: ld   ix,guard_2_struct_6598]
	jbsr	l_0a27                            	| [$0309: call $0A27]
	           	| [$030c: ld   a,(watchdog_reset_B800)]
	move.b	unknown_6097,d0                 	| [$030f: ld   a,(unknown_6097)]
	addq.b	#1,d0                           	| [$0312: inc  a]
	move.b	d0,unknown_6097                 	| [$0313: ld   (unknown_6097),a]
	lea	unknown_608F,a3                	| [$0316: ld   iy,unknown_608F]
	lea	unknown_6077,a0                	| [$031a: ld   hl,unknown_6077]
	lea	guard_2_struct_6598,a2         	| [$031d: ld   ix,guard_2_struct_6598]
	move.b	unknown_61EC,d0                 	| [$0321: ld   a,(unknown_61EC)]
	cmp.b	#0x01,d0                         	| [$0324: cp   $01]
	jeq	l_033a                             	| [$0326: jr   z,$033A]
	move.b	guard_2_screen_609A,d0          	| [$0328: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$032b: ld   (screen_index_param_6098),a]
	move.b	guard_2_in_elevator_607B,d0     	| [$032e: ld   a,(guard_2_in_elevator_607B)]
	move.b	d0,d2                           	| [$0331: ld   c,a]
	move.b	unknown_607A,d0                 	| [$0332: ld   a,(unknown_607A)]
	move.b	#0x26,d1                        	| [$0335: ld   b,$26]
	jbsr	l_0b2e                            	| [$0337: call $0B2E]
l_033a:
	move.b	guard_1_screen_6099,d0          	| [$033a: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$033d: ld   (screen_index_param_6098),a]
	lea	guard_1_in_elevator_603B,a0    	| [$0340: ld   hl,guard_1_in_elevator_603B]
	lea	guard_1_struct_6594,a2         	| [$0343: ld   ix,guard_1_struct_6594]
	jbsr	l_0a27                            	| [$0347: call $0A27]
	move.b	unknown_6057,d0                 	| [$034a: ld   a,(unknown_6057)]
	addq.b	#1,d0                           	| [$034d: inc  a]
	move.b	d0,unknown_6057                 	| [$034e: ld   (unknown_6057),a]
	lea	unknown_604F,a3                	| [$0351: ld   iy,unknown_604F]
	lea	unknown_6037,a0                	| [$0355: ld   hl,unknown_6037]
	lea	guard_1_struct_6594,a2         	| [$0358: ld   ix,guard_1_struct_6594]
	move.b	unknown_61EB,d0                 	| [$035c: ld   a,(unknown_61EB)]
	cmp.b	#0x01,d0                         	| [$035f: cp   $01]
	jeq	l_0375                             	| [$0361: jr   z,$0375]
	move.b	guard_1_screen_6099,d0          	| [$0363: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$0366: ld   (screen_index_param_6098),a]
	move.b	guard_1_in_elevator_603B,d0     	| [$0369: ld   a,(guard_1_in_elevator_603B)]
	move.b	d0,d2                           	| [$036c: ld   c,a]
	move.b	unknown_603A,d0                 	| [$036d: ld   a,(unknown_603A)]
	move.b	#0x26,d1                        	| [$0370: ld   b,$26]
	jbsr	l_0b2e                            	| [$0372: call $0B2E]
l_0375:
	move.b	#0x01,d0                        	| [$0375: ld   a,$01]
	move.b	d0,unknown_627F                 	| [$0377: ld   (unknown_627F),a]
	jbsr	l_18c7                            	| [$037a: call $18C7]
	           	| [$037d: ld   a,(watchdog_reset_B800)]
l_0380:
	jbsr	l_3df9                            	| [$0380: call $3DF9]
	move.b	unknown_61F1,d0                 	| [$0383: ld   a,(unknown_61F1)]
	                         	| [$0386: cp   $00]
	bne.b	0f
	jbsr	l_0ebc                            	| [$0388: call z,$0EBC]
0:
	jbsr	write_credits_and_lives_39be                            	| [$038b: call $39BE]
	jbsr	write_scores_and_time_560f                            	| [$038e: call $560F]
	jbsr	read_player_controls_39fd                            	| [$0391: call $39FD]
l_0394:
	jbsr	l_3c66                            	| [$0394: call $3C66]
	           	| [$0397: ld   a,(watchdog_reset_B800)]
												| [$039a: ld   a,$01]
												| [$039c: ld   (timer_random_shit_A000),a]

	move.w	(sp)+,d0                        	| [$03a1: pop  af]
	exg	d0,d7                              	| [$03a2: ex   af,af']
	move.l	(sp)+,a0                        	| [$03a3: pop  hl]
	move.l	(sp)+,a1                        	| [$03a4: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$03a4: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$03a5: pop  bc]
	jbsr	exx                               	| [$03a6: exx]
	move.l	(sp)+,a3                        	| [$03a7: pop  iy]
	move.l	(sp)+,a2                        	| [$03a9: pop  ix]
	move.l	(sp)+,a0                        	| [$03ab: pop  hl]
	move.l	(sp)+,a1                        	| [$03ac: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$03ac: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$03ad: pop  bc]
	move.w	(sp)+,d0                        	| [$03ae: pop  af]

	jbsr		osd_enable_vblank_interrupt		| [im 1]
	rts                                    	| [$03b0: ret]


l_03b1:
	move.b	unknown_615E,d0                 	| [$03b1: ld   a,(unknown_615E)]
	                         	| [$03b4: cp   $00]
	bne.b	0f
	rts                                    	| [$03b6: ret  z]
0:
	move.b	player_screen_600D,d0           	| [$03b7: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$03ba: cp   $01]
	jne	l_03cb                             	| [$03bc: jr   nz,$03CB]
	move.b	unknown_659F,d0                 	| [$03be: ld   a,(unknown_659F)]
	cmp.b	#0x80,d0                         	| [$03c1: cp   $80]
	jcs	l_03cb                             	| [$03c3: jr   c,$03CB]
	move.b	unknown_659E,d0                 	| [$03c5: ld   a,(unknown_659E)]
	subq.b	#1,d0                           	| [$03c8: dec  a]
	jra	l_03cf                             	| [$03c9: jr   $03CF]
l_03cb:
	move.b	unknown_659E,d0                 	| [$03cb: ld   a,(unknown_659E)]
	addq.b	#1,d0                           	| [$03ce: inc  a]
l_03cf:
	move.b	d0,unknown_659E                 	| [$03cf: ld   (unknown_659E),a]
	lea	unknown_659C,a2                	| [$03d2: ld   ix,unknown_659C]
	subq.b	#1,(0x03,a2)                    	| [$03d6: dec  (ix+$03)]
	lea	unknown_615A,a3                	| [$03d9: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$03dd: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$03e0: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c	| [$03e3: call compute_logical_address_from_xy_558c]
	move.w	unknown_615A,d6             	| [$03e6: ld   hl,(unknown_615A)]
	lea	unknown_659C,a2                	| [$03e9: ld   ix,unknown_659C]
	addq.b	#1,(0x03,a2)                    	| [$03ed: inc  (ix+$03)]
	jbra	l_250e                            	| [$03f0: call $250E]
	                                    	| [$03f3: ret]
l_03f4:
	move.b	unknown_6159,d0                 	| [$03f4: ld   a,(unknown_6159)]
										| [$03f7: cp   $00]
	bne.b	0f
	rts                                    	| [$03f9: ret  z]
0:
	move.b	unknown_659F,d0                 	| [$03fa: ld   a,(unknown_659F)]
	addq.b	#2,d0                           	| [$03fd: inc  a] * 2
	move.b	d0,unknown_659F                 	| [$03ff: ld   (unknown_659F),a]
	rts                                    	| [$0402: ret]

l_0403:
	move.b	(a3),d0                    	| [$0403: ld   a,(iy+$00)]
	                        	| [$0406: cp   $00]
	bne.b	0f
	rts                                    	| [$0408: ret  z]
0:
	lea		game_mem,a0
	add.w	unknown_6154,a0             	| [$0409: ld   hl,(unknown_6154)]
	move.b	unknown_6153,d0                 	| [$040c: ld   a,(unknown_6153)]
	cmp.b	#0x07,d0                         	| [$040f: cp   $07]
	jne	l_0424                             	| [$0411: jr   nz,$0424]
	* reads a table starting at $437 in ROM
	move.b	(a0),d0                         	| [$0413: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0414: cp   $FF]
	jeq	l_042c                             	| [$0416: jr   z,$042C]
	move.b	d0,(0x00,a2)                    	| [$0418: ld   (ix+$00),a]
											| [$041b: inc  hl]
	sub.l	#game_mem-1,a0
	move.w	a0,unknown_6154                 	| [$041c: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$041f: xor  a]
	move.b	d0,unknown_6153                 	| [$0420: ld   (unknown_6153),a]
	rts                                    	| [$0423: ret]
l_0424:
	move.b	unknown_6153,d0                 	| [$0424: ld   a,(unknown_6153)]
	addq.b	#1,d0                           	| [$0427: inc  a]
	move.b	d0,unknown_6153                 	| [$0428: ld   (unknown_6153),a]
	rts                                    	| [$042b: ret]
l_042c:
	move.b	#0x31,d0                        	| [$042c: ld   a,$31]
	move.b	d0,(0x00,a2)                    	| [$042e: ld   (ix+$00),a]
	clr.b	d0                               	| [$0431: xor  a]
	move.b	d0,(0x00,a3)                    	| [$0432: ld   (iy+$00),a]
	move.b	d0,(a1)                         	| [$0435: ld   (de),a]
	rts                                    	| [$0436: ret]

l_0472:
	lea	unknown_6151,a3                	| [$0472: ld   iy,unknown_6151]
	lea	player_struct_6580,a2          	| [$0476: ld   ix,player_struct_6580]
	lea	game_mem,a0
	add.w	unknown_6154,a0             	| [$047a: ld   hl,(unknown_6154)]
	move.b	(a3),d0                    	| [$047d: ld   a,(iy+$00)]
	                         	| [$0480: cp   $00]
	bne.b	0f
	rts                                    	| [$0482: ret  z]
0:
	move.b	unknown_6153,d0                 	| [$0483: ld   a,(unknown_6153)]
	cmp.b	#0x07,d0                         	| [$0486: cp   $07]
	jne	l_049b                             	| [$0488: jr   nz,$049B]
	move.b	(a0),d0                         	| [$048a: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$048b: cp   $FF]
	jeq	l_04a3                             	| [$048d: jr   z,$04A3]
	move.b	d0,(a2)                    	| [$048f: ld   (ix+$00),a]
	addq.w	#1,a0                           	| [$0492: inc  hl]
	move.l	a0,d6
	sub.l	#game_mem,d6
	move.w	d6,unknown_6154                 	| [$0493: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$0496: xor  a]
	move.b	d0,unknown_6153                 	| [$0497: ld   (unknown_6153),a]
	rts                                    	| [$049a: ret]
l_049b:
	move.b	unknown_6153,d0                 	| [$049b: ld   a,(unknown_6153)]
	addq.b	#1,d0                           	| [$049e: inc  a]
	move.b	d0,unknown_6153                 	| [$049f: ld   (unknown_6153),a]
	rts                                    	| [$04a2: ret]
l_04a3:
	move.b	#0x01,d0                        	| [$04a3: ld   a,$01]
	move.b	d0,unknown_6152                 	| [$04a5: ld   (unknown_6152),a]
	rts                                    	| [$04a8: ret]

 * in ix guard structure
 * structure is as follows: (same struct for player)
 * offset 0:	sprite frame gfx index (ex: 27/A7:	climbing)
 * offset 1:	?
 * offset 2:	x
 * offset 3:	y

guard_ladder_movement_04AD:
	move.b	(0x00,a3),d0                    	| [$04ad: ld   a,(iy+$00)]
	and.b	#0x10,d0                         	| [$04b0: and  $10]
	cmp.b	#0x10,d0                         	| [$04b2: cp   $10]
	jeq	l_04cb                             	| [$04b4: jr   z,$04CB]
	move.b	(0x00,a3),d0                    	| [$04b6: ld   a,(iy+$00)]
	and.b	#0x20,d0                         	| [$04b9: and  $20]
	cmp.b	#0x20,d0                         	| [$04bb: cp   $20]
	beq.b	0f
	rts                                    	| [$04bd: ret  nz]
0:
 * down

	move.w	d6,-(sp)                        	| [$04be: push hl]
	move.w	stored_logical_address_6044,d6             	| [$04bf: ld   hl,(stored_logical_address_6044)]
	bsr		read_rom                         	| [$04c2: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$04c3: cp   $FF]
	movem.w	(sp)+,d6                        	| [$04c5: pop  hl]
	beq.b	0f
	rts                                    	| [$04c6: ret  nz]
0:
	clr.b	d1                               	| [$04c7: ld   b,$00]
	jra	l_04d7                             	| [$04c9: jr   $04D7]
 * up
l_04cb:

	move.w	d6,-(sp)                        	| [$04cb: push hl]
	move.w	stored_logical_address_6044,d6             	| [$04cc: ld   hl,(stored_logical_address_6044)]
	subq.w	#1,d6                           	| [$04cf: dec  hl]
	bsr		read_rom                         	| [$04d0: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$04d1: cp   $FF]
	movem.w	(sp)+,d6                        	| [$04d3: pop  hl]
	beq.b	0f
	rts                                    	| [$04d4: ret  nz]
0:
	move.b	#0x80,d1                        	| [$04d5: ld   b,$80]
l_04d7:
	move.b	(a0),d0                         	| [$04d7: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$04d8: cp   $0B]
	jne	l_04e1                             	| [$04da: jr   nz,$04E1]
	move.b	#0x01,d0                        	| [$04dc: ld   a,$01]
	move.b	d0,(a0)                         	| [$04de: ld   (hl),a]
	jra	l_04e3                             	| [$04df: jr   $04E3]
l_04e1:
	addq.b	#1,d0                           	| [$04e1: inc  a]
	move.b	d0,(a0)                         	| [$04e2: ld   (hl),a]
l_04e3:
	move.b	(a0),d0                         	| [$04e3: ld   a,(hl)]

 * move timer. 01 -> 0B for the guard climbing up/down
 * note: difficulty/score does not affect up/down moves
	cmp.b	#0x01,d0                         	| [$04e4: cp   $01]
	bne.b	0f
	rts                                    	| [$04e6: ret  z]
0:
	cmp.b	#0x03,d0                         	| [$04e7: cp   $03]
	bne.b	0f
	rts                                    	| [$04e9: ret  z]
0:
	cmp.b	#0x05,d0                         	| [$04ea: cp   $05]
	bne.b	0f
	rts                                    	| [$04ec: ret  z]
0:
	cmp.b	#0x08,d0                         	| [$04ed: cp   $08]
	bne.b	0f
	rts                                    	| [$04ef: ret  z]
0:
	cmp.b	#0x0A,d0                         	| [$04f0: cp   $0A]
	bne.b	0f
	jbsr	l_0523                            	| [$04f2: call z,$0523]
0:
	cmp.b	#0x02,d0                         	| [$04f5: cp   $02]
	bne.b	0f
	jbsr	l_0523                            	| [$04f7: call z,$0523]
0:
	cmp.b	#0x04,d0                         	| [$04fa: cp   $04]
	bne.b	0f
	jbsr	l_0523                            	| [$04fc: call z,$0523]
0:
	cmp.b	#0x07,d0                         	| [$04ff: cp   $07]
	bne.b	0f
	jbsr	l_0523                            	| [$0501: call z,$0523]
0:
	cmp.b	#0x09,d0                         	| [$0504: cp   $09]
	bne.b	0f
	jbsr	l_0523                            	| [$0506: call z,$0523]
0:
	cmp.b	#0x06,d0                         	| [$0509: cp   $06]
	jne	l_0516                             	| [$050b: jr   nz,$0516]
	move.b	#0x27,d0                        	| [$050d: ld   a,$27]
	move.b	d0,(0x00,a2)                    	| [$050f: ld   (ix+$00),a]  change sprite frame
	jbsr	l_0523                            	| [$0512: call $0523]
	rts                                    	| [$0515: ret]
l_0516:
	cmp.b	#0x0B,d0                         	| [$0516: cp   $0B]
	jne	l_0522                             	| [$0518: jr   nz,$0522]
	move.b	#0xA7,d0                        	| [$051a: ld   a,$A7]
	move.b	d0,(0x00,a2)                    	| [$051c: ld   (ix+$00),a]  change sprite frame
	jbsr	l_0523                            	| [$051f: call $0523]
l_0522:
	rts                                    	| [$0522: ret]

l_0523:
	move.w	d0,-(sp)                        	| [$0523: push af]
	movem.w	d1/d2,-(sp)                    	| [$0524: push bc]
	move.b	unknown_61F5,d0                 	| [$0525: ld   a,(unknown_61F5)]
	                         	| [$0528: cp   $00]
	jne	l_0540                             	| [$052a: jr   nz,$0540]
	move.b	has_pick_61CF,d0                	| [$052c: ld   a,(has_pick_61CF)]
	                         	| [$052f: cp   $00]
	jne	l_0540                             	| [$0531: jr   nz,$0540]
	move.b	unknown_61F3,d0                 	| [$0533: ld   a,(unknown_61F3)]
	                         	| [$0536: cp   $00]
	jne	l_0540                             	| [$0538: jr   nz,$0540]
	lea	  game_mem+0x3F15,a0                      	| [$053a: ld   hl,$3F15]
	jbsr	l_2018                            	| [$053d: call $2018]
l_0540:

	movem.w	(sp)+,d1/d2                    	| [$0540: pop  bc]
	move.w	(sp),d0                        	| [$0541: pop  af]
	                        	| [$0542: push af]
	move.b	d1,d0                           	| [$0543: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0544: cp   $80]
	jne	l_055c                             	| [$0546: jr   nz,$055C]
	move.b	(0x03,a2),d0                    	| [$0548: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$054b: dec  a]
	move.b	d0,(0x03,a2)                    	| [$054c: ld   (ix+$03),a]
	clr.b	d0                               	| [$054f: xor  a]
	move.w	guard_struct_pointer_6093,a3     	| [$0550: ld   iy,(guard_struct_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0554: ld   (iy+$00),a]
	jbsr	l_0f72                            	| [$0557: call $0F72]
	move.w	(sp)+,d0                        	| [$055a: pop  af]
	rts                                    	| [$055b: ret]
l_055c:
	move.b	(0x03,a2),d0                    	| [$055c: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$055f: inc  a]
	move.b	d0,(0x03,a2)                    	| [$0560: ld   (ix+$03),a]
	clr.b	d0                               	| [$0563: xor  a]
	move.w	guard_struct_pointer_6093,a3     	| [$0564: ld   iy,(guard_struct_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0568: ld   (iy+$00),a]
	jbsr	l_0f72                            	| [$056b: call $0F72]
	move.w	(sp)+,d0                        	| [$056e: pop  af]
	rts                                    	| [$056f: ret]


 *
 * guard left/right movement routine
 * no A.I. here:	 if direction = left, animates left, etc..
 *
guard_walk_movement_0570:
 * handle the right side
	move.b	(0x00,a3),d0                    	| [$0570: ld   a,(iy+$00)]  guard direction
	and.b	#0x80,d0                         	| [$0573: and  $80]
	cmp.b	#0x80,d0                         	| [$0575: cp   $80]  to right?
	jne	l_0588                             	| [$0577: jr   nz,$0588]
 * guard faces right

	move.w	d6,-(sp)                        	| [$0579: push hl]
	move.w	stored_logical_address_6044,d6             	| [$057a: ld   hl,(stored_logical_address_6044)]
	jbsr	character_can_walk_right_0CFA     	| [$057d: call character_can_walk_right_0CFA]
	move.w	(sp)+,d6                        	| [$0580: pop  hl]
	move.b	unknown_600B,d0                 	| [$0581: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0584: cp   $02]
	jeq	l_05a2                             	| [$0586: jr   z,$05A2]  can walk right

 * does not face right or cannot walk right. handle left side
l_0588:
	move.b	(0x00,a3),d0                    	| [$0588: ld   a,(iy+$00)]
	and.b	#0x40,d0                         	| [$058b: and  $40]
	cmp.b	#0x40,d0                         	| [$058d: cp   $40]  faces left?
	beq.b	0f
	rts                                    	| [$058f: ret  nz] neither right or left: on ladder? quit
0:


	move.w	d6,-(sp)                        	| [$0590: push hl]
	move.w	stored_logical_address_6044,d6             	| [$0591: ld   hl,(stored_logical_address_6044)]
	jbsr	character_can_walk_left_0D69      	| [$0594: call character_can_walk_left_0D69]
	move.w	(sp)+,d6                        	| [$0597: pop  hl]
	move.b	unknown_600B,d0                 	| [$0598: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$059b: cp   $02]
	beq.b	0f
	rts                                    	| [$059d: ret  nz]  cannot walk left:	 quit this routine
0:
 * walk left/animate
	move.b	#0x80,d1                        	| [$059e: ld   b,$80]
	jra	l_05a4                             	| [$05a0: jr   z,$05A4]
 * walk right/animate
l_05a2:
	clr.b	d1                               	| [$05a2: ld   b,$00]
 * animation/move counter for the guard
l_05a4:
	move.b	(a0),d0                         	| [$05a4: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$05a5: cp   $0B]
	jne	l_05ae                             	| [$05a7: jr   nz,$05AE]
 * counter reaches 0B: reset to 01
	move.b	#0x01,d0                        	| [$05a9: ld   a,$01]
	move.b	d0,(a0)                         	| [$05ab: ld   (hl),a]
	jra	l_05b0                             	| [$05ac: jr   $05B0]

l_05ae:
	addq.b	#1,d0                           	| [$05ae: inc  a]
	move.b	d0,(a0)                         	| [$05af: ld   (hl),a]
l_05b0:
	move.b	(a0),d0                         	| [$05b0: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$05b1: cp   $02]
	jeq	guard_move_if_fast_enough_05E0     	| [$05b3: jr   z,guard_move_if_fast_enough_05E0]
	cmp.b	#0x05,d0                         	| [$05b5: cp   $05]
	jeq	guard_move_if_fast_enough_05E0     	| [$05b7: jr   z,guard_move_if_fast_enough_05E0]
	cmp.b	#0x09,d0                         	| [$05b9: cp   $09]
	jeq	guard_move_if_fast_enough_05E0     	| [$05bb: jr   z,guard_move_if_fast_enough_05E0]
* $FF is never set and thus never used: must be a last minute change
* this is somehow confirmed by the fact that speeds 9 and 10 are strictly
* identical (same speed as player)
	cmp.b	#0xFF,d0                         	| [$05bd: cp   $FF]
	jeq	guard_move_if_fast_enough_05E0     	| [$05bf: jr   z,guard_move_if_fast_enough_05E0]
	cmp.b	#0x04,d0                         	| [$05c1: cp   $04]
	jeq	guard_move_if_fast_enough_05E0     	| [$05c3: jp   z,guard_move_if_fast_enough_05E0]


	cmp.b	#0x06,d0                         	| [$05c6: cp   $06]
	bne.b	0f
	jbsr	guard_unconditional_move_0614     	| [$05c8: call z,guard_unconditional_move_0614]
0:
	cmp.b	#0x08,d0                         	| [$05cb: cp   $08]
	bne.b	0f
	jbsr	guard_unconditional_move_0614     	| [$05cd: call z,guard_unconditional_move_0614]
0:
	cmp.b	#0x0A,d0                         	| [$05d0: cp   $0A]
	bne.b	0f
	jbsr	guard_unconditional_move_0614     	| [$05d2: call z,guard_unconditional_move_0614]
0:
	cmp.b	#0x01,d0                         	| [$05d5: cp   $01]
	jne	l_05f2                             	| [$05d7: jr   nz,$05F2]
 * could move
	move.b	#0x31,d0                        	| [$05d9: ld   a,$31]
	or.b	d1,d0                             	| [$05db: or   b]
	move.b	d0,(0x00,a2)                    	| [$05dc: ld   (ix+$00),a]
	rts                                    	| [$05df: ret]
guard_move_if_fast_enough_05E0:
	move.w	d0,-(sp)                        	| [$05e0: push af]
	movem.w	d1/d2,-(sp)                    	| [$05e1: push bc]
	move.b	d0,d1                           	| [$05e2: ld   b,a]
	move.b	guard_speed_6164,d0             	| [$05e3: ld   a,(guard_speed_6164)] 0 -> 10
	cmp.b	d1,d0                            	| [$05e6: cp   b]
	jcc	l_05ec                             	| [$05e7: jr   nc,$05EC]
 * b > guard speed:	don't move

	movem.w	(sp)+,d1/d2                    	| [$05e9: pop  bc]
	move.w	(sp)+,d0                        	| [$05ea: pop  af]
	rts                                    	| [$05eb: ret]
l_05ec:

	movem.w	(sp)+,d1/d2                    	| [$05ec: pop  bc]
	move.w	(sp)+,d0                        	| [$05ed: pop  af]
	jbsr	guard_unconditional_move_0614     	| [$05ee: call guard_unconditional_move_0614]
	rts                                    	| [$05f1: ret]
l_05f2:
	cmp.b	#0x03,d0                         	| [$05f2: cp   $03]
	jne	l_05fd                             	| [$05f4: jr   nz,$05FD]
	move.b	#0x30,d0                        	| [$05f6: ld   a,$30]
	or.b	d1,d0                             	| [$05f8: or   b]
	move.b	d0,(0x00,a2)                    	| [$05f9: ld   (ix+$00),a]
	rts                                    	| [$05fc: ret]
l_05fd:
	cmp.b	#0x07,d0                         	| [$05fd: cp   $07]
	jne	l_0608                             	| [$05ff: jr   nz,$0608]
	move.b	#0x2E,d0                        	| [$0601: ld   a,$2E]
	or.b	d1,d0                             	| [$0603: or   b]
	move.b	d0,(0x00,a2)                    	| [$0604: ld   (ix+$00),a]
	rts                                    	| [$0607: ret]
l_0608:
	cmp.b	#0xFF,d0                         	| [$0608: cp   $FF]
	jne	l_0613                             	| [$060a: jr   nz,$0613]
	move.b	#0x30,d0                        	| [$060c: ld   a,$30]
	or.b	d1,d0                             	| [$060e: or   b]
	move.b	d0,(0x00,a2)                    	| [$060f: ld   (ix+$00),a]
	rts                                    	| [$0612: ret]
l_0613:
	rts                                    	| [$0613: ret]


guard_unconditional_move_0614:
 * actually move
	move.w	d0,-(sp)                        	| [$0614: push af]
	movem.w	d1/d2,-(sp)                    	| [$0615: push bc]
	move.b	unknown_61F5,d0                 	| [$0616: ld   a,(unknown_61F5)]
	cmp.b	#0x00,d0                         	| [$0619: cp   $00]
	jne	l_0631                             	| [$061b: jr   nz,$0631]
	move.b	has_pick_61CF,d0                	| [$061d: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$0620: cp   $00]
	jne	l_0631                             	| [$0622: jr   nz,$0631]
	move.b	unknown_61F3,d0                 	| [$0624: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0627: cp   $00]
	jne	l_0631                             	| [$0629: jr   nz,$0631]
	lea	game_mem+0x3F39,a0                      	| [$062b: ld   hl,$3F39]
	jbsr	l_2018                            	| [$062e: call $2018]
l_0631:

	movem.w	(sp)+,d1/d2                    	| [$0631: pop  bc]
	clr.b	d0                               	| [$0632: xor  a]
	move.w	guard_struct_pointer_6093,a3     	| [$0633: ld   iy,(guard_struct_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0637: ld   (iy+$00),a]
	move.b	d1,d0                           	| [$063a: ld   a,b]
	cmp.b	#0x80,d0                         	| [$063b: cp   $80]
	jeq	l_0658                             	| [$063d: jr   z,$0658]
	move.b	(0x02,a2),d0                    	| [$063f: ld   a,(ix+$02)]
	addq.b	#1,d0                           	| [$0642: inc  a]
	move.b	d0,(0x02,a2)                    	| [$0643: ld   (ix+$02),a]
	cmp.b	#0xF0,d0                         	| [$0646: cp   $F0]  F0 is the max screen X
	jne	l_0656                             	| [$0648: jr   nz,$0656]
 * set x to 1
	move.b	#0x01,d0                        	| [$064a: ld   a,$01]
	move.b	d0,(0x02,a2)                    	| [$064c: ld   (ix+$02),a]
 * increase screen index
	move.b	screen_index_param_6098,d0      	| [$064f: ld   a,(screen_index_param_6098)]
	addq.b	#1,d0                           	| [$0652: inc  a]
	move.b	d0,screen_index_param_6098      	| [$0653: ld   (screen_index_param_6098),a]
l_0656:
	move.w	(sp)+,d0                        	| [$0656: pop  af]
	rts                                    	| [$0657: ret]
l_0658:
	move.b	(0x02,a2),d0                    	| [$0658: ld   a,(ix+$02)]
	subq.b	#1,d0                           	| [$065b: dec  a]
	move.b	d0,(0x02,a2)                    	| [$065c: ld   (ix+$02),a]
	cmp.b	#0x01,d0                         	| [$065f: cp   $01]  1 is the min screen x
	jne	l_066f                             	| [$0661: jr   nz,$066F]
 * set x to $F0
	move.b	#0xF0,d0                        	| [$0663: ld   a,$F0]
	move.b	d0,(0x02,a2)                    	| [$0665: ld   (ix+$02),a]
 * decrease screen index
	move.b	screen_index_param_6098,d0      	| [$0668: ld   a,(screen_index_param_6098)]
	subq.b	#1,d0                           	| [$066b: dec  a]
	move.b	d0,screen_index_param_6098      	| [$066c: ld   (screen_index_param_6098),a]
l_066f:
	clr.b	d0                               	| [$066f: xor  a]
	move.w	guard_struct_pointer_6093,a3     	| [$0670: ld   iy,(guard_struct_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0674: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$0677: pop  af]
	rts                                    	| [$0678: ret]
l_0679:
	clr.b	d0                               	| [$0679: xor  a]
	move.b	d0,unknown_601C                 	| [$067a: ld   (unknown_601C),a]
	move.b	d0,unknown_601D                 	| [$067d: ld   (unknown_601D),a]
	move.b	d0,unknown_601E                 	| [$0680: ld   (unknown_601E),a]
	rts                                    	| [$0683: ret]


handle_player_walk_0684:
	lea	unknown_601C,a0                	| [$0684: ld   hl,unknown_601C]
	lea	wagon_data_658A,a2             	| [$0687: ld   ix,wagon_data_658A]
	lea	player_x_6582,a3               	| [$068b: ld   iy,player_x_6582]
	move.w	#0x0004,d3                      	| [$068f: ld   de,$0004] 4
	move.b	(a0),d0                         	| [$0692: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$0693: cp   $01]
	jeq	l_06a6                             	| [$0695: jr   z,$06A6]
	addq.w	#1,a0                           	| [$0697: inc  hl]
	add.w	d3,a2                            	| [$0698: add  ix,de]
	move.b	(a0),d0                         	| [$069a: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$069b: cp   $01]
	jeq	l_06a6                             	| [$069d: jr   z,$06A6]
	addq.w	#1,a0                           	| [$069f: inc  hl]
	add.w	d3,a2                            	| [$06a0: add  ix,de]
	move.b	(a0),d0                         	| [$06a2: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$06a3: cp   $01]
	beq.b	0f
	rts                                    	| [$06a5: ret  nz]
0:
l_06a6:
	move.b	#0x01,d0                        	| [$06a6: ld   a,$01]
	move.b	d0,unknown_6030                 	| [$06a8: ld   (unknown_6030),a]
	move.b	player_input_6026,d0            	| [$06ab: ld   a,(player_input_6026)]
	and.b	#0x08,d0                         	| [$06ae: and  $08]
	cmp.b	#0x08,d0                         	| [$06b0: cp   $08]
	bne.b	0f
	jbsr	l_06c9                            	| [$06b2: call z,$06C9]
0:
	move.b	player_input_6026,d0            	| [$06b5: ld   a,(player_input_6026)]
	and.b	#0x10,d0                         	| [$06b8: and  $10]
	cmp.b	#0x10,d0                         	| [$06ba: cp   $10]
	bne.b	0f
	jbsr	l_06cf                            	| [$06bc: call z,$06CF]
0:
	move.b	#0x01,d0                        	| [$06bf: ld   a,$01]
	move.b	d0,player_in_wagon_flag_6029    	| [$06c1: ld   (player_in_wagon_flag_6029),a]
	subq.b	#1,d0                           	| [$06c4: dec  a]
	move.b	d0,player_in_wagon_flag_13_602F 	| [$06c5: ld   (player_in_wagon_flag_13_602F),a]
	rts                                    	| [$06c8: ret]
l_06c9:
	move.b	#0x01,d0                        	| [$06c9: ld   a,$01]
	move.b	d0,unknown_602D                 	| [$06cb: ld   (unknown_602D),a]
	rts                                    	| [$06ce: ret]
l_06cf:
	move.b	#0x01,d0                        	| [$06cf: ld   a,$01]
	move.b	d0,unknown_602E                 	| [$06d1: ld   (unknown_602E),a]
	rts                                    	| [$06d4: ret]
l_06d5:
	move.b	unknown_6030,d0                 	| [$06d5: ld   a,(unknown_6030)]
	cmp.b	#0x01,d0                         	| [$06d8: cp   $01]
	beq.b	0f
	rts                                    	| [$06da: ret  nz]
0:
	move.b	unknown_602D,d0                 	| [$06db: ld   a,(unknown_602D)]
	cmp.b	#0x01,d0                         	| [$06de: cp   $01]
	bne.b	0f
	jbsr	l_0710                            	| [$06e0: call z,$0710]
0:
	move.b	unknown_602E,d0                 	| [$06e3: ld   a,(unknown_602E)]
	cmp.b	#0x01,d0                         	| [$06e6: cp   $01]
	bne.b	0f
	jbsr	l_0720                            	| [$06e8: call z,$0720]
0:
	move.b	player_in_wagon_flag_13_602F,d0 	| [$06eb: ld   a,(player_in_wagon_flag_13_602F)]
	addq.b	#1,d0                           	| [$06ee: inc  a]
	cmp.b	#0x04,d0                         	| [$06ef: cp   $04]
	jeq	l_06f7                             	| [$06f1: jr   z,$06F7]
	move.b	d0,player_in_wagon_flag_13_602F 	| [$06f3: ld   (player_in_wagon_flag_13_602F),a]
	rts                                    	| [$06f6: ret]
 *  kind of reset but called when???
l_06f7:
	clr.b	d0                               	| [$06f7: xor  a]
	move.b	d0,unknown_602D                 	| [$06f8: ld   (unknown_602D),a]
	move.b	d0,unknown_602E                 	| [$06fb: ld   (unknown_602E),a]
	move.b	d0,unknown_6030                 	| [$06fe: ld   (unknown_6030),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$0701: ld   (player_in_wagon_flag_6029),a]
	move.b	d0,player_death_flag_6025       	| [$0704: ld   (player_death_flag_6025),a]
	jbsr	l_0679                            	| [$0707: call $0679]
	move.b	#0x20,d0                        	| [$070a: ld   a,$20]
	move.b	d0,player_struct_6580           	| [$070c: ld   (player_struct_6580),a]
	rts                                    	| [$070f: ret]
l_0710:
	jbsr	l_0730                            	| [$0710: call $0730]
	jbsr	l_0770                            	| [$0713: call $0770]
	move.b	(0x00,a3),d0                    	| [$0716: ld   a,(iy+$00)]
	subq.b	#3,d0                           	| [$0719: dec  a] * 3
	move.b	d0,(0x00,a3)                    	| [$071c: ld   (iy+$00),a]
	rts                                    	| [$071f: ret]
l_0720:
	jbsr	l_0730                            	| [$0720: call $0730]
	jbsr	l_0753                            	| [$0723: call $0753]
	move.b	(a3),d0                    	| [$0726: ld   a,(iy+$00)]
	addq.b	#3,d0                           	| [$0729: inc  a] * 3
	move.b	d0,(a3)                    	| [$072c: ld   (iy+$00),a]
	rts                                    	| [$072f: ret]
l_0730:
	lea	game_mem+0x074F,a1                      	| [$0730: ld   de,$074F]
	moveq	#0,d0
	move.b	player_in_wagon_flag_13_602F,d0 	| [$0733: ld   a,(player_in_wagon_flag_13_602F)]
	cmp.b	#0x04,d0                         	| [$0736: cp   $04]
	bne.b	0f
	rts                                    	| [$0738: ret  z]
0:	
	add.w	d0,a1											| [$0739: add  a,e]
											| [$073a: ld   e,a]
											| [$073b: ld   a,d]
					
											| [$073e: ld   d,a]
	move.b	(a1),d0                         	| [$073f: ld   a,(de)]
	move.b	d0,d1                           	| [$0740: ld   b,a]
	move.b	player_struct_6580,d0           	| [$0741: ld   a,(player_struct_6580)]
	and.b	#0x08,d0                         	| [$0744: and  $08]
	or.b	d1,d0                             	| [$0746: or   b]
	move.b	d0,player_struct_6580           	| [$0747: ld   (player_struct_6580),a]
	clr.b	d0                               	| [$074a: xor  a]
	move.b	d0,player_death_flag_6025       	| [$074b: ld   (player_death_flag_6025),a]
	rts                                    	| [$074e: ret]

l_0753:
	move.b	#0x20,d1                        	| [$0753: ld   b,$20]
	movem.w	d1/d2,-(sp)                    	| [$0755: push bc]
	move.w	player_logical_address_6009,d6	| [$0756: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_right_0CFA     	| [$0759: call character_can_walk_right_0CFA]
	move.b	unknown_600B,d0                 	| [$075c: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$075f: cp   $02]
	jne	l_0765                             	| [$0761: jr   nz,$0765]

	movem.w	(sp)+,d1/d2                    	| [$0763: pop  bc]
	rts                                    	| [$0764: ret]
l_0765:
	move.b	#0x01,d0                        	| [$0765: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$0767: ld   (player_death_flag_6025),a]
	subq.b	#1,d0                           	| [$076a: dec  a]
	move.b	d0,player_in_wagon_flag_6029    	| [$076b: ld   (player_in_wagon_flag_6029),a]

	movem.w	(sp)+,d1/d2                    	| [$076e: pop  bc]
	rts                                    	| [$076f: ret]
l_0770:
	move.b	#0x20,d1                        	| [$0770: ld   b,$20]
l_0772:
	movem.w	d1/d2,-(sp)                    	| [$0772: push bc]
	move.w	player_logical_address_6009,d6	| [$0773: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_left_0D69      	| [$0776: call character_can_walk_left_0D69]
	move.b	unknown_600B,d0                 	| [$0779: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$077c: cp   $02]
	jne	l_0765                             	| [$077e: jr   nz,$0765]

	movem.w	(sp)+,d1/d2                    	| [$0780: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_0772                             	| [$0781: djnz $0772]
	rts                                    	| [$0783: ret]

player_grip_handle_test_0784:
	jbsr	update_player_screen_address_from_xy_555E	| [$0784: call update_player_screen_address_from_xy_555E]
	move.w	player_logical_address_6009,d6	| [$0787: ld   hl,(player_logical_address_6009)]
	subq.b	#3,d6                           	| [$078a: dec  hl] * 3
	bsr		read_rom                         	| [$078d: ld   a,(hl)] check what's above player head on screen
	cmp.b	#0xDC,d0                         	| [$078e: cp   $DC]
	jeq	l_0795                             	| [$0790: jr   z,$0795]
	cmp.b	#0x0B,d0                         	| [$0792: cp   $0B]
	beq.b	0f
	rts                                    	| [$0794: ret  nz]
0:
 * handle detected ($DC or $OB)
l_0795:
	move.b	player_gripping_handle_602A,d0  	| [$0795: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0798: cp   $01]
	bne.b	0f
	rts                                    	| [$079a: ret  z]
0:
	move.b	#0x01,d0                        	| [$079b: ld   a,$01]
	lea	unknown_601E,a0                	| [$079d: ld   hl,unknown_601E]
	move.b	#0x00,d1                        	| [$07a0: ld   bc,$0003] 3
	move.b	#0x03,d2                        	| [$07a0: ld   bc,$0003] 3
	jbsr	cpdr                              	| [$07a3: cpdr]
	bne.b	0f
	rts                                    	| [$07a5: ret  z]
0:
	move.b	player_input_6026,d0            	| [$07a6: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$07a9: and  $80]
	cmp.b	#0x80,d0                         	| [$07ab: cp   $80]
	beq.b	0f
	rts                                    	| [$07ad: ret  nz]
0:
 * "fire" pressed while below the handle
	move.b	gameplay_allowed_6054,d0        	| [$07ae: ld   a,(gameplay_allowed_6054)]
									| [$07b1: cp   $00]
	jeq	player_grips_handle_07BD           	| [$07b3: jr   z,player_grips_handle_07BD]
	move.b	player_move_direction_6050,d0   	| [$07b5: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$07b8: and  $80]
	cmp.b	#0x80,d0                         	| [$07ba: cp   $80]
	bne.b	0f
	rts                                    	| [$07bc: ret  z]
0:
player_grips_handle_07BD:
	move.b	#0x01,d0                        	| [$07bd: ld   a,$01]
	move.b	d0,player_controls_frozen_6028  	| [$07bf: ld   (player_controls_frozen_6028),a]
	move.b	d0,player_gripping_handle_602A  	| [$07c2: ld   (player_gripping_handle_602A),a]
	subq.b	#1,d0                           	| [$07c5: dec  a]
	move.b	d0,unknown_602B                 	| [$07c6: ld   (unknown_602B),a]
	move.b	#0x01,d0                        	| [$07c9: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$07cb: ld   (unknown_6275),a]
	lea	game_mem+0x3EFD,a0                      	| [$07ce: ld   hl,$3EFD]
	jbsr	l_2018                            	| [$07d1: call $2018]
	rts                                    	| [$07d4: ret]
l_07d5:
	move.b	player_gripping_handle_602A,d0  	| [$07d5: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$07d8: cp   $01]
	beq.b	0f
	rts                                    	| [$07da: ret  nz]
0:
	lea	  game_mem+0x07F6,a1                      	| [$07db: ld   de,$07F6]
	moveq	#0,d0
	move.b	unknown_602B,d0                 	| [$07de: ld   a,(unknown_602B)]
	cmp.b	#0x05,d0                         	| [$07e1: cp   $05]
	bne.b	0f
	rts                                    	| [$07e3: ret  z]
0:
												| [$07e4: add  a,e]
												| [$07e5: ld   e,a]
												| [$07e6: ld   a,d]
												| [adc 0,a]
												
												| [$07e9: ld   d,a]
	move.b	(a1,d0.w),d0                         	| [$07ea: ld   a,(de)]
	move.b	d0,player_struct_6580           	| [$07eb: ld   (player_struct_6580),a]
	move.b	unknown_602B,d0                 	| [$07ee: ld   a,(unknown_602B)]
	addq.b	#1,d0                           	| [$07f1: inc  a]
	move.b	d0,unknown_602B                 	| [$07f2: ld   (unknown_602B),a]
	rts                                    	| [$07f5: ret]
	
l_07F6:
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1B
	.align	2


l_07fb:
	move.b	player_gripping_handle_602A,d0  	| [$07fb: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$07fe: cp   $01]
	beq.b	0f
	rts                                    	| [$0800: ret  nz]
0:
	move.b	player_input_6026,d0            	| [$0801: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$0804: and  $80]
	cmp.b	#0x80,d0                         	| [$0806: cp   $80]
	beq.b	0f
	rts                                    	| [$0808: ret  nz]
0:
	move.b	gameplay_allowed_6054,d0        	| [$0809: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x00,d0                         	| [$080c: cp   $00]
	jeq	l_0818                             	| [$080e: jr   z,$0818]
	move.b	player_move_direction_6050,d0   	| [$0810: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$0813: and  $80]
	cmp.b	#0x80,d0                         	| [$0815: cp   $80]
	bne.b	0f
	rts                                    	| [$0817: ret  z]
0:
l_0818:
	clr.b	d0                               	| [$0818: xor  a]
	move.b	d0,player_gripping_handle_602A  	| [$0819: ld   (player_gripping_handle_602A),a]
	move.b	d0,player_controls_frozen_6028  	| [$081c: ld   (player_controls_frozen_6028),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$081f: ld   (player_in_wagon_flag_6029),a]
	move.b	d0,unknown_602B                 	| [$0822: ld   (unknown_602B),a]
	move.b	#0x19,d0                        	| [$0825: ld   a,$19]
	move.b	d0,player_struct_6580           	| [$0827: ld   (player_struct_6580),a]
	move.b	#0x01,d0                        	| [$082a: ld   a,$01]
	move.b	d0,unknown_602C                 	| [$082c: ld   (unknown_602C),a]
	rts                                    	| [$082f: ret]
l_0830:
	move.b	player_gripping_handle_602A,d0  	| [$0830: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0833: cp   $01]
	bne.b	0f
	rts                                    	| [$0835: ret  z]
0:
	move.b	player_death_flag_6025,d0       	| [$0836: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$0839: cp   $01]
	bne.b	0f
	rts                                    	| [$083b: ret  z]
0:
	move.b	player_y_6583,d0                	| [$083c: ld   a,(player_y_6583)]
	addq.b	#1,d0                           	| [$083f: inc  a]
	lea	wagon_data_658A,a2             	| [$0840: ld   ix,wagon_data_658A]
	lea	unknown_601C,a3                	| [$0844: ld   iy,unknown_601C]
	move.w	#0x0004,d3                      	| [$0848: ld   de,$0004] 4
	jbsr	l_085d                            	| [$084b: call $085D]
	add.w	d3,a2                            	| [$084e: add  ix,de]
	addq.w	#1,a3                           	| [$0850: inc  iy]
	jbsr	l_085d                            	| [$0852: call $085D]
	add.w	d3,a2                            	| [$0855: add  ix,de]
	addq.w	#1,a3                           	| [$0857: inc  iy]
	jbsr	l_085d                            	| [$0859: call $085D]
	rts                                    	| [$085c: ret]
l_085d:
	cmp.b	(0x01,a2),d0                     	| [$085d: cp   (ix+$01)]
	jne	l_08a9                             	| [$0860: jr   nz,$08A9]
	move.w	d0,-(sp)                        	| [$0862: push af]
	move.b	#0x08,d1                        	| [$0863: ld   b,$08]
	move.b	player_x_6582,d0                	| [$0865: ld   a,(player_x_6582)]
	subq.b	#0x05,d0                        	| [$0868: sub  $05]
l_086a:
	addq.b	#1,d0                           	| [$086a: inc  a]
	move.w	d0,-(sp)                        	| [$086b: push af]
	cmp.b	(0x00,a2),d0                     	| [$086c: cp   (ix+$00)]
	jeq	l_08a0                             	| [$086f: jr   z,$08A0]
	move.w	(sp)+,d0                        	| [$0871: pop  af]
	subq.b	#1,d1                           	| [...]
	jne	l_086a                             	| [$0872: djnz $086A]
	jra	l_08a3                             	| [$0874: jr   $08A3]
l_0876:
	move.b	(0x00,a3),d0                    	| [$0876: ld   a,(iy+$00)]
	cmp.b	#0x00,d0                         	| [$0879: cp   $00]
	jne	l_0894                             	| [$087b: jr   nz,$0894]

	move.l	a0,-(sp)                        	| [$087d: push hl]

	move.l	a2,-(sp)                        	| [$087e: push ix]
	move.w	#0x0100,d6                      	| [$0880: ld   hl,$0100]
	jbsr	add_to_score_5C90                 	| [$0883: call add_to_score_5C90]
	lea	game_mem+0x3F03,a0                      	| [$0886: ld   hl,$3F03]
	jbsr	l_2018                            	| [$0889: call $2018]
	move.b	#0x01,d0                        	| [$088c: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$088e: ld   (unknown_6275),a]
	move.l	(sp)+,a2                        	| [$0891: pop  ix]
	move.l	(sp)+,a0                        	| [$0893: pop  hl]
l_0894:
	move.b	#0x01,d0                        	| [$0894: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0896: ld   (iy+$00),a]
	move.b	#0x1A,d0                        	| [$0899: ld   a,$1A]
	move.b	d0,player_struct_6580           	| [$089b: ld   (player_struct_6580),a]
	move.w	(sp)+,d0                        	| [$089e: pop  af]
	rts                                    	| [$089f: ret]
l_08a0:
	move.w	(sp)+,d0                        	| [$08a0: pop  af]
	jra	l_0876                             	| [$08a1: jr   $0876]
l_08a3:
	clr.b	d0                               	| [$08a3: xor  a]
	move.b	d0,(0x00,a3)                    	| [$08a4: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$08a7: pop  af]
	rts                                    	| [$08a8: ret]
l_08a9:
	move.w	d0,-(sp)                        	| [$08a9: push af]
	clr.b	d0                               	| [$08aa: xor  a]
	move.b	d0,(0x00,a3)                    	| [$08ab: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$08ae: pop  af]
	rts                                    	| [$08af: ret]
 * wagon start y values
compute_wagon_start_values_08b0:
	lea	unknown_6019,a2                	| [$08b0: ld   ix,unknown_6019]
	lea	unknown_658B,a3                	| [$08b4: ld   iy,unknown_658B]
	move.b	#0xE1,d0                        	| [$08b8: ld   a,$E1]
	exg	d0,d7                              	| [$08ba: ex   af,af']
	jbsr	l_08df                            	| [$08bb: call $08DF]
	addq.w	#1,a2                           	| [$08be: inc  ix]
	addq.w	#4,a3                           	| [$08c0: inc  iy] * 4
	move.b	#0x41,d0                        	| [$08c8: ld   a,$41]
	exg	d0,d7                              	| [$08ca: ex   af,af']
	jbsr	l_08df                            	| [$08cb: call $08DF]
	addq.w	#1,a2                           	| [$08ce: inc  ix]
	addq.w	#4,a3                           	| [$08d0: inc  iy] * 4
	move.b	#0xC9,d0                        	| [$08d8: ld   a,$C9]
	exg	d0,d7                              	| [$08da: ex   af,af']
	jbsr	l_08df                            	| [$08db: call $08DF]
	rts                                    	| [$08de: ret]
l_08df:
	move.b	player_screen_600D,d0           	| [$08df: ld   a,(player_screen_600D)]
	subq.b	#1,d0                           	| [$08e2: dec  a]
	cmp.b	(a2),d0                     	| [$08e3: cp   (ix+$00)]
	jne	l_08ee                             	| [$08e6: jp   nz,$08EE]
	exg	d0,d7                              	| [$08e9: ex   af,af']
	move.b	d0,(a3)                    	| [$08ea: ld   (iy+$00),a]
	rts                                    	| [$08ed: ret]
 * not in current player screen: set coords to 255
l_08ee:
	st.b	d0                                	| [$08ee: ld   a,$FF]
	move.b	d0,(a3)                    	| [$08f0: ld   (iy+$00),a]
	rts                                    	| [$08f3: ret]
 * move wagons
l_08f4:
	lea	unknown_6016,a2                	| [$08f4: ld   ix,unknown_6016]
	lea	game_mem+0x0994,a3                      	| [$08f8: ld   iy,$0994]
	lea	wagon_data_658A,a0             	| [$08fc: ld   hl,wagon_data_658A]
	jbsr	l_0925                            	| [$08ff: call $0925]
	addq.w	#1,a2                           	| [$0902: inc  ix]
	addq.w	#4,a3                           	| [$0904: inc  iy] * 4
	addq.w	#4,a0                           	| [$090c: inc  hl] * 4
	jbsr	l_0925                            	| [$0910: call $0925]
	addq.w	#1,a2                           	| [$0913: inc  ix]
	addq.w	#4,a3                           	| [$0915: inc  iy] * 4
	addq.w	#4,a0                           	| [$091d: inc  hl] * 4
	jbsr	l_0925                            	| [$0921: call $0925]
	rts                                    	| [$0924: ret]
l_0925:
	move.b	(0x00,a2),d0                    	| [$0925: ld   a,(ix+$00)]
	cmp.b	#0x00,d0                         	| [$0928: cp   $00]
	jne	l_0961                             	| [$092a: jp   nz,$0961]
	move.b	(a0),d0                         	| [$092d: ld   a,(hl)]
	subq.b	#1,d0                           	| [$092e: dec  a]
	move.b	d0,(a0)                         	| [$092f: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$0930: push af]
	move.b	(0x06,a2),d0                    	| [$0931: ld   a,(ix+$06)]
	cmp.b	#0x00,d0                         	| [$0934: cp   $00]
	jeq	l_093f                             	| [$0936: jr   z,$093F]
	move.b	player_x_6582,d0                	| [$0938: ld   a,(player_x_6582)]
	subq.b	#1,d0                           	| [$093b: dec  a]
	move.b	d0,player_x_6582                	| [$093c: ld   (player_x_6582),a]
l_093f:
	move.w	(sp)+,d0                        	| [$093f: pop  af]
	cmp.b	(0x02,a3),d0                     	| [$0940: cp   (iy+$02)]
	jeq	l_094c                             	| [$0943: jp   z,$094C]
	cmp.b	#0x00,d0                         	| [$0946: cp   $00]
	jeq	l_0959                             	| [$0948: jp   z,$0959]
	rts                                    	| [$094b: ret]
l_094c:
	move.b	(0x03,a2),d0                    	| [$094c: ld   a,(ix+$03)]
	cmp.b	(0x03,a3),d0                     	| [$094f: cp   (iy+$03)]
	beq.b	0f
	rts                                    	| [$0952: ret  nz]
0:
	move.b	#0x01,d0                        	| [$0953: ld   a,$01]
	move.b	d0,(0x00,a2)                    	| [$0955: ld   (ix+$00),a]
	rts                                    	| [$0958: ret]
l_0959:
	move.b	(0x03,a2),d0                    	| [$0959: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$095c: dec  a]
	move.b	d0,(0x03,a2)                    	| [$095d: ld   (ix+$03),a]
	rts                                    	| [$0960: ret]
l_0961:
	move.b	(a0),d0                         	| [$0961: ld   a,(hl)]
	addq.b	#1,d0                           	| [$0962: inc  a]
	move.b	d0,(a0)                         	| [$0963: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$0964: push af]
	move.b	(0x06,a2),d0                    	| [$0965: ld   a,(ix+$06)]
	cmp.b	#0x00,d0                         	| [$0968: cp   $00]
	jeq	l_0973                             	| [$096a: jr   z,$0973]
	move.b	player_x_6582,d0                	| [$096c: ld   a,(player_x_6582)]
	addq.b	#1,d0                           	| [$096f: inc  a]
	move.b	d0,player_x_6582                	| [$0970: ld   (player_x_6582),a]
l_0973:
	move.w	(sp)+,d0                        	| [$0973: pop  af]
	cmp.b	(0x00,a3),d0                     	| [$0974: cp   (iy+$00)]
	jeq	l_097f                             	| [$0977: jp   z,$097F]
	cmp.b	#0xFF,d0                         	| [$097a: cp   $FF]
	jeq	l_098c                             	| [$097c: jr   z,$098C]
	rts                                    	| [$097e: ret]
l_097f:
	move.b	(0x03,a2),d0                    	| [$097f: ld   a,(ix+$03)]
	cmp.b	(0x01,a3),d0                     	| [$0982: cp   (iy+$01)]
	beq.b	0f
	rts                                    	| [$0985: ret  nz]
0:
	clr.b	d0                               	| [$0986: ld   a,$00]
	move.b	d0,(0x00,a2)                    	| [$0988: ld   (ix+$00),a]
	rts                                    	| [$098b: ret]
l_098c:
	move.b	(0x03,a2),d0                    	| [$098c: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$098f: inc  a]
	move.b	d0,(0x03,a2)                    	| [$0990: ld   (ix+$03),a]
	rts                                    	| [$0993: ret]


l_09a0:
	move.b	elevator_not_moving_6012,d0                       	| [$09a0: ld   a,($6012)]
											| [$09a3: cp   $00]
	bne.b	0f
	rts                                    	| [$09a5: ret  z]
0:
	move.b	d0,(a1)                         	| [$09a1: ld   (de),a]
	move.b	d1,d5                           	| [$09a2: ld   h,b]
	tst.b	d0                         	| [$09a3: cp   $00]
	bne.b	0f
	rts                                    	| [$09a5: ret  z]
0:
	move.b	elevator_timer_current_screen_6011,d0	| [$09a6: ld   a,(elevator_timer_current_screen_6011)]
	addq.b	#1,d0                           	| [$09a9: inc  a]
	move.b	d0,elevator_timer_current_screen_6011	| [$09aa: ld   (elevator_timer_current_screen_6011),a]
	cmp.b	#0x5F,d0                         	| [$09ad: cp   $5F]  < $5F:	 don't move the elevator
	beq.b	0f
	rts                                    	| [$09af: ret  nz]
0:
 * move the elevator
	clr.b	d0                               	| [$09b0: xor  a]
	move.b	d0,elevator_timer_current_screen_6011	| [$09b1: ld   (elevator_timer_current_screen_6011),a]
	move.b	d0,elevator_not_moving_6012     	| [$09b4: ld   (elevator_not_moving_6012),a]
	addq.b	#1,d0                           	| [$09b7: inc  a]
	move.b	d0,unknown_6015                 	| [$09b8: ld   (unknown_6015),a]
	move.b	player_screen_600D,d0           	| [$09bb: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$09be: cp   $02]
	jeq	l_09c8                             	| [$09c0: jr   z,$09C8]
	lea	game_mem+0x09E8,a3                      	| [$09c2: ld   iy,$09E8]
	jra	l_09cc                             	| [$09c6: jr   $09CC]
l_09c8:
	lea	game_mem+0x09DF,a3                      	| [$09c8: ld   iy,$09DF]
l_09cc:
	move.b	#0x09,d1                        	| [$09cc: ld   b,$09]
l_09ce:
	move.b	(0x02,a2),d0                    	| [$09ce: ld   a,(ix+$02)]
	cmp.b	(a3),d0                     	| [$09d1: cp   (iy+$00)]
	jeq	l_09f1                             	| [$09d4: jr   z,$09F1]
	addq.w	#1,a3                           	| [$09d6: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_09ce                             	| [$09d8: djnz $09CE]
l_09da:
	clr.b	d0                               	| [$09da: xor  a]
	move.b	d0,(a0)                         	| [$09db: ld   (hl),a]
	                           	| [$09dc: dec  hl]
	move.b	d0,-(a0)                         	| [$09dd: ld   (hl),a]
	rts                                    	| [$09de: ret]

 * player entering in the elevator
l_09f1:
	move.b	elevator_y_current_screen_6587,d0	| [$09f1: ld   a,(elevator_y_current_screen_6587)]
	
	* no effect : removed								| [$09f4: sub  $00]
	cmp.b	(0x03,a2),d0                     	| [$09f6: cp   (ix+$03)]
	jeq	l_0a09                             	| [$09f9: jr   z,$0A09]
	subq.b	#0x01,d0                        	| [$09fb: sub  $01]
	cmp.b	(0x03,a2),d0                     	| [$09fd: cp   (ix+$03)]
	jeq	l_0a09                             	| [$0a00: jr   z,$0A09]
	addq.b	#0x02,d0                        	| [$0a02: add  a,$02]
	cmp.b	(0x03,a2),d0                     	| [$0a04: cp   (ix+$03)]
	jne	l_09da                             	| [$0a07: jr   nz,$09DA]
l_0a09:
	move.b	screen_index_param_6098,d0      	| [$0a09: ld   a,(screen_index_param_6098)]
	cmp.b	#0x01,d0                         	| [$0a0c: cp   $01]
	jeq	l_09da                             	| [$0a0e: jr   z,$09DA]
	move.b	fatal_fall_height_reached_604E,d0	| [$0a10: ld   a,(fatal_fall_height_reached_604E)]
	cmp.b	#0x00,d0                         	| [$0a13: cp   $00]
	jeq	l_0a21                             	| [$0a15: jr   z,$0A21]
	move.b	d6,d0                           	| [$0a17: ld   a,l]
	cmp.b	#0x14,d0                         	| [$0a18: cp   $14]
	jne	l_0a21                             	| [$0a1a: jr   nz,$0A21]
	move.b	#0x01,d0                        	| [$0a1c: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$0a1e: ld   (player_death_flag_6025),a]
l_0a21:
	move.b	#0x01,d0                        	| [$0a21: ld   a,$01]
	move.b	d0,(a0)                         	| [$0a23: ld   (hl),a]
	                           	| [$0a24: dec  hl]
	move.b	d0,-(a0)                         	| [$0a25: ld   (hl),a]
	rts                                    	| [$0a26: ret]

l_0a27:
	move.b	screen_index_param_6098,d0      	| [$0a27: ld   a,(screen_index_param_6098)]
	cmp.b	#0x02,d0                         	| [$0a2a: cp   $02]
	jne	l_0a34                             	| [$0a2c: jr   nz,$0A34]
	lea	game_mem+0x0A42,a3                      	| [$0a2e: ld   iy,$0A42]
	jra	l_0a38                             	| [$0a32: jr   $0A38]
l_0a34:
	lea	game_mem+0x0A54,a3                      	| [$0a34: ld   iy,$0A54]
l_0a38:
	move.b	#0x12,d1                        	| [$0a38: ld   b,$12]
	move.b	(a0),d0                         	| [$0a3a: ld   a,(hl)]
	move.w	d0,-(sp)                        	| [$0a3b: push af]
	jbsr	l_09ce                            	| [$0a3c: call $09CE]
	move.w	(sp)+,d0                        	| [$0a3f: pop  af]
	move.b	d0,(a0)                         	| [$0a40: ld   (hl),a]
	rts                                    	| [$0a41: ret]

handle_elevators_0a66:
	move.b	elevator_not_moving_6012,d0                       	| [$0a66: ld   a,($6012)]
	                         	| [$0a69: cp   $00]
	beq.b	0f
	rts                                    	| [$0a6b: ret  nz]
0:
	lea	elevator_y_current_screen_6587,a0	| [$0a6c: ld   hl,elevator_y_current_screen_6587]
	move.b	elevator_dir_current_screen_6010,d0	| [$0a6f: ld   a,(elevator_dir_current_screen_6010)]
	cmp.b	#0x01,d0                         	| [$0a72: cp   $01]
	jne	l_0ae7                             	| [$0a74: jr   nz,$0AE7]
	move.b	(a0),d0                         	| [$0a76: ld   a,(hl)]
	cmp.b	#0x12,d0                         	| [$0a77: cp   $12]
	jcs	l_0add                             	| [$0a79: jr   c,$0ADD]
	move.b	unknown_6015,d0                 	| [$0a7b: ld   a,(unknown_6015)]
	cmp.b	#0x01,d0                         	| [$0a7e: cp   $01]
	jeq	l_0aae                             	| [$0a80: jp   z,$0AAE]
	move.b	player_screen_600D,d0           	| [$0a83: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$0a86: cp   $03]
	jeq	l_0a99                             	| [$0a88: jp   z,$0A99]
	move.b	(a0),d0                         	| [$0a8b: ld   a,(hl)]
 * screen 2:	2 stops besides max and min
	cmp.b	#0x42,d0                         	| [$0a8c: cp   $42]
	jeq	l_0b28                             	| [$0a8e: jp   z,$0B28]
	cmp.b	#0x6A,d0                         	| [$0a91: cp   $6A]
	jeq	l_0b28                             	| [$0a93: jp   z,$0B28]
	jra	l_0aae                             	| [$0a96: jp   $0AAE]
 * screen 3:	4 stops besides max and min
l_0a99:
	move.b	(a0),d0                         	| [$0a99: ld   a,(hl)]
	cmp.b	#0xAA,d0                         	| [$0a9a: cp   $AA]
	jeq	l_0b28                             	| [$0a9c: jp   z,$0B28]
	cmp.b	#0x8A,d0                         	| [$0a9f: cp   $8A]
	jeq	l_0b28                             	| [$0aa1: jp   z,$0B28]
	cmp.b	#0x72,d0                         	| [$0aa4: cp   $72]
	jeq	l_0b28                             	| [$0aa6: jp   z,$0B28]
	cmp.b	#0x2A,d0                         	| [$0aa9: cp   $2A]
	jeq	l_0b28                             	| [$0aab: jp   z,$0B28]
l_0aae:
	subq.b	#1,(a0)                         	| [$0aae: dec  (hl)]
	clr.b	d0                               	| [$0aaf: xor  a]
	move.b	d0,unknown_6015                 	| [$0ab0: ld   (unknown_6015),a]
	move.b	(0x00,a3),d0                    	| [$0ab3: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$0ab6: cp   $01]
	jne	l_0ac1                             	| [$0ab8: jr   nz,$0AC1]
	move.b	(0x03,a2),d0                    	| [$0aba: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$0abd: dec  a]
	move.b	d0,(0x03,a2)                    	| [$0abe: ld   (ix+$03),a]
l_0ac1:
	move.b	(0x27,a3),d0                    	| [$0ac1: ld   a,(iy+$27)]
	cmp.b	#0x01,d0                         	| [$0ac4: cp   $01]
	jne	l_0acf                             	| [$0ac6: jr   nz,$0ACF]
	move.b	(0x17,a2),d0                    	| [$0ac8: ld   a,(ix+$17)]
	subq.b	#1,d0                           	| [$0acb: dec  a]
	move.b	d0,(0x17,a2)                    	| [$0acc: ld   (ix+$17),a]
l_0acf:
	move.b	(0x67,a3),d0                    	| [$0acf: ld   a,(iy+$67)]
	cmp.b	#0x01,d0                         	| [$0ad2: cp   $01]
	beq.b	0f
	rts                                    	| [$0ad4: ret  nz]
0:
	move.b	(0x1b,a2),d0                    	| [$0ad5: ld   a,(ix+$1b)]
	subq.b	#1,d0                           	| [$0ad8: dec  a]
	move.b	d0,(0x1b,a2)                    	| [$0ad9: ld   (ix+$1b),a]
	rts                                    	| [$0adc: ret]
l_0add:
	clr.b	d0                               	| [$0add: ld   a,$00]
	move.b	d0,elevator_dir_current_screen_6010	| [$0adf: ld   (elevator_dir_current_screen_6010),a]
	addq.b	#1,d0                           	| [$0ae2: inc  a]
	move.b	d0,elevator_not_moving_6012     	| [$0ae3: ld   (elevator_not_moving_6012),a]
	rts                                    	| [$0ae6: ret]
l_0ae7:
	move.b	player_screen_600D,d0           	| [$0ae7: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$0aea: cp   $03]
	jeq	l_0af3                             	| [$0aec: jr   z,$0AF3]
	move.b	(a0),d0                         	| [$0aee: ld   a,(hl)]
	cmp.b	#0x89,d0                         	| [$0aef: cp   $89]
	jra	l_0af6                             	| [$0af1: jr   $0AF6]
l_0af3:
	move.b	(a0),d0                         	| [$0af3: ld   a,(hl)]
	cmp.b	#0xC9,d0                         	| [$0af4: cp   $C9]  max y for elevator of screen 3
l_0af6:
	jcc	l_0b23                             	| [$0af6: jr   nc,$0B23]
	addq.b	#1,(a0)                         	| [$0af8: inc  (hl)]
	move.b	(0x00,a3),d0                    	| [$0af9: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$0afc: cp   $01]
	jne	l_0b07                             	| [$0afe: jr   nz,$0B07]
	move.b	(0x03,a2),d0                    	| [$0b00: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$0b03: inc  a]
	move.b	d0,(0x03,a2)                    	| [$0b04: ld   (ix+$03),a]
l_0b07:
	move.b	(0x27,a3),d0                    	| [$0b07: ld   a,(iy+$27)]
	cmp.b	#0x01,d0                         	| [$0b0a: cp   $01]
	jne	l_0b15                             	| [$0b0c: jr   nz,$0B15]
	move.b	(0x17,a2),d0                    	| [$0b0e: ld   a,(ix+$17)]
	addq.b	#1,d0                           	| [$0b11: inc  a]
	move.b	d0,(0x17,a2)                    	| [$0b12: ld   (ix+$17),a]
l_0b15:
	move.b	(0x67,a3),d0                    	| [$0b15: ld   a,(iy+$67)]
	cmp.b	#0x01,d0                         	| [$0b18: cp   $01]
	beq.b	0f
	rts                                    	| [$0b1a: ret  nz]
0:
	move.b	(0x1b,a2),d0                    	| [$0b1b: ld   a,(ix+$1b)]
	addq.b	#1,d0                           	| [$0b1e: inc  a]
	move.b	d0,(0x1b,a2)                    	| [$0b1f: ld   (ix+$1b),a]
	rts                                    	| [$0b22: ret]
l_0b23:
	move.b	#0x01,d0                        	| [$0b23: ld   a,$01]
	move.b	d0,elevator_dir_current_screen_6010	| [$0b25: ld   (elevator_dir_current_screen_6010),a]
l_0b28:
	move.b	#0x01,d0                        	| [$0b28: ld   a,$01]
	move.b	d0,elevator_not_moving_6012     	| [$0b2a: ld   (elevator_not_moving_6012),a]
	rts                                    	| [$0b2d: ret]
l_0b2e:
	cmp.b	#0x01,d0                         	| [$0b2e: cp   $01]
	jeq	l_0b5f                             	| [$0b30: jr   z,$0B5F]
	move.b	(a0),d0                         	| [$0b32: ld   a,(hl)]
	cmp.b	#0x00,d0                         	| [$0b33: cp   $00]
	jeq	l_0b5f                             	| [$0b35: jr   z,$0B5F]
	move.b	d2,d0                           	| [$0b37: ld   a,c]
	cmp.b	#0x00,d0                         	| [$0b38: cp   $00]
	beq.b	0f
	rts                                    	| [$0b3a: ret  nz]
0:
	move.b	d1,d0                           	| [$0b3b: ld   a,b]
	move.b	d0,(0x00,a2)                    	| [$0b3c: ld   (ix+$00),a]
	addq.b	#1,(0x03,a2)                    	| [$0b3f: inc  (ix+$03)]
	addq.b	#1,(0x00,a3)                    	| [$0b42: inc  (iy+$00)]
	move.b	unknown_61F5,d0                 	| [$0b45: ld   a,(unknown_61F5)]
	cmp.b	#0x00,d0                         	| [$0b48: cp   $00]
	beq.b	0f
	rts                                    	| [$0b4a: ret  nz]
0:
	move.b	#0x0D,d0                        	| [$0b4b: ld   a,$0D]
	move.b	d0,d1                           	| [$0b4d: ld   b,a]
	move.b	screen_index_param_6098,d0      	| [$0b4e: ld   a,(screen_index_param_6098)]
	cmp.b	d1,d0                            	| [$0b51: cp   b]
	beq.b	0f
	rts                                    	| [$0b52: ret  nz]
0:
	move.b	#0x01,d0                        	| [$0b53: ld   a,$01]
	move.b	d0,unknown_61F5                 	| [$0b55: ld   (unknown_61F5),a]
	lea		game_mem+0x3F45,a0                      	| [$0b58: ld   hl,$3F45]
	jbsr	l_2018                            	| [$0b5b: call $2018]
	rts                                    	| [$0b5e: ret]
l_0b5f:
	clr.b	d0                               	| [$0b5f: xor  a]
	move.b	d0,(0x00,a3)                    	| [$0b60: ld   (iy+$00),a]
	rts                                    	| [$0b63: ret]
l_0b64:
	move.w	(sp)+,d0                        	| [$0b64: pop  af]
l_0b65:
	clr.b	d0                               	| [$0b65: xor  a]
	move.b	d0,unknown_609B                 	| [$0b66: ld   (unknown_609B),a]
	move.b	d0,(0x00,a3)                    	| [$0b69: ld   (iy+$00),a]
	rts                                    	| [$0b6c: ret]

player_movement_0B6D:
	move.b	player_death_flag_6025,d0       	| [$0b6d: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$0b70: cp   $01]
	bne.b	0f
	rts                                    	| [$0b72: ret  z]  dead:	 out of there
0:
	move.b	player_controls_frozen_6028,d0  	| [$0b73: ld   a,(player_controls_frozen_6028)]  gripping handle or other case where cannot move: out of here
	cmp.b	#0x01,d0                         	| [$0b76: cp   $01]
	jeq	l_0b65                             	| [$0b78: jp   z,$0B65]
	move.b	player_input_6026,d0            	| [$0b7b: ld   a,(player_input_6026)]
	and.b	#0x10,d0                         	| [$0b7e: and  $10]  right?
	cmp.b	#0x10,d0                         	| [$0b80: cp   $10]
	jne	l_0b91                             	| [$0b82: jr   nz,$0B91]
 * try to move right
	move.w	player_logical_address_6009,d6	| [$0b84: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_right_0CFA     	| [$0b87: call character_can_walk_right_0CFA]
	move.b	unknown_600B,d0                 	| [$0b8a: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0b8d: cp   $02]
	jeq	l_0bad                             	| [$0b8f: jr   z,$0BAD]
l_0b91:
	move.b	player_input_6026,d0            	| [$0b91: ld   a,(player_input_6026)]
	and.b	#0x08,d0                         	| [$0b94: and  $08]
	cmp.b	#0x08,d0                         	| [$0b96: cp   $08] left
	jne	l_0b65                             	| [$0b98: jp   nz,$0B65]
 * try to move left
	move.w	player_logical_address_6009,d6	| [$0b9b: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_left_0D69      	| [$0b9e: call character_can_walk_left_0D69]
	move.b	unknown_600B,d0                 	| [$0ba1: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0ba4: cp   $02]
	jne	l_0b65                             	| [$0ba6: jp   nz,$0B65]
	move.b	#0x80,d1                        	| [$0ba9: ld   b,$80]
	jra	l_0baf                             	| [$0bab: jr   z,$0BAF]
l_0bad:
	clr.b	d1                               	| [$0bad: ld   b,$00]
l_0baf:
	move.b	player_animation_frame_6006,d0  	| [$0baf: ld   a,(player_animation_frame_6006)]
	cmp.b	#0x0B,d0                         	| [$0bb2: cp   $0B]
	jne	l_0bd0                             	| [$0bb4: jr   nz,$0BD0]
	move.b	#0x01,d0                        	| [$0bb6: ld   a,$01]
	move.b	d0,player_animation_frame_6006  	| [$0bb8: ld   (player_animation_frame_6006),a]
	movem.w	d1/d2,-(sp)                    	| [$0bbb: push bc]
	jbsr	l_0ffd                            	| [$0bbc: call $0FFD]

	move.l	a0,-(sp)                        	| [$0bbf: push hl]

	move.l	a2,-(sp)                        	| [$0bc0: push ix]
	movem.w	d3/d4,-(sp)                    	| [$0bc2: push de]
	move.l	a1,-(sp)                        	| [$0bc2: push de]
	move.w	#0x0010,d6                      	| [$0bc3: ld   hl,$0010] 16
	jbsr	add_to_score_5C90                 	| [$0bc6: call add_to_score_5C90]
	move.l	(sp)+,a1                        	| [$0bc9: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0bc9: pop  de]
	move.l	(sp)+,a2                        	| [$0bca: pop  ix]
	move.l	(sp)+,a0                        	| [$0bcc: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$0bcd: pop  bc]
	jra	l_0be4                             	| [$0bce: jr   $0BE4]
l_0bd0:
	addq.b	#1,d0                           	| [$0bd0: inc  a]
	move.w	d0,-(sp)                        	| [$0bd1: push af]
	move.b	has_bag_6158,d0                 	| [$0bd2: ld   a,(has_bag_6158)]
	cmp.b	#0x00,d0                         	| [$0bd5: cp   $00]
	jeq	l_0be0                             	| [$0bd7: jr   z,$0BE0]
	jbsr	l_0cd9                            	| [$0bd9: call $0CD9]
	cmp.b	#0x00,d0                         	| [$0bdc: cp   $00]

	jeq	l_0c19                             	| [$0bde: jr   z,$0C19] skip animation because player has bag
l_0be0:
	move.w	(sp)+,d0                        	| [$0be0: pop  af]
	move.b	d0,player_animation_frame_6006  	| [$0be1: ld   (player_animation_frame_6006),a]
l_0be4:
	move.b	player_animation_frame_6006,d0  	| [$0be4: ld   a,(player_animation_frame_6006)]
	lea	player_struct_6580,a0          	| [$0be7: ld   hl,player_struct_6580]
	cmp.b	#0x02,d0                         	| [$0bea: cp   $02]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bec: call z,$0C36]
0:
	cmp.b	#0x05,d0                         	| [$0bef: cp   $05]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bf1: call z,$0C36]
0:
	cmp.b	#0x09,d0                         	| [$0bf4: cp   $09]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bf6: call z,$0C36]
0:
	cmp.b	#0xFF,d0                         	| [$0bf9: cp   $FF]
	bne.b	0f
	rts                                    	| [$0bfb: ret  z]
0:
	cmp.b	#0x04,d0                         	| [$0bfc: cp   $04]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bfe: call z,$0C36]
0:
	cmp.b	#0x06,d0                         	| [$0c01: cp   $06]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c03: call z,$0C36]
0:
	cmp.b	#0x08,d0                         	| [$0c06: cp   $08]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c08: call z,$0C36]
0:
	cmp.b	#0x0A,d0                         	| [$0c0b: cp   $0A]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c0d: call z,$0C36]
0:
	cmp.b	#0x01,d0                         	| [$0c10: cp   $01]
	jne	l_0c1b                             	| [$0c12: jr   nz,$0C1B]
	move.b	#0x20,d0                        	| [$0c14: ld   a,$20]  player sprite index
	or.b	d1,d0                             	| [$0c16: or   b]
	move.b	d0,(a0)                         	| [$0c17: ld   (hl),a]
	rts                                    	| [$0c18: ret]

l_0c19:
	move.w	(sp)+,d0                        	| [$0c19: pop  af]
	rts                                    	| [$0c1a: ret]

 * player lateral move

l_0c1b:
	cmp.b	#0x03,d0                         	| [$0c1b: cp   $03]
	jne	l_0c24                             	| [$0c1d: jr   nz,$0C24]
	move.b	#0x1F,d0                        	| [$0c1f: ld   a,$1F]
	or.b	d1,d0                             	| [$0c21: or   b]
	move.b	d0,(a0)                         	| [$0c22: ld   (hl),a]
	rts                                    	| [$0c23: ret]
l_0c24:
	cmp.b	#0x07,d0                         	| [$0c24: cp   $07]
	jne	l_0c2d                             	| [$0c26: jr   nz,$0C2D]
	move.b	#0x1E,d0                        	| [$0c28: ld   a,$1E]
	or.b	d1,d0                             	| [$0c2a: or   b]
	move.b	d0,(a0)                         	| [$0c2b: ld   (hl),a]
	rts                                    	| [$0c2c: ret]
l_0c2d:
	cmp.b	#0xFF,d0                         	| [$0c2d: cp   $FF]
	jne	l_0c35                             	| [$0c2f: jr   nz,$0C35]
	move.b	#0x80,d0                        	| [$0c31: ld   a,$80]
	move.b	d0,(a0)                         	| [$0c33: ld   (hl),a]
	rts                                    	| [$0c34: ret]
l_0c35:
	rts                                    	| [$0c35: ret]
l_0c36:
	move.w	d0,-(sp)                        	| [$0c36: push af]
	move.b	d1,d0                           	| [$0c37: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0c38: cp   $80]
	jeq	l_0c96                             	| [$0c3a: jr   z,$0C96]
	move.w	player_logical_address_6009,d6	| [$0c3c: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_right_0CFA     	| [$0c3f: call character_can_walk_right_0CFA]
	move.b	unknown_600B,d0                 	| [$0c42: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0c45: cp   $02]
	jne	l_0b64                             	| [$0c47: jp   nz,$0B64]
	move.b	player_x_6582,d0                	| [$0c4a: ld   a,(player_x_6582)]
	addq.b	#1,d0                           	| [$0c4d: inc  a]
	move.b	d0,player_x_6582                	| [$0c4e: ld   (player_x_6582),a]
	move.b	unknown_61F3,d0                 	| [$0c51: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c54: cp   $00]
	jne	l_0c72                             	| [$0c56: jr   nz,$0C72]
	jbsr	l_0c7c                            	| [$0c58: call $0C7C]
	move.b	unknown_61F3,d0                 	| [$0c5b: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c5e: cp   $00]
	jne	l_0c72                             	| [$0c60: jr   nz,$0C72]
	jbsr	l_0c89                            	| [$0c62: call $0C89]
	move.b	unknown_61F3,d0                 	| [$0c65: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c68: cp   $00]
	jne	l_0c72                             	| [$0c6a: jr   nz,$0C72]
	lea	  game_mem+0x3F33,a0                      	| [$0c6c: ld   hl,$3F33] [RAM]
	jbsr	l_2018                            	| [$0c6f: call $2018]
l_0c72:
	move.b	#0x01,d0                        	| [$0c72: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0c74: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0c77: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0c7a: pop  af]
	rts                                    	| [$0c7b: ret]
l_0c7c:
	move.b	has_pick_61CF,d0                	| [$0c7c: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$0c7f: cp   $00]
	bne.b	0f
	rts                                    	| [$0c81: ret  z]
0:
	lea	  game_mem+0x3F2D,a0                      	| [$0c82: ld   hl,$3F2D]
	jbsr	l_2018                            	| [$0c85: call $2018]
	rts                                    	| [$0c88: ret]
l_0c89:
	move.b	holds_barrow_61C7,d0            	| [$0c89: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x00,d0                         	| [$0c8c: cp   $00]
	rts                                    	| [$0c8e: ret]
	lea	  game_mem+0x3F3F,a0                      	| [$0c8f: ld   hl,$3F3F]
	jbsr	l_2018                            	| [$0c92: call $2018]
	rts                                    	| [$0c95: ret]
l_0c96:
	move.w	player_logical_address_6009,d6	| [$0c96: ld   hl,(player_logical_address_6009)]
	jbsr	character_can_walk_left_0D69      	| [$0c99: call character_can_walk_left_0D69]
	move.b	unknown_600B,d0                 	| [$0c9c: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0c9f: cp   $02]
	jne	l_0b64                             	| [$0ca1: jp   nz,$0B64]
	move.b	player_x_6582,d0                	| [$0ca4: ld   a,(player_x_6582)]
	subq.b	#1,d0                           	| [$0ca7: dec  a]
	move.b	d0,player_x_6582                	| [$0ca8: ld   (player_x_6582),a]
	jbsr	l_2517                            	| [$0cab: call $2517]
	move.b	unknown_61F3,d0                 	| [$0cae: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cb1: cp   $00]
	jne	l_0ccf                             	| [$0cb3: jr   nz,$0CCF]
	jbsr	l_0c7c                            	| [$0cb5: call $0C7C]
	move.b	unknown_61F3,d0                 	| [$0cb8: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cbb: cp   $00]
	jne	l_0ccf                             	| [$0cbd: jr   nz,$0CCF]
	jbsr	l_0c89                            	| [$0cbf: call $0C89]
	move.b	unknown_61F3,d0                 	| [$0cc2: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cc5: cp   $00]
	jne	l_0ccf                             	| [$0cc7: jr   nz,$0CCF]
	lea	  game_mem+0x3F33,a0                      	| [$0cc9: ld   hl,$3F33]
	jbsr	l_2018                            	| [$0ccc: call $2018]
l_0ccf:
	move.b	#0x01,d0                        	| [$0ccf: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0cd1: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0cd4: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0cd7: pop  af]
	rts                                    	| [$0cd8: ret]

l_0cd9:
	movem.w	d1/d2,-(sp)                    	| [$0cd9: push bc]
	move.b	#0x02,d1                        	| [$0cda: ld   b,$02]
	move.b	player_has_blue_bag_flag_627C,d0	| [$0cdc: ld   a,(player_has_blue_bag_flag_627C)]
	cmp.b	#0x00,d0                         	| [$0cdf: cp   $00]
	jeq	l_0ce5                             	| [$0ce1: jr   z,$0CE5]
 * player has blue bag
 * toggle 615F value (related to player speed)
	move.b	#0x01,d1                        	| [$0ce3: ld   b,$01]
l_0ce5:
	move.b	unknown_615F,d0                 	| [$0ce5: ld   a,(unknown_615F)]
	cmp.b	d1,d0                            	| [$0ce8: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$0ce9: pop  bc]
	jcs	l_0cf3                             	| [$0cea: jr   c,$0CF3]
	clr.b	d0                               	| [$0cec: xor  a]
	move.b	d0,unknown_615F                 	| [$0ced: ld   (unknown_615F),a]
	clr.b	d0                               	| [$0cf0: ld   a,$00]
	rts                                    	| [$0cf2: ret]
l_0cf3:
	addq.b	#1,d0                           	| [$0cf3: inc  a]
	move.b	d0,unknown_615F                 	| [$0cf4: ld   (unknown_615F),a]
	move.b	#0x01,d0                        	| [$0cf7: ld   a,$01]
	rts                                    	| [$0cf9: ret]

character_can_walk_right_0CFA:
	move.b	unknown_61ED,d0                 	| [$0cfa: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$0cfd: cp   $01]
	jne	l_0d07                             	| [$0cff: jr   nz,$0D07]
l_0d01:
	move.b	#0x02,d0                        	| [$0d01: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d03: ld   (unknown_600B),a]
	rts                                    	| [$0d06: ret]

l_0d07:
	move.b	unknown_61F2,d0                 	| [$0d07: ld   a,(unknown_61F2)]
	cmp.b	#0x01,d0                         	| [$0d0a: cp   $01]
	jeq	l_0d01                             	| [$0d0c: jr   z,$0D01]
	jbsr	l_2585                            	| [$0d0e: call $2585]
	move.b	unknown_600B,d0                 	| [$0d11: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d14: cp   $02]
	bne.b	0f
	rts                                    	| [$0d16: ret  z]
0:

	                           	| [$0d17: ld   a,l]
	sub.w	#0x21,d6                         	| [$0d18: sub  $21]
	    	| [$0d1a: ld   l,a]
	    	| [$0d1b: ld   a,h]
	    	| [$0d1c: sbc  a,$00]
    
	    	| [$0d1e: ld   h,a]
	jbsr	read_rom                         	| [$0d1f: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d20: call $0DA2]
	move.b	unknown_600B,d0                 	| [$0d23: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d26: cp   $02]
	beq.b	0f
	rts                                    	| [$0d28: ret  nz]
0:
	subq.w	#1,d6                           	| [$0d29: dec  hl]
	jbsr	read_rom                         	| [$0d2a: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d2b: call $0DA2]
	addq.w	#2,a0                           	| [$0d2e: inc  hl] * 2
	jbsr	l_0d34                            	| [$0d30: call $0D34]
	rts                                    	| [$0d33: ret]
l_0d34:
	move.b	(a0),d0                         	| [$0d34: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$0d35: push hl]
	movem.w	d1/d2,-(sp)                    	| [$0d36: push bc]
	move.w	#0x0d,d1                        	| [$0d37: ld   bc,$000D] 13
	lea	game_mem+0x0D45,a0                      	| [$0d3a: ld   hl,$0D45]
	jbsr	cpir                              	| [$0d3d: cpir]

	movem.w	(sp)+,d1/d2                    	| [$0d3f: pop  bc]
	movem.l	(sp)+,a0                        	| [$0d40: pop  hl]
	jeq	l_0d52                             	| [$0d41: jp   z,$0D52]
	rts                                    	| [$0d44: ret]

l_0d52:

	move.l	a2,-(sp)                        	| [$0d52: push ix]
	jbsr	l_2640                            	| [$0d54: call $2640]
	move.l	(sp)+,a2                        	| [$0d57: pop  ix]
	move.b	d1,d0                           	| [$0d59: ld   a,b]
	cmp.b	#0x05,d0                         	| [$0d5a: cp   $05]
	bcc.b	0f
	rts                                    	| [$0d5c: ret  c]
0:
	move.b	#0x01,d0                        	| [$0d5d: ld   a,$01]
	move.b	d0,unknown_600B                 	| [$0d5f: ld   (unknown_600B),a]
	rts                                    	| [$0d62: ret]
l_0d63:
	move.b	#0x01,d0                        	| [$0d63: ld   a,$01]
	move.b	d0,unknown_600B                 	| [$0d65: ld   (unknown_600B),a]
	rts                                    	| [$0d68: ret]

character_can_walk_left_0D69:
	move.b	unknown_61ED,d0                 	| [$0d69: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$0d6c: cp   $01]
	jne	l_0d76                             	| [$0d6e: jr   nz,$0D76]
	move.b	#0x02,d0                        	| [$0d70: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d72: ld   (unknown_600B),a]
	rts                                    	| [$0d75: ret]
l_0d76:
	jbsr	l_2569                            	| [$0d76: call $2569]
	move.b	unknown_600B,d0                 	| [$0d79: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d7c: cp   $02]
	bne.b	0f
	rts                                    	| [$0d7e: ret  z]
0:
                           	| [$0d7f: ld   a,l]
	add.w	#0x1F,d6                         	| [$0d80: add  a,$1F]
	                         	| [$0d82: ld   l,a]
	                         	| [$0d83: ld   a,h]
 
	                           	| [$0d86: ld   h,a]
	bsr	read_rom                         	| [$0d87: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d88: call $0DA2]
	move.b	unknown_600B,d0                 	| [$0d8b: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d8e: cp   $02]
	beq.b	0f
	rts                                    	| [$0d90: ret  nz]
0:
	subq.w	#1,d6										| [$0d91: dec  hl]
	bsr	read_rom                         	| [$0d92: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d93: call $0DA2]
	addq.w	#2,a0                           	| [$0d96: inc  hl] * 2
	jbsr	l_0d34                            	| [$0d98: call $0D34]
	rts                                    	| [$0d9b: ret]
l_0d9c:
	move.b	#0x02,d0                        	| [$0d9c: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d9e: ld   (unknown_600B),a]
	rts                                    	| [$0da1: ret]
l_0da2:
	move.b	d0,d2                           	| [$0da2: ld   c,a]
	lea	game_mem+0x0DB1,a1                      	| [$0da3: ld   de,$0DB1]
	move.b	#0x16,d1                        	| [$0da6: ld   b,$16]
l_0da8:
	move.b	(a1),d0                         	| [$0da8: ld   a,(de)]
	cmp.b	d2,d0                            	| [$0da9: cp   c]
	jeq	l_0d9c                             	| [$0daa: jr   z,$0D9C]
	addq.w	#1,a1                           	| [$0dac: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0da8                             	| [$0dad: djnz $0DA8]
	jra	l_0d63                             	| [$0daf: jr   $0D63]

l_0dc7:
	move.b	unknown_609B,d0                 	| [$0dc7: ld   a,(unknown_609B)]
	cmp.b	#0x01,d0                         	| [$0dca: cp   $01]
	bne.b	0f
	rts                                    	| [$0dcc: ret  z]
0:
	move.b	player_input_6026,d0            	| [$0dcd: ld   a,(player_input_6026)]
	and.b	#0x20,d0                         	| [$0dd0: and  $20]
	cmp.b	#0x20,d0                         	| [$0dd2: cp   $20] up
	jeq	l_0de9                             	| [$0dd4: jr   z,$0DE9]
	move.b	player_input_6026,d0            	| [$0dd6: ld   a,(player_input_6026)]
	and.b	#0x40,d0                         	| [$0dd9: and  $40]
	cmp.b	#0x40,d0                         	| [$0ddb: cp   $40] down
	beq.b	0f
	rts                                    	| [$0ddd: ret  nz]
0:
 * climb down
	move.w	player_logical_address_6009,d6	| [$0dde: ld   hl,(player_logical_address_6009)]
	jbsr	read_rom                          	| [$0de1: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0de2: cp   $FF]
	beq.b	0f
	rts                                    	| [$0de4: ret  nz]
0:
	clr.b	d1                               	| [$0de5: ld   b,$00]
	jra	l_0df3                             	| [$0de7: jr   $0DF3]
 * climb up
l_0de9:
	move.w	player_logical_address_6009,d6	| [$0de9: ld   hl,(player_logical_address_6009)]
	subq.b	#1,d6                           	| [$0dec: dec  hl]
	jbsr	read_rom                    	| [$0ded: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0dee: cp   $FF]
	beq.b	0f
	rts                                    	| [$0df0: ret  nz]
0:
	move.b	#0x80,d1                        	| [$0df1: ld   b,$80]
l_0df3:
	move.b	player_climb_frame_counter_6007,d0	| [$0df3: ld   a,(player_climb_frame_counter_6007)]
	cmp.b	#0x0B,d0                         	| [$0df6: cp   $0B]
	jne	l_0e01                             	| [$0df8: jr   nz,$0E01]
	move.b	#0x01,d0                        	| [$0dfa: ld   a,$01]
	move.b	d0,player_climb_frame_counter_6007	| [$0dfc: ld   (player_climb_frame_counter_6007),a]
	jra	l_0e16                             	| [$0dff: jr   $0E16]
l_0e01:
	addq.b	#1,d0                           	| [$0e01: inc  a]
	move.w	d0,-(sp)                        	| [$0e02: push af]
	move.b	has_bag_6158,d0                 	| [$0e03: ld   a,(has_bag_6158)]
	                         	| [$0e06: cp   $00]
	jeq	l_0e12                             	| [$0e08: jr   z,$0E12]
	jbsr	l_0cd9                            	| [$0e0a: call $0CD9] drop 1 move out of 2 if blue bag, 1 out of 3 if yellow bag
	tst.b	d0                         	| [$0e0d: cp   $00]
	jeq	l_0c19                             	| [$0e0f: jp   z,$0C19]
l_0e12:
	move.w	(sp)+,d0                        	| [$0e12: pop  af]
	move.b	d0,player_climb_frame_counter_6007	| [$0e13: ld   (player_climb_frame_counter_6007),a]
l_0e16:
	move.b	player_climb_frame_counter_6007,d0	| [$0e16: ld   a,(player_climb_frame_counter_6007)]
 * vertical player movement
	cmp.b	#0x01,d0                         	| [$0e19: cp   $01]
	bne.b	0f
	rts                                    	| [$0e1b: ret  z]
0:
	cmp.b	#0x03,d0                         	| [$0e1c: cp   $03]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e1e: call z,$0E7F]
0:
	cmp.b	#0x05,d0                         	| [$0e21: cp   $05]
	bne.b	0f
	rts                                    	| [$0e23: ret  z]
0:
	cmp.b	#0x08,d0                         	| [$0e24: cp   $08]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e26: call z,$0E7F]
0:
	cmp.b	#0x0A,d0                         	| [$0e29: cp   $0A]
	bne.b	0f
	rts                                    	| [$0e2b: ret  z]
0:
	cmp.b	#0x02,d0                         	| [$0e2c: cp   $02]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e2e: call z,$0E7F]
0:
	cmp.b	#0x04,d0                         	| [$0e31: cp   $04]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e33: call z,$0E7F]
0:
	cmp.b	#0x07,d0                         	| [$0e36: cp   $07]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e38: call z,$0E7F]
0:
	cmp.b	#0x09,d0                         	| [$0e3b: cp   $09]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e3d: call z,$0E7F]
0:
	cmp.b	#0x06,d0                         	| [$0e40: cp   $06]
	jne	l_0e50                             	| [$0e42: jr   nz,$0E50]
	move.b	#0x12,d0                        	| [$0e44: ld   a,$12]
	move.b	d0,player_struct_6580           	| [$0e46: ld   (player_struct_6580),a]
	jbsr	l_0e7f                            	| [$0e49: call $0E7F]
	jbsr	l_0e60                            	| [$0e4c: call $0E60]
	rts                                    	| [$0e4f: ret]
l_0e50:
	cmp.b	#0x0B,d0                         	| [$0e50: cp   $0B]
	jne	l_0e5f                             	| [$0e52: jr   nz,$0E5F]
	move.b	#0x92,d0                        	| [$0e54: ld   a,$92]
	move.b	d0,player_struct_6580           	| [$0e56: ld   (player_struct_6580),a]
	jbsr	l_0e7f                            	| [$0e59: call $0E7F]
	jbsr	l_0e60                            	| [$0e5c: call $0E60]
l_0e5f:
	rts                                    	| [$0e5f: ret]
l_0e60:
	move.b	unknown_61F3,d0                 	| [$0e60: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0e63: cp   $00]
	jne	l_0e6d                             	| [$0e65: jr   nz,$0E6D]
	lea	game_mem+0x3F27,a0                      	| [$0e67: ld   hl,$3F27]
	jbsr	l_2018                            	| [$0e6a: call $2018]
l_0e6d:
	move.b	has_bag_6158,d0                 	| [$0e6d: ld   a,(has_bag_6158)]
	                         	| [$0e70: cp   $00]
	bne.b	0f
	rts                                    	| [$0e72: ret  z]
0:
	move.b	#0x3F,d0                        	| [$0e73: ld   a,$3F]
	move.b	d0,unknown_659C                 	| [$0e75: ld   (unknown_659C),a]
	move.b	player_x_6582,d0                	| [$0e78: ld   a,(player_x_6582)]
	move.b	d0,unknown_659E                 	| [$0e7b: ld   (unknown_659E),a]
	rts                                    	| [$0e7e: ret]
l_0e7f:
	move.w	d0,-(sp)                        	| [$0e7f: push af]
	clr.b	d0                               	| [$0e80: xor  a]
	move.b	d0,unknown_601C                 	| [$0e81: ld   (unknown_601C),a]
	move.b	d0,unknown_601D                 	| [$0e84: ld   (unknown_601D),a]
	move.b	d0,unknown_601E                 	| [$0e87: ld   (unknown_601E),a]
	move.b	d1,d0                           	| [$0e8a: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0e8b: cp   $80]
	jne	l_0ea2                             	| [$0e8d: jr   nz,$0EA2]
	move.b	player_y_6583,d0                	| [$0e8f: ld   a,(player_y_6583)]
	subq.b	#1,d0                           	| [$0e92: dec  a]
	move.b	d0,player_y_6583                	| [$0e93: ld   (player_y_6583),a]
	lea	player_struct_6580,a2          	| [$0e96: ld   ix,player_struct_6580]
	jbsr	l_0f72                            	| [$0e9a: call $0F72]
	jbsr	l_0e60                            	| [$0e9d: call $0E60]
	move.w	(sp)+,d0                        	| [$0ea0: pop  af]
	rts                                    	| [$0ea1: ret]
l_0ea2:
	move.b	player_y_6583,d0                	| [$0ea2: ld   a,(player_y_6583)]
	addq.b	#1,d0                           	| [$0ea5: inc  a]
	move.b	d0,player_y_6583                	| [$0ea6: ld   (player_y_6583),a]
	lea	player_struct_6580,a2          	| [$0ea9: ld   ix,player_struct_6580]
	jbsr	l_0f72                            	| [$0ead: call $0F72]
	jbsr	l_0e60                            	| [$0eb0: call $0E60]
	move.w	(sp)+,d0                        	| [$0eb3: pop  af]
	rts            

l_0ebc:
	move.w	#0x910F,d6                       	| [$0ebc: ld   a,($910F)]
	jbsr	osd_r_videoram
	cmp.b	#0x1E,d0                         	| [$0ebf: cp   $1E]
	jeq	l_0ec9                             	| [$0ec1: jr   z,$0EC9]
	move.w	#0x912F,d6                       	| [$0ec3: ld   a,($912F)]
	jbsr	osd_r_videoram
	cmp.b	#0x1E,d0                         	| [$0ec6: cp   $1E]
	beq.b	0f
	rts                                    	| [$0ec8: ret  nz]
0:
l_0ec9:
	move.b	number_of_credits_6000,d0       	| [$0ec9: ld   a,(number_of_credits_6000)]
											| [$0ecc: cp   $00]
	bne.b	0f
	rts                                    	| [$0ece: ret  z]
0:
	move.b	gameplay_allowed_6054,d0        	| [$0ecf: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$0ed2: cp   $01]
	bne.b	0f
	rts                                    	| [$0ed4: ret  z]
0:
	move.b	player_input_6026,d0            	| [$0ed5: ld   a,(player_input_6026)]
	and.b	#0x04,d0                         	| [$0ed8: and  $04]
	cmp.b	#0x04,d0                         	| [$0eda: cp   $04]
	jeq	l_0efb                             	| [$0edc: jr   z,$0EFB]
	move.b	number_of_credits_6000,d0       	| [$0ede: ld   a,(number_of_credits_6000)]
	cmp.b	#0x02,d0                         	| [$0ee1: cp   $02]
	bcc.b	0f
	rts                                    	| [$0ee3: ret  c]
0:
	move.b	unknown_6051,d0                 	| [$0ee4: ld   a,(unknown_6051)]
	and.b	#0x04,d0                         	| [$0ee7: and  $04]
	cmp.b	#0x04,d0                         	| [$0ee9: cp   $04]
	beq.b	0f
	rts                                    	| [$0eeb: ret  nz]
0:
	move.b	number_of_credits_6000,d0       	| [$0eec: ld   a,(number_of_credits_6000)]
	moveq	#1,d7
	sbcd	d7,d0                           	| [$0eef: dec  a + daa]

	move.b	d0,number_of_credits_6000       	| [$0ef1: ld   (number_of_credits_6000),a]
	move.b	#0x02,d0                        	| [$0ef4: ld   a,$02]
	move.b	d0,unknown_617D                 	| [$0ef6: ld   (unknown_617D),a]
	jra	l_0f00                             	| [$0ef9: jr   $0F00]
l_0efb:
	move.b	#0x01,d0                        	| [$0efb: ld   a,$01]
	move.b	d0,unknown_617D                 	| [$0efd: ld   (unknown_617D),a]
l_0f00:
	clr.b	d0                               	| [$0f00: xor  a]
	move.b	d0,current_player_617C          	| [$0f01: ld   (current_player_617C),a]
 * remove 1 credit

	move.b	number_of_credits_6000,d0       	| [$0f04: ld   a,(number_of_credits_6000)]
	moveq	#1,d7
	sbcd	d7,d0                           	| [$0f07: dec  a + daa]

	move.b	d0,number_of_credits_6000       	| [$0f09: ld   (number_of_credits_6000),a]
	move.b	#0x0A,d0                        	| [$0f0c: ld   a,$0A]
	move.b	d0,unknown_627D                 	| [$0f0e: ld   (unknown_627D),a]
	move.b	d0,unknown_6290                 	| [$0f11: ld   (unknown_6290),a]
	jbsr	l_3591                            	| [$0f14: call $3591]
	move.b	#0x01,d0                        	| [$0f17: ld   a,$01]
	move.b	d0,unknown_6210                 	| [$0f19: ld   (unknown_6210),a]
	jbsr	display_maze_1E94                 	| [$0f1c: call display_maze_1E94]
	jbsr	l_2957                            	| [$0f1f: call $2957]

* put one guard on screen 1
	move.b	#0x01,d0                        	| [$0f22: ld   a,$01]
	move.b	d0,guard_2_screen_609A          	| [$0f24: ld   (guard_2_screen_609A),a]
	clr.b	d0                               	| [$0f27: xor  a]
	move.b	d0,unknown_6053                 	| [$0f28: ld   (unknown_6053),a]
	move.b	d0,unknown_6055                 	| [$0f2b: ld   (unknown_6055),a]
	addq.b	#1,d0                           	| [$0f2e: inc  a]
	move.b	d0,gameplay_allowed_6054        	| [$0f2f: ld   (gameplay_allowed_6054),a]
	clr.b	d0                               	| [$0f32: xor  a]
	lea	player_1_score_6176,a0                	| [$0f33: ld   hl,player_1_score_6176]
	move.b	#0x06,d1                        	| [$0f36: ld   b,$06]
l_0f38:
	move.b	d0,(a0)                         	| [$0f38: ld   (hl),a]
	addq.w	#1,a0                           	| [$0f39: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0f38                             	| [$0f3a: djnz $0F38]
	move.b	unknown_6163,d0                 	| [$0f3c: ld   a,(unknown_6163)]
	and.b	#0x03,d0                         	| [$0f3f: and  $03]
	addq.b	#0x01,d0                        	| [$0f41: add  a,$01]
	move.b	d0,lives_6056                   	| [$0f43: ld   (lives_6056),a]
	addq.b	#1,d0                           	| [$0f46: inc  a]
	move.b	d0,unknown_617E                 	| [$0f47: ld   (unknown_617E),a]
	move.w  #0x91C2,d6                      	| [$0f4a: ld   hl,$91C2]
	move.w	d6,barrow_start_screen_address_61C4                 	| [$0f4d: ld   (barrow_start_screen_address_61C4),hl]
	move.w	d6,unknown_screen_address_61FA                 	| [$0f50: ld   (unknown_screen_address_61FA),hl]
	move.b	#0x01,d0                        	| [$0f53: ld   a,$01]
	move.b	d0,unknown_61C6                 	| [$0f55: ld   (unknown_61C6),a]
	move.b	d0,unknown_61FC                 	| [$0f58: ld   (unknown_61FC),a]
	clr.b	d0                               	| [$0f5b: xor  a]
	move.b	d0,holds_barrow_61C7            	| [$0f5c: ld   (holds_barrow_61C7),a]
	move.b	d0,has_pick_61CF                	| [$0f5f: ld   (has_pick_61CF),a]
	move.b	d0,unknown_6014                 	| [$0f62: ld   (unknown_6014),a]
	move.b	d0,unknown_601C                 	| [$0f65: ld   (unknown_601C),a]
	move.b	d0,has_bag_6158                 	| [$0f68: ld   (has_bag_6158),a]
	jbsr	set_bags_coordinates_355b         	| [$0f6b: call set_bags_coordinates_355b]
	jbsr	set_bags_coordinates_3567                            	| [$0f6e: call $3567]
	rts                                    	| [$0f71: ret]

l_0f72:
	move.b	(0x02,a2),d0                    	| [$0f72: ld   a,(ix+$02)]
	subq.b	#0x01,d0                        	| [$0f75: sub  $01]
	and.b	#0xF8,d0                         	| [$0f77: and  $F8]
	addq.b	#0x04,d0                        	| [$0f79: add  a,$04]
	move.b	d0,(0x02,a2)                    	| [$0f7b: ld   (ix+$02),a]
	rts                                    	| [$0f7e: ret]

handle_ay_sound_0f7f:
	rts
	

l_0ffd:
	move.b	unknown_6143,d0                 	| [$0ffd: ld   a,(unknown_6143)]
	rts                                    	| [$1000: ret]

copy_4_bytes_ix_iy_1001:
	move.b	#0x04,d1                        	| [$1001: ld   b,$04]
l_1003:
	move.b	(0x00,a2),d0                    	| [$1003: ld   a,(ix+$00)]
	move.b	d0,(0x00,a3)                    	| [$1006: ld   (iy+$00),a]
	addq.w	#1,a2                           	| [$1009: inc  ix]
	addq.w	#1,a3                           	| [$100b: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_1003                             	| [$100d: djnz $1003]
	rts                                    	| [$100f: ret]


l_1010:
	move.b	has_bag_6158,d0                 	| [$1010: ld   a,(has_bag_6158)]
	cmp.b	#0x00,d0                         	| [$1013: cp   $00]
	bne.b	0f
	rts                                    	| [$1015: ret  z]
0:
	move.b	player_y_6583,d0                	| [$1016: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$1019: sub  $02]
	move.b	d0,unknown_659F                 	| [$101b: ld   (unknown_659F),a]
	move.b	player_struct_6580,d0           	| [$101e: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1021: and  $7F]
	cmp.b	#0x12,d0                         	| [$1023: cp   $12]
	bne.b	0f
	rts                                    	| [$1025: ret  z]
0:
	move.b	player_struct_6580,d0           	| [$1026: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$1029: and  $80]
	cmp.b	#0x80,d0                         	| [$102b: cp   $80]
	jne	l_103d                             	| [$102d: jr   nz,$103D]
	move.b	player_x_6582,d0                	| [$102f: ld   a,(player_x_6582)]
	add.b	#0x08,d0                         	| [$1032: add  a,$08]
	move.b	d0,unknown_659E                 	| [$1034: ld   (unknown_659E),a]
	move.b	#0xBF,d0                        	| [$1037: ld   a,$BF]
	move.b	d0,unknown_659C                 	| [$1039: ld   (unknown_659C),a]
	rts                                    	| [$103c: ret]
l_103d:
	move.b	player_x_6582,d0                	| [$103d: ld   a,(player_x_6582)]
	sub.b	#0x08,d0                         	| [$1040: sub  $08]
	move.b	d0,unknown_659E                 	| [$1042: ld   (unknown_659E),a]
	move.b	#0x3F,d0                        	| [$1045: ld   a,$3F]
	move.b	d0,unknown_659C                 	| [$1047: ld   (unknown_659C),a]
	rts                                    	| [$104a: ret]
l_104b:
	move.b	has_pick_61CF,d0                	| [$104b: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$104e: cp   $00]
	bne.b	0f
	rts                                    	| [$1050: ret  z]
0:
	move.b	player_struct_6580,d0           	| [$1051: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1054: and  $7F]
	move.b	#0x37,d1                        	| [$1058: ld   b,$37]
	cmp.b	#0x1F,d0                         	| [$1056: cp   $1F]
	jeq	l_1069                             	| [$105a: jr   z,$1069]
	move.b	player_struct_6580,d0           	| [$105c: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$105f: and  $7F]
	move.b	#0x37,d1                        	| [$1063: ld   b,$37]
	cmp.b	#0x12,d0                         	| [$1061: cp   $12]
	jeq	l_1069                             	| [$1065: jr   z,$1069]
	move.b	#0x38,d1                        	| [$1067: ld   b,$38]
l_1069:
	move.b	player_y_6583,d0                	| [$1069: ld   a,(player_y_6583)]
	move.b	d0,unknown_659F                 	| [$106c: ld   (unknown_659F),a]
	move.b	player_struct_6580,d0           	| [$106f: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1072: and  $7F]
	cmp.b	#0x12,d0                         	| [$1074: cp   $12]
	jeq	l_108e                             	| [$1076: jr   z,$108E]
	move.b	player_struct_6580,d0           	| [$1078: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$107b: and  $80]
	cmp.b	#0x80,d0                         	| [$107d: cp   $80]
	jeq	l_108e                             	| [$107f: jr   z,$108E]
	move.b	player_x_6582,d0                	| [$1081: ld   a,(player_x_6582)]
	add.b	#0x0C,d0                         	| [$1084: add  a,$0C]
	move.b	d0,unknown_659E                 	| [$1086: ld   (unknown_659E),a]
	move.b	d1,d0                           	| [$1089: ld   a,b]
	move.b	d0,unknown_659C                 	| [$108a: ld   (unknown_659C),a]
	rts                                    	| [$108d: ret]
l_108e:
	move.b	player_x_6582,d0                	| [$108e: ld   a,(player_x_6582)]
	sub.b	#0x0C,d0                         	| [$1091: sub  $0C]
	move.b	d0,unknown_659E                 	| [$1093: ld   (unknown_659E),a]
	move.b	d1,d0                           	| [$1096: ld   a,b]
	or.b	#0x80,d0                          	| [$1097: or   $80]
	move.b	d0,unknown_659C                 	| [$1099: ld   (unknown_659C),a]
	rts                                    	| [$109c: ret]

l_109d:
	move.b	gameplay_allowed_6054,d0        	| [$109d: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$10a0: cp   $01]
	jeq	object_pickup_test_10AE            	| [$10a2: jr   z,object_pickup_test_10AE]
	move.b	player_move_direction_6050,d0   	| [$10a4: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$10a7: and  $80]
	cmp.b	#0x80,d0                         	| [$10a9: cp   $80]
	jeq	l_10bf                             	| [$10ab: jr   z,$10BF]
	rts                                    	| [$10ad: ret]

object_pickup_test_10AE:
	move.b	player_input_6026,d0            	| [$10ae: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$10b1: and  $80]
	cmp.b	#0x80,d0                         	| [$10b3: cp   $80]
	jne	l_10c5                             	| [$10b5: jr   nz,$10C5]
* fire pressed
	move.b	player_move_direction_6050,d0   	| [$10b7: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$10ba: and  $80]
	cmp.b	#0x80,d0                         	| [$10bc: cp   $80] just leaving the wagon handle
	bne.b	0f
	rts                                    	| [$10be: ret  z]  don't pick up anything!
0:
 *  actual pickup of an object
l_10bf:
	move.b	#0x01,d0                        	| [$10bf: ld   a,$01]
	move.b	d0,pickup_flag_6160             	| [$10c1: ld   (pickup_flag_6160),a]
	rts                                    	| [$10c4: ret]
l_10c5:
	clr.b	d0                               	| [$10c5: ld   a,$00]
	move.b	d0,pickup_flag_6160             	| [$10c7: ld   (pickup_flag_6160),a]
	rts                                    	| [$10ca: ret]


set_previous_guard_y_255_10CB:
	                                	| [$10cb: ld   a,$FF]
	st.b	(0x03,a3)                    	| [$10cd: ld   (iy+$03),a]
	rts                                    	| [$10d0: ret]

l_10ff:
	move.b	holds_barrow_61C7,d0                 	| [$10ff: ld   a,(holds_barrow_61C7)]
	                         	| [$1102: cp   $00]
	bne.b	0f
	rts                                    	| [$1104: ret  z]
0:
	move.b	player_x_6582,d0                	| [$1105: ld   a,(player_x_6582)]
	add.b	#0x0E,d0                         	| [$1108: add  a,$0E]
	move.b	d0,unknown_659E                 	| [$110a: ld   (unknown_659E),a]
	move.b	unknown_61ED,d0                 	| [$110d: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$1110: cp   $01]
	jeq	l_1119                             	| [$1112: jr   z,$1119]
	move.b	#0x10,d0                        	| [$1114: ld   a,$10]
	move.b	d0,unknown_659F                 	| [$1116: ld   (unknown_659F),a]
l_1119:
	move.b	player_y_6583,d0                	| [$1119: ld   a,(player_y_6583)]
	move.b	d0,d1                           	| [$111c: ld   b,a]
	move.b	unknown_659F,d0                 	| [$111d: ld   a,(unknown_659F)]
	cmp.b	d1,d0                            	| [$1120: cp   b]
	bne.b	0f
	rts                                    	| [$1121: ret  z]
0:
	addq.b	#0x01,d0                        	| [$1122: add  a,$01]
	cmp.b	d1,d0                            	| [$1124: cp   b]
	bne.b	0f
	rts                                    	| [$1125: ret  z]
0:
	lea		holds_barrow_61C7,a4			| [$1126: ld   bc,holds_barrow_61C7] None
	bsr		exx
	lea	barrow_start_screen_address_61C4,a3                	| [$112a: ld   iy,barrow_start_screen_address_61C4]
	move.b	#0x28,d0                        	| [$112e: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$1130: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$1133: ld   a,$EC]
	move.b	d0,(0x06,a3)                    	| [$1135: ld   (iy+$06),a]
	beq.b	0f
	jbsr	l_21ba                            	| [$1138: call nz,$21BA]
0:
	rts                                    	| [$113b: ret]
	
handle_pick_hold_timer_113c:
	move.b	has_pick_61CF,d0                	| [$113c: ld   a,(has_pick_61CF)]
	                         	| [$113f: cp   $00]
	bne.b	0f
	rts                                    	| [$1141: ret  z]
0:
	move.w	pickaxe_timer_duration_61E0,d5             	| [$1142: ld   hl,(pickaxe_timer_duration_61E0)]  FUCK
												| [$1145: ld   a,l]
												| [$1146: cp   $00]
												| [$1148: jr   nz,$1150]
												| [$114a: ld   a,h]
												| [$114b: cp   $00]
	jne	l_1150                             	| [$114d: jr   nz,$1150]
	rts                                    	| [$114f: ret]
l_1150:
	addq.w	#1,d5                           	| [$1150: inc  hl]
	move.w	d5,pickaxe_timer_duration_61E0                 	| [$1151: ld   (pickaxe_timer_duration_61E0),hl]
	cmp.w	#0x01FF,d5                      	| [$1154: ld   de,$01FF]
												| [sbc  hl,de]
	beq.b	0f
	rts                                    	| [$1159: ret  nz]
0:
	* lose the pickaxe
												| [$115a: ld   hl,$0000] 0
	clr.w	pickaxe_timer_duration_61E0                 	| [$115d: ld   (pickaxe_timer_duration_61E0),hl]
	clr.b	d0                               	| [$1160: ld   a,$00]
	lea	unknown_61CC,a2                	| [$1162: ld   ix,unknown_61CC]
	move.b	d0,(0x03,a2)                    	| [$1166: ld   (ix+$03),a]
	st.b	d0                                	| [$1169: ld   a,$FF]
	move.b	d0,unknown_659F                 	| [$116b: ld   (unknown_659F),a]
	rts                                    	| [$116e: ret]

guard_1_movement_116F:
	move.b	guard_1_screen_6099,d0          	| [$116f: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$1172: ld   (screen_index_param_6098),a]
	move.w	guard_1_logical_address_6038,stored_logical_address_6044	| [$1175: ld   hl,(guard_1_logical_address_6038)]
	              	| [$1178: ld   (stored_logical_address_6044),hl]
	lea	unknown_6057,a3                	| [$117b: ld   iy,unknown_6057]
	move.l	a3,guard_struct_pointer_6093                 	| [$117f: ld   (guard_struct_pointer_6093),iy]
	lea		game_mem+0x04A9,a2                   	| [$1183: ld   ix,($04A9)]
	lea	unknown_6034,a0                	| [$1187: ld   hl,unknown_6034]
	lea	guard_2_direction_6027,a3      	| [$118a: ld   iy,guard_2_direction_6027]
	jbsr	guard_walk_movement_0570          	| [$118e: call guard_walk_movement_0570]
	            	| [$1191: ld   a,(io_read_shit_B800)]
	move.b	screen_index_param_6098,d0      	| [$1194: ld   a,(screen_index_param_6098)]
	move.b	d0,guard_1_screen_6099          	| [$1197: ld   (guard_1_screen_6099),a]
	rts                                    	| [$119a: ret]
guard_2_movement_119B:
	move.b	guard_2_screen_609A,d0          	| [$119b: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$119e: ld   (screen_index_param_6098),a]
	move.w	guard_2_logical_address_6078,stored_logical_address_6044	| [$11a1: ld   hl,(guard_2_logical_address_6078)]
	                	| [$11a4: ld   (stored_logical_address_6044),hl]
	lea	unknown_6097,a3                	| [$11a7: ld   iy,unknown_6097]
	move.l	a3,guard_struct_pointer_6093                 	| [$11ab: ld   (guard_struct_pointer_6093),iy]
	lea		game_mem+0x04AB,a2                   	| [$11af: ld   ix,($04AB)]
	lea	unknown_6074,a0                	| [$11b3: ld   hl,unknown_6074]
	lea	guard_1_direction_6067,a3      	| [$11b6: ld   iy,guard_1_direction_6067]
	jbsr	guard_walk_movement_0570          	| [$11ba: call guard_walk_movement_0570]
	            	| [$11bd: ld   a,(io_read_shit_B800)]
	move.b	screen_index_param_6098,d0      	| [$11c0: ld   a,(screen_index_param_6098)]
	move.b	d0,guard_2_screen_609A          	| [$11c3: ld   (guard_2_screen_609A),a]
	rts                                    	| [$11c6: ret]


* global init
l_1200:
	clr.b	d0                               	| [$1200: xor  a]
	jbsr	osd_disable_vblank_interrupt
	addq.b	#1,d0                           	| [$1205: inc  a]
	jra	l_2480                             	| [$1206: jp   $2480]

l_121c:
	jbsr	play_intro_3700                   	| [$121c: call play_intro_3700]

	jbsr	set_bags_coordinates_355b         	| [$121f: call set_bags_coordinates_355b]
	jbsr	set_bags_coordinates_3567                            	| [$1222: call $3567]
	lea	game_mem+0x513C,a0                      	| [$1225: ld   hl,$513C]
	move.l	a0,unknown_pointer_6140                 	| [$1228: ld   (unknown_pointer_6140),hl]
 * reset guards and player
l_122b:
	jbsr	osd_disable_vblank_interrupt | jbsr	osd_disable_vblank_interrupt
									| [$122c: ld   a,(io_read_shit_B800)]
	jbsr	display_maze_1E94                 	| [$122f: call display_maze_1E94]
	jbsr	l_2957                            	| [$1232: call $2957]
	clr.b	d0                               	| [$1235: xor  a]
	move.b	d0,player_death_flag_6025       	| [$1236: ld   (player_death_flag_6025),a]
	addq.b	#1,d0                           	| [$1239: inc  a]
	move.b	d0,guard_2_screen_609A          	| [$123a: ld   (guard_2_screen_609A),a]
	move.b	#0x03,d0                        	| [$123d: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$123f: ld   (guard_1_screen_6099),a]

* game main loop
	jbsr	osd_disable_vblank_interrupt		| jbsr	osd_disable_vblank_interrupt
	            	| [$122c: ld   a,(io_read_shit_B800)]
	jbsr	display_maze_1E94                 	| [$122f: call display_maze_1E94]
	jbsr	l_2957                            	| [$1232: call $2957]
	clr.b	d0                               	| [$1235: xor  a]
	move.b	d0,player_death_flag_6025       	| [$1236: ld   (player_death_flag_6025),a]
	addq.b	#1,d0                           	| [$1239: inc  a]
	move.b	d0,guard_2_screen_609A          	| [$123a: ld   (guard_2_screen_609A),a]
	move.b	#0x03,d0                        	| [$123d: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$123f: ld   (guard_1_screen_6099),a]

* game main loop

mainloop_1242:
	                        	| [$1242: ld   a,$01]
	*im   1
	*       	| [$1246: ld   (interrupt_control_A000),a]
	jbsr	osd_enable_vblank_interrupt  |     jbsr	osd_enable_vblank_interrupt
	* speech related						| [$124a: ld   a,($A800)]
 	jbsr	l_34cf                            	| [$124d: call $34CF]  ???? something to do with credits handling
	jbsr	l_24a4                            	| [$1250: call $24A4]  ???? or is this this routine?


	lea	player_struct_6580,a2          	| [$1253: ld   ix,player_struct_6580]
	lea	guard_1_struct_6594,a3         	| [$1257: ld   iy,guard_1_struct_6594]
	move.w	#0x0004,d3                      	| [$125b: ld   de,$0004] 4


* player in the same screen as the guard?
	move.b	player_screen_600D,d0           	| [$125e: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$1261: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$1262: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$1265: cp   b]
	jne	l_127b                             	| [$1266: jr   nz,$127B]
* same screen:	attempt collision with first guard
	jbsr	guard_collision_5537              	| [$1268: call guard_collision_5537]
	cmp.b	#0x00,d0                         	| [$126b: cp   $00]
	jeq	l_127b                             	| [$126d: jr   z,$127B]
	move.b	unknown_6156,d0                 	| [$126f: ld   a,(unknown_6156)]
	cmp.b	#0x00,d0                         	| [$1272: cp   $00]
	jne	l_127b                             	| [$1274: jr   nz,$127B]
	move.b	#0x01,d0                        	| [$1276: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$1278: ld   (player_death_flag_6025),a]


l_127b:
	lea	player_struct_6580,a2          	| [$127b: ld   ix,player_struct_6580]
	lea	guard_2_struct_6598,a3         	| [$127f: ld   iy,guard_2_struct_6598]
	move.w	#0x0004,d3                      	| [$1283: ld   de,$0004] 4
	jbsr	l_1653                            	| [$1286: call $1653]  ???

* player in the same screen as the second guard?
	move.b	player_screen_600D,d0           	| [$1289: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$128c: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$128d: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$1290: cp   b]
	jne	l_12a6                             	| [$1291: jr   nz,$12A6]
* collision attempt with second guard
	jbsr	guard_collision_5537              	| [$1293: call guard_collision_5537] guard routine
	cmp.b	#0x00,d0                         	| [$1296: cp   $00]
	jeq	l_12a6                             	| [$1298: jr   z,$12A6] no collision

* hit by guard
	move.b	unknown_6157,d0                 	| [$129a: ld   a,(unknown_6157)]
	cmp.b	#0x00,d0                         	| [$129d: cp   $00]
	jne	l_12a6                             	| [$129f: jr   nz,$12A6]
	move.b	#0x01,d0                        	| [$12a1: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$12a3: ld   (player_death_flag_6025),a]


l_12a6:
	move.b	gameplay_allowed_6054,d0        	| [$12a6: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$12a9: cp   $01]
	jeq	l_1310                             	| [$12ab: jr   z,$1310]
                   	| [$12ad: ld   a,$01]
                   	| [$12af: ld   ($A001),a]
                   	| [$12b2: ld   ($A002),a]
	move.b	unknown_6053,d0                 	| [$12b5: ld   a,(unknown_6053)]
	cmp.b	#0x01,d0                         	| [$12b8: cp   $01]
	jne	l_1310                             	| [$12ba: jr   nz,$1310]
	move.b	unknown_6210,d0                 	| [$12bc: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$12bf: cp   $01]
	jeq	l_1310                             	| [$12c1: jr   z,$1310]
	jbsr	osd_disable_vblank_interrupt
	move.b	unknown_6055,d0                 	| [$12c4: ld   a,(unknown_6055)]
	cmp.b	#0x01,d0                         	| [$12c7: cp   $01]
	jeq	l_12ea                             	| [$12c9: jr   z,$12EA]
	            	| [$12cb: ld   a,(io_read_shit_B800)]
	jbsr	l_2a2c                            	| [$12ce: call $2A2C]  ???
	jbsr	display_player_ids_and_credit_1dec	| [$12d1: call display_player_ids_and_credit_1dec]
	jbsr	write_credits_and_lives_39be                            	| [$12d4: call $39BE]  ???
										| [$12d7: ld   hl,$513C]
									| [$12da: ld   (unknown_pointer_6140),hl]
	move.b	#0x01,d0                        	| [$12dd: ld   a,$01]
	move.b	d0,unknown_6055                 	| [$12df: ld   (unknown_6055),a]
	move.b	gameplay_allowed_6054,d0        	| [$12e2: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$12e5: cp   $01]
	jeq	mainloop_1242                      	| [$12e7: jp   z,mainloop_1242]
l_12ea:
	move.b	unknown_6210,d0                 	| [$12ea: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$12ed: cp   $01]
	jeq	l_1310                             	| [$12ef: jr   z,$1310]
	move.b	number_of_credits_6000,d0       	| [$12f1: ld   a,(number_of_credits_6000)]
	cmp.b	#0x01,d0                         	| [$12f4: cp   $01]
	jne	l_1304                             	| [$12f6: jr   nz,$1304]
	lea	game_mem+0x56DF,a1                      	| [$12f8: ld   de,$56DF]
	move.w   #0x9311,d6                      	| [$12fb: ld   hl,$9311]
	jbsr	display_text_30F9                 	| [$12fe: call display_text_30F9]  ???
	jra	mainloop_1242                      	| [$1301: jp   mainloop_1242]
l_1304:
	* display "one or two players"
	lea	game_mem+0x56F2,a1                      	| [$1304: ld   de,$56F2]
	move.w   #0x9311,d6                      	| [$1307: ld   hl,$9311]
	jbsr	display_text_30F9                 	| [$130a: call display_text_30F9]  ???
	jra	mainloop_1242                      	| [$130d: jp   mainloop_1242]

l_1310:
	jbsr	l_1e3f                            	| [$1310: call $1E3F]
	cmp.b	#0x01,d0                         	| [$1313: cp   $01]
	jeq	l_122b                             	| [$1315: jp   z,$122B]
	move.b	time_61E8,d0                    	| [$1318: ld   a,(time_61E8)]
	cmp.b	#0x00,d0                         	| [$131b: cp   $00]
	jne	l_1327                             	| [$131d: jr   nz,$1327]
	jbsr	l_1e70                            	| [$131f: call $1E70]
	cmp.b	#0x01,d0                         	| [$1322: cp   $01]
	jeq	l_122b                             	| [$1324: jp   z,$122B]
l_1327:
	jbsr	l_1e7a                            	| [$1327: call $1E7A]  ????
	            	| [$132a: ld   (io_read_shit_B800),a]
	jbsr	l_1c30                            	| [$132d: call $1C30]  ????
	* "L" from VALADON copyright (protection check, probably decoy)
	move.b	#0x4C,d0                       	| [$1330: ld   a,($58A3)]
	move.b	d0,unknown_6273                 	| [$1333: ld   (unknown_6273),a]
	            	| [$1336: ld   a,(io_read_shit_B800)]
	move.b	player_screen_600D,d0           	| [$1339: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$133c: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$133d: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$1340: cp   b]
	bne.b	0f
	jbsr	l_1b38                            	| [$1341: call z,$1B38]
0:
    jbsr	osd_enable_vblank_interrupt
	jbsr	l_1cc9                            	| [$1345: call $1CC9]  ???
	* D from VALADON (protection check)
	move.b	#0x44,d0                       	| [$1348: ld   a,($570F)]
 	move.b	d0,unknown_6270                 	| [$134b: ld   (unknown_6270),a]
	            	| [$134e: ld   a,(io_read_shit_B800)]
	            	| [$1351: ld   a,(io_read_shit_B800)]
	move.b	player_screen_600D,d0           	| [$1354: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$1357: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$1358: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$135b: cp   b]
	bne.b	0f
	jbsr	l_1c94                            	| [$135c: call z,$1C94]
0:
    jbsr	osd_enable_vblank_interrupt
	jbsr	l_25b3                            	| [$1360: call $25B3]
	* WTF? not documented              	| [$1363: ld   (dip_switch_B000),a]
	move.b	guard_1_screen_6099,d0          	| [$1366: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$1369: ld   (screen_index_param_6098),a]
	lea	guard_1_struct_6594,a3         	| [$136c: ld   iy,guard_1_struct_6594]
	move.l	a3,guard_struct_pointer_6093         	| [$1370: ld   (guard_struct_pointer_6093),iy]
	lea	guard_2_direction_6027,a2      	| [$1374: ld   ix,guard_2_direction_6027]
	move.l	a2,guard_direction_pointer_6095                 	| [$1378: ld   (guard_direction_pointer_6095),ix]
	lea	guard_1_ladder_frame_6035,a2   	| [$137c: ld   ix,guard_1_ladder_frame_6035]
	lea	guard_1_struct_6594,a3         	| [$1380: ld   iy,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,d3	| [$1384: ld   de,(guard_1_logical_address_6038)]
	move.w	d3,guard_logical_address_6091                	| [$1388: ld   (guard_logical_address_6091),de]
	            	| [$138c: ld   a,(io_read_shit_B800)]
	jbsr	analyse_guard_direction_change_19D1	| [$138f: call analyse_guard_direction_change_19D1]
	lea	guard_1_in_elevator_603B,a2    	| [$1392: ld   ix,guard_1_in_elevator_603B]
	lea	unknown_6057,a0                	| [$1396: ld   hl,unknown_6057]
	lea	unknown_6148,a1                	| [$1399: ld   de,unknown_6148]
	jbsr	l_1908                            	| [$139c: call $1908]
	move.b	unknown_6148,d0                 	| [$139f: ld   a,(unknown_6148)]
	cmp.b	#0x00,d0                         	| [$13a2: cp   $00]
	jne	l_13d3                             	| [$13a4: jr   nz,$13D3]
	move.b	unknown_6057,d0                 	| [$13a6: ld   a,(unknown_6057)]
	cmp.b	#0xF0,d0                         	| [$13a9: cp   $F0]
	bcs.b	0f
	jbsr	l_31a3                            	| [$13ab: call nc,$31A3]
0:
	move.l	#guard_1_struct_6594,guard_struct_pointer_6093         	| [$13b0: ld   iy,guard_1_struct_6594]
						| [$13b4: ld   (guard_struct_pointer_6093),iy]
	move.l	#guard_2_direction_6027,guard_direction_pointer_6095      	| [$13b8: ld   ix,guard_2_direction_6027]
	                	| [$13bc: ld   (guard_direction_pointer_6095),ix]
	lea	guard_1_struct_6594,a3         	| [$13c0: ld   iy,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,guard_logical_address_6091	| [$13c4: ld   de,(guard_1_logical_address_6038)]
	                 	| [$13c8: ld   (guard_logical_address_6091),de]
	lea	guard_1_ladder_frame_6035,a2   	| [$13cc: ld   ix,guard_1_ladder_frame_6035]
	cmp.b	#0x10,d0                         	| [$13ae: cp   $10]
	bcs.b	0f
	jbsr	choose_guard_random_direction_2123                            	| [$13d0: call nc,$2123] change guard 2 direction
0:
l_13d3:
	move.b	guard_2_screen_609A,d0          	| [$13d3: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$13d6: ld   (screen_index_param_6098),a]
	move.l	#guard_2_struct_6598,guard_struct_pointer_6093         	| [$13d9: ld   iy,guard_2_struct_6598]
						| [$13dd: ld   (guard_struct_pointer_6093),iy]
	move.l	#guard_1_direction_6067,guard_direction_pointer_6095      	| [$13e1: ld   ix,guard_1_direction_6067]
	                 	| [$13e5: ld   (guard_direction_pointer_6095),ix]
	lea	guard_2_ladder_frame_6075,a2   	| [$13e9: ld   ix,guard_2_ladder_frame_6075]
	lea	guard_2_struct_6598,a3         	| [$13ed: ld   iy,guard_2_struct_6598]
	move.w	guard_2_logical_address_6078,d3	| [$13f1: ld   de,(guard_2_logical_address_6078)]
	move.w	d3,guard_logical_address_6091				| [$13f5: ld   (guard_logical_address_6091),de]
	            	| [$13f9: ld   a,(io_read_shit_B800)]
	* probably protection again: A from VALADON
	move.b	#0x41,d0                       	| [$13fc: ld   a,($570C)]
	move.b	d0,unknown_6271                 	| [$13ff: ld   (unknown_6271),a]
	jbsr	analyse_guard_direction_change_19D1	| [$1402: call analyse_guard_direction_change_19D1]
	lea	guard_2_in_elevator_607B,a2    	| [$1405: ld   ix,guard_2_in_elevator_607B]
	lea	unknown_6097,a0                	| [$1409: ld   hl,unknown_6097]
	lea	unknown_6149,a1                	| [$140c: ld   de,unknown_6149]
	jbsr	l_1908                            	| [$140f: call $1908]
	jbsr	l_1653                            	| [$1412: call $1653]
	move.b	unknown_6149,d0                 	| [$1415: ld   a,(unknown_6149)]
										| [$1418: cp   $00]
	jne	l_1449                             	| [$141a: jr   nz,$1449]
	move.b	unknown_6097,d0                 	| [$141c: ld   a,(unknown_6097)]
	cmp.b	#0xF0,d0                         	| [$141f: cp   $F0]
	bcs.b	0f
	jbsr	l_31c1                            	| [$1421: call nc,$31C1]
0:
	move.l	#guard_2_struct_6598,guard_struct_pointer_6093         	| [$1426: ld   iy,guard_2_struct_6598]
	         	| [$142a: ld   (guard_struct_pointer_6093),iy]
	move.l	#guard_1_direction_6067,guard_direction_pointer_6095      	| [$142e: ld   ix,guard_1_direction_6067]
	                 	| [$1432: ld   (guard_direction_pointer_6095),ix]
	lea	guard_2_struct_6598,a3         	| [$1436: ld   iy,guard_2_struct_6598]
	move.w	guard_2_logical_address_6078,guard_logical_address_6091	| [$143a: ld   de,(guard_2_logical_address_6078)]
										| [$143e: ld   (guard_logical_address_6091),de]
	lea	guard_2_ladder_frame_6075,a2   	| [$1442: ld   ix,guard_2_ladder_frame_6075]
	cmp.b	#0x10,d0                         	| [$1424: cp   $10]
	bcs.b	0f
	jbsr	choose_guard_random_direction_2123                            	| [$1446: call nc,$2123] change guard 1 direction
0:
l_1449:
    jbsr	osd_enable_vblank_interrupt
	jbsr	update_guard_2_screen_address_from_xy_5575	| [$144a: call update_guard_2_screen_address_from_xy_5575]
	move.b	(a0),d0                         	| [$144d: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$144e: cp   $E0]
	jeq	l_1455                             	| [$1450: jp   z,$1455]
	jra	l_145a                             	| [$1453: jr   $145A]
l_1455:
	move.b	#0x01,d0                        	| [$1455: ld   a,$01]
	move.b	d0,unknown_6077                 	| [$1457: ld   (unknown_6077),a]
l_145a:
	jbsr	update_guard_1_screen_address_from_xy_5568	| [$145a: call update_guard_1_screen_address_from_xy_5568]
	move.b	(a0),d0                         	| [$145d: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$145e: cp   $E0]
	jeq	l_1464                             	| [$1460: jr   z,$1464]
	jra	l_1469                             	| [$1462: jr   $1469]
l_1464:
	move.b	#0x01,d0                        	| [$1464: ld   a,$01]
	move.b	d0,unknown_6037                 	| [$1466: ld   (unknown_6037),a]
l_1469:
	move.w	guard_1_logical_address_6038,d6	| [$1469: ld   hl,(guard_1_logical_address_6038)]
	lea	unknown_6037,a3                	| [$146c: ld   iy,unknown_6037]
	lea	guard_1_struct_6594,a2         	| [$1470: ld   ix,guard_1_struct_6594]
	jbsr	l_2605                            	| [$1474: call $2605]
	move.w	guard_1_logical_address_6038,d6	| [$1477: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_struct_6594,a2         	| [$147a: ld   ix,guard_1_struct_6594]
	jbsr	l_250e                            	| [$147e: call $250E]
	move.w	guard_2_logical_address_6078,d6	| [$1481: ld   hl,(guard_2_logical_address_6078)]
	lea	unknown_6077,a3                	| [$1484: ld   iy,unknown_6077]
	lea	guard_2_struct_6598,a2         	| [$1488: ld   ix,guard_2_struct_6598]
	jbsr	l_2605                            	| [$148c: call $2605]
	move.w	guard_2_logical_address_6078,d6	| [$148f: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_struct_6598,a2         	| [$1492: ld   ix,guard_2_struct_6598]
	jbsr	l_250e                            	| [$1496: call $250E]
	            	| [$1499: ld   a,(io_read_shit_B800)]
	jbsr	update_player_screen_address_from_xy_555E	| [$149c: call update_player_screen_address_from_xy_555E]

	jbsr	osd_enable_vblank_interrupt
	jbsr	read_rom                         	| [$14a0: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$14a1: cp   $E0]
	jeq	l_14b3                             	| [$14a3: jr   z,$14B3]
	move.b	fatal_fall_height_reached_604E,d0	| [$14a5: ld   a,(fatal_fall_height_reached_604E)]
	cmp.b	#0x01,d0                         	| [$14a8: cp   $01]
	jeq	l_14b8                             	| [$14aa: jr   z,$14B8]
	clr.b	d0                               	| [$14ac: ld   a,$00]
	move.b	d0,unknown_6008                 	| [$14ae: ld   (unknown_6008),a]
	jra	l_14b8                             	| [$14b1: jr   $14B8]
l_14b3:
	move.b	#0x01,d0                        	| [$14b3: ld   a,$01]
	move.b	d0,unknown_6008                 	| [$14b5: ld   (unknown_6008),a]
l_14b8:
	move.w	player_logical_address_6009,d6	| [$14b8: ld   hl,(player_logical_address_6009)]
	lea	unknown_6008,a3                	| [$14bb: ld   iy,unknown_6008]
	lea	player_struct_6580,a2          	| [$14bf: ld   ix,player_struct_6580]
	jbsr	l_2605                            	| [$14c3: call $2605]
	move.w	player_logical_address_6009,d6	| [$14c6: ld   hl,(player_logical_address_6009)]
	lea	player_struct_6580,a2          	| [$14c9: ld   ix,player_struct_6580]
	jbsr	l_250e                            	| [$14cd: call $250E]
	move.b	#0x01,d0                        	| [$14d0: ld   a,$01]
	move.b	d0,unknown_626F                 	| [$14d2: ld   (unknown_626F),a]
	            	| [$14d5: ld   a,(io_read_shit_B800)]
	 * nasty protection, skipped                          	| [$14d8: call $2C28]
	jbsr	l_3219                            	| [$14db: call $3219]
	clr.b	d0                               	| [$14de: ld   a,$00]
	move.b	d0,unknown_626F                 	| [$14e0: ld   (unknown_626F),a]
	jbsr	wagon_player_collision_1D84       	| [$14e3: call wagon_player_collision_1D84]
	jbsr	l_1d73                            	| [$14e6: call $1D73]
	cmp.b	#0x01,d0                         	| [$14e9: cp   $01]
	jeq	l_122b                             	| [$14eb: jp   z,$122B]

	lea	guard_2_sees_player_right_603C,a2	| [$14ee: ld   ix,guard_2_sees_player_right_603C]
	move.b	#0x04,d1                        	| [$14f2: ld   b,$04]
l_14f4:
	move.b	(0x00,a2),d0                    	| [$14f4: ld   a,(ix+$00)]
	cmp.b	#0x00,d0                         	| [$14f7: cp   $00]
	jne	guard_2_sees_player_1525           	| [$14f9: jr   nz,guard_2_sees_player_1525]
	addq.w	#1,a2                           	| [$14fb: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_14f4                             	| [$14fd: djnz $14F4]
 * guard 2 does not see player anywhere: do something special

	move.l	#guard_2_direction_6027,guard_direction_pointer_6095      	| [$14ff: ld   hl,guard_2_direction_6027]
	                 	| [$1502: ld   (guard_direction_pointer_6095),hl]
	lea	unknown_6144,a0                	| [$1505: ld   hl,unknown_6144]
	move.l	a0,unknown_pointer_6146                 	| [$1508: ld   (unknown_pointer_6146),hl]
	move.b	guard_1_screen_6099,d0          	| [$150b: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$150e: ld   (screen_index_param_6098),a]
	lea	player_struct_6580,a2          	| [$1511: ld   ix,player_struct_6580]
	lea	guard_1_struct_6594,a3         	| [$1515: ld   iy,guard_1_struct_6594]
	move.w	guard_1_logical_address_6038,d3	| [$1519: ld   de,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_603B,a0    	| [$151d: ld   hl,guard_1_in_elevator_603B]
	jbsr	guard_wait_for_elevator_test_2AFA 	| [$1520: call guard_wait_for_elevator_test_2AFA]
	jra	l_1529                             	| [$1523: jr   $1529]

guard_2_sees_player_1525:
	clr.b	d0                               	| [$1525: xor  a]
	move.b	d0,unknown_6148                 	| [$1526: ld   (unknown_6148),a]
l_1529:
	lea	guard_1_sees_player_right_607C,a2	| [$1529: ld   ix,guard_1_sees_player_right_607C]
	move.b	#0x04,d1                        	| [$152d: ld   b,$04]
l_152f:
	move.b	(0x00,a2),d0                    	| [$152f: ld   a,(ix+$00)]
	                         	| [$1532: cp   $00]
	jne	guard_1_sees_player_1560           	| [$1534: jr   nz,guard_1_sees_player_1560]
	addq.w	#1,a2                           	| [$1536: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_152f                             	| [$1538: djnz $152F]
 * guard 1 does not see player anywhere
	move.l	#guard_1_direction_6067,guard_direction_pointer_6095      	| [$153a: ld   hl,guard_1_direction_6067]
	                 	| [$153d: ld   (guard_direction_pointer_6095),hl]
	lea	unknown_6145,a0                	| [$1540: ld   hl,unknown_6145]
	move.l	a0,unknown_pointer_6146                 	| [$1543: ld   (unknown_pointer_6146),hl]
	move.b	guard_2_screen_609A,d0          	| [$1546: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$1549: ld   (screen_index_param_6098),a]
	lea	player_struct_6580,a2          	| [$154c: ld   ix,player_struct_6580]
	lea	guard_2_struct_6598,a3         	| [$1550: ld   iy,guard_2_struct_6598]
	move.w	guard_2_logical_address_6078,a1	| [$1554: ld   de,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_607B,a0    	| [$1558: ld   hl,guard_2_in_elevator_607B]
	jbsr	guard_wait_for_elevator_test_2AFA 	| [$155b: call guard_wait_for_elevator_test_2AFA]
	jra	l_1564                             	| [$155e: jr   $1564]

guard_1_sees_player_1560:
	clr.b	d0                               	| [$1560: xor  a]
	move.b	d0,unknown_6149                 	| [$1561: ld   (unknown_6149),a]
l_1564:
    jbsr	osd_enable_vblank_interrupt
	jbsr	check_if_can_pick_bag_17de              	| [$1565: call $17DE]
	jbsr	l_1653                            	| [$1568: call $1653]
	move.b	has_pick_61CF,d0                	| [$156b: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$156e: cp   $01]
	jeq	l_1593                             	| [$1570: jr   z,$1593]
	move.b	has_bag_6158,d0                 	| [$1572: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$1575: cp   $01]
	jeq	l_1593                             	| [$1577: jr   z,$1593]
	lea		holds_barrow_61C7,a4       	| [$1579: ld   bc,holds_barrow_61C7] None
	lea	barrow_start_screen_address_61C4,a3                	| [$157c: ld   iy,barrow_start_screen_address_61C4]
	move.b	#0x3A,d0                        	| [$1580: ld   a,$3A]
	move.b	d0,(0x04,a3)                    	| [$1582: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$1585: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$1587: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$158a: ld   a,$EC]
	move.b	d0,unknown_61CA                 	| [$158c: ld   (unknown_61CA),a]
	jbsr	osd_disable_vblank_interrupt
	jbsr	l_2137                            	| [$1590: call $2137]
l_1593:
	jbsr	osd_disable_vblank_interrupt
	move.b	#0x04,d1                        	| [$1594: ld   b,$04]
	lea	unknown_61D0,a3                	| [$1596: ld   iy,unknown_61D0]
	move.b	holds_barrow_61C7,d0            	| [$159a: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$159d: cp   $01]
	jeq	l_15cf                             	| [$159f: jp   z,$15CF]
l_15a2:
	movem.w	d1/d2,-(sp)                    	| [$15a2: push bc]

	move.l	a3,-(sp)                        	| [$15a3: push iy]
	lea		has_pick_61CF,a4           	| [$15a5: ld   bc,has_pick_61CF] None
	lea	unknown_61CC,a3                	| [$15a8: ld   iy,unknown_61CC]
	move.b	#0x37,d0                        	| [$15ac: ld   a,$37]
	move.b	d0,(0x04,a3)                    	| [$15ae: ld   (iy+$04),a]
	move.b	#0x20,d0                        	| [$15b1: ld   a,$20]
	move.b	d0,(0x05,a3)                    	| [$15b3: ld   (iy+$05),a]
	            	| [$15b6: ld   a,(io_read_shit_B800)]
	move.b	#0xE4,d0                        	| [$15b9: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$15bb: ld   (unknown_61D2),a]
	jbsr	l_2137                            	| [$15be: call $2137]
	move.l	(sp)+,a3                        	| [$15c1: pop  iy]
	addq.w	#3,a3                           	| [$15c3: inc  iy] * 3
	jbsr	l_22b7                            	| [$15c9: call $22B7]

	movem.w	(sp)+,d1/d2                    	| [$15cc: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_15a2                             	| [$15cd: djnz $15A2]
l_15cf:
    jbsr	osd_enable_vblank_interrupt
	move.b	has_pick_61CF,d0                	| [$15d0: ld   a,(has_pick_61CF)]
	                         	| [$15d3: cp   $00]
	jeq	l_1621                             	| [$15d5: jr   z,$1621]
 * player has pick
	move.b	guard_1_screen_6099,d0          	| [$15d7: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$15da: ld   b,a]
	* completely useless protection "check"
								| [$15db: ld   a,(unknown_6270)]
									| [$15de: cp   b]
	move.b	player_screen_600D,d0           	| [$15df: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$15e2: cp   b]
	jne	l_15fe                             	| [$15e3: jr   nz,$15FE]
	lea	guard_1_struct_6594,a2         	| [$15e5: ld   ix,guard_1_struct_6594]
	lea	unknown_659C,a3                	| [$15e9: ld   iy,unknown_659C]
	clr.b	d2                               	| [$15ed: ld   c,$00]
	move.b	#0x06,d1                        	| [$15ef: ld   b,$06]
	jbsr	l_2ad5                            	| [$15f1: call $2AD5]
	cmp.b	#0x01,d0                         	| [$15f4: cp   $01]
	jne	l_15fe                             	| [$15f6: jr   nz,$15FE]
	jbsr	l_2241                            	| [$15f8: call $2241]
	jbsr	l_313d                            	| [$15fb: call $313D]
l_15fe:
	lea	guard_2_struct_6598,a2         	| [$15fe: ld   ix,guard_2_struct_6598]
	lea	unknown_659C,a3                	| [$1602: ld   iy,unknown_659C]
	move.b	guard_2_screen_609A,d0          	| [$1606: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$1609: ld   b,a]
	move.b	player_screen_600D,d0           	| [$160a: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$160d: cp   b]
	jne	l_1621                             	| [$160e: jr   nz,$1621]
	clr.b	d2                               	| [$1610: ld   c,$00]
	move.b	#0x06,d1                        	| [$1612: ld   b,$06]
	jbsr	l_2ad5                            	| [$1614: call $2AD5]
	cmp.b	#0x01,d0                         	| [$1617: cp   $01]
	jne	l_1621                             	| [$1619: jr   nz,$1621]
	jbsr	l_227c                            	| [$161b: call $227C]
	jbsr	l_313d                            	| [$161e: call $313D]
l_1621:
	lea	player_struct_6580,a2          	| [$1621: ld   ix,player_struct_6580]
	lea	unknown_6584,a3                	| [$1625: ld   iy,unknown_6584]
	jbsr	guard_collision_with_pick_2AD1    	| [$1629: call guard_collision_with_pick_2AD1]
	cmp.b	#0x01,d0                         	| [$162c: cp   $01]
	jne	l_1641                             	| [$162e: jr   nz,$1641]
	move.b	#0x01,d0                        	| [$1630: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$1632: ld   (player_death_flag_6025),a]
	clr.b	d0                               	| [$1635: xor  a]
	move.b	d0,player_in_wagon_flag_6029    	| [$1636: ld   (player_in_wagon_flag_6029),a]
	jbsr	l_1d73                            	| [$1639: call $1D73]
	cmp.b	#0x01,d0                         	| [$163c: cp   $01]
	jeq	l_122b                             	| [$163e: jp   z,$122B]
l_1641:
    jbsr	osd_enable_vblank_interrupt
	jbsr	compute_guard_speed_from_dipsw_2C4D	| [$1642: call compute_guard_speed_from_dipsw_2C4D]
	jbsr	l_3ba1                            	| [$1645: call $3BA1]
	move.b	unknown_61ED,d0                 	| [$1648: ld   a,(unknown_61ED)]
	cmp.b	#0x00,d0                         	| [$164b: cp   $00]
	bne.b	0f
	jbsr	l_22dc                            	| [$164d: call z,$22DC]
0:
	jra	mainloop_1242                      	| [$1650: jp   mainloop_1242]

l_1653:
	move.b	unknown_61ED,d0                 	| [$1653: ld   a,(unknown_61ED)]
	                         	| [$1656: cp   $00]
	beq.b	0f
	rts                                    	| [$1658: ret  nz]
0:
	move.b	unknown_627F,d0                 	| [$1659: ld   a,(unknown_627F)]
	cmp.b	#0x01,d0                         	| [$165c: cp   $01]
	beq.b	0f
	rts                                    	| [$165e: ret  nz]
0:

	move.l	a0,-(sp)                        	| [$165f: push hl]
	movem.w	d3/d4,-(sp)                    	| [$1660: push de]
	move.l	a1,-(sp)                        	| [$1660: push de]
	move.w	d0,-(sp)                        	| [$1661: push af]
	movem.w	d1/d2,-(sp)                    	| [$1662: push bc]

	move.l	a3,-(sp)                        	| [$1663: push iy]

	move.l	a2,-(sp)                        	| [$1665: push ix]
	move.b	screen_index_param_6098,d0      	| [$1667: ld   a,(screen_index_param_6098)]
	move.b	d0,unknown_6280                 	| [$166a: ld   (unknown_6280),a]
	jbsr	l_3bbc                            	| [$166d: call $3BBC]
	clr.b	d0                               	| [$1670: xor  a]
	move.b	d0,unknown_627F                 	| [$1671: ld   (unknown_627F),a]
	move.b	unknown_6280,d0                 	| [$1674: ld   a,(unknown_6280)]
	move.b	d0,screen_index_param_6098      	| [$1677: ld   (screen_index_param_6098),a]
	move.l	(sp)+,a2                        	| [$167a: pop  ix]
	move.l	(sp)+,a3                        	| [$167c: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$167e: pop  bc]
	move.w	(sp)+,d0                        	| [$167f: pop  af]
	move.l	(sp)+,a1                        	| [$1680: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1680: pop  de]
	move.l	(sp)+,a0                        	| [$1681: pop  hl]
	rts                                    	| [$1682: ret]
	
* < D6 screen address
l_1683:
	move.b	unknown_615E,d0                 	| [$1683: ld   a,(unknown_615E)]
										| [$1686: cp   $00]
	jne	l_1690                             	| [$1688: jr   nz,$1690]
	move.b	unknown_6159,d0                 	| [$168a: ld   a,(unknown_6159)]
	                         	| [$168d: cp   $00]
	bne.b	0f
	rts                                    	| [$168f: ret  z]
0:
l_1690:
	lea	unknown_659C,a2                	| [$1690: ld   ix,unknown_659C]
	lea	unknown_615A,a3                	| [$1694: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$1698: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$169b: ld   (screen_index_param_6098),a]
	subq.b	#1,(0x03,a2)                    	| [$169e: dec  (ix+$03)]
	jbsr	compute_logical_address_from_xy_558c                            	| [$16a1: call $558C]
*    jbsr	osd_enable_vblank_interrupt
	lea	unknown_659C,a2                	| [$16a5: ld   ix,unknown_659C]
	addq.b	#1,(0x03,a2)                    	| [$16a9: inc  (ix+$03)]
*    jbsr	osd_enable_vblank_interrupt
	bsr	read_rom                         	| [$16ad: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$16ae: push hl]
	lea	game_mem+0x5B24,a0                      	| [$16af: ld   hl,$5B24]
	move.w	#0x07,d1                        	| [$16b2: ld   bc,$0007] 7
	jbsr	cpdr                              	| [$16b5: cpdr]
	movem.l	(sp)+,a0                        	| [$16b7: pop  hl]
	jne	l_16c5                             	| [$16b8: jp   nz,$16C5]
	move.b	#0x01,d0                        	| [$16bb: ld   a,$01]
	move.b	d0,unknown_615E                 	| [$16bd: ld   (unknown_615E),a]
	clr.b	d0                               	| [$16c0: xor  a]
	move.b	d0,unknown_6159                 	| [$16c1: ld   (unknown_6159),a]
	rts                                    	| [$16c4: ret]
l_16c5:
	clr.b	d0                               	| [$16c5: xor  a]
	move.b	d0,unknown_615E                 	| [$16c6: ld   (unknown_615E),a]
	addq.b	#1,d0                           	| [$16c9: inc  a]
	move.b	d0,unknown_6159                 	| [$16ca: ld   (unknown_6159),a]
	lea	unknown_659C,a2                	| [$16cd: ld   ix,unknown_659C]
	lea	unknown_615A,a3                	| [$16d1: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$16d5: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$16d8: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c                            	| [$16db: call $558C]
*    jbsr	osd_enable_vblank_interrupt
	bsr	read_rom                         	| [$16df: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$16e0: push hl]
	lea	game_mem+0x17D0,a0                      	| [$16e1: ld   hl,$17D0]
	move.w	#0x22,d1                        	| [$16e4: ld   bc,$0022] 34
	jbsr	cpdr                              	| [$16e7: cpdr]
	movem.l	(sp)+,a0                        	| [$16e9: pop  hl]
	bne.b	0f
	rts                                    	| [$16ea: ret  z]
0:
	clr.b	d0                               	| [$16eb: xor  a]
	move.b	d0,unknown_615E                 	| [$16ec: ld   (unknown_615E),a]
	move.b	d0,unknown_6159                 	| [$16ef: ld   (unknown_6159),a]
	move.l	unknown_pointer_615C,a3             	| [$16f2: ld   iy,(unknown_pointer_615C)]
	move.b	player_screen_600D,d0           	| [$16f6: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$16f9: ld   (iy+$02),a]
	cmp.b	#0x01,d0                         	| [$16fc: cp   $01]
	jne	l_1705                             	| [$16fe: jr   nz,$1705]
	* ajust address according to player/displayed screen
											| [$1700: ld   a,h]
	add.w	#0x5000,d6                         	| [$1701: add  a,$50]
	jra	l_1711                             	| [$1703: jr   $1711]
l_1705:
	cmp.b	#0x02,d0                         	| [$1705: cp   $02]
	jne	l_170e                             	| [$1707: jr   nz,$170E]
	                           	| [$1709: ld   a,h]
	add.w	#0x4C00,d6                         	| [$170a: add  a,$4C]
	jra	l_1711                             	| [$170c: jr   $1711]
l_170e:
	                           	| [$170e: ld   a,h]
	add.w	#0x4800,d0                         	| [$170f: add  a,$48]
l_1711:
												| [$1711: ld   h,a]
												| [$1712: xor  a]
												| [$1713: ld   a,l]
	sub.w	#0x22,d6                         	| [$1714: sub  $22]
												| [$1716: ld   l,a]
												| [$1717: ld   a,h]
												| [$1718: sbc  a,$00]
										
												| [$171a: ld   h,a]
	jbsr	osd_r_videoram                       	| [$171b: ld   a,(hl)]
	cmp.b	#0xD0,d0                         	| [$171c: cp   $D0]
	jeq	l_1730                             	| [$171e: jr   z,$1730]
	exg	a1,a0                              	| [$1720: ex   de,hl]
	lea	game_mem+0x17D0,a0                      	| [$1721: ld   hl,$17D0]
	move.w	#0x07,d1                        	| [$1724: ld   bc,$0007] 7
	jbsr	cpdr                              	| [$1727: cpdr]
	exg	a1,a0                              	| [$1729: ex   de,hl]
	jeq	l_1730                             	| [$172a: jr   z,$1730]
	move.w	#0x0020,d3                      	| [$172c: ld   de,$0020] 32
	add.w	d3,d6                            	| [$172f: add  hl,de]
l_1730:
	jbsr	osd_disable_vblank_interrupt		| jbsr	osd_disable_vblank_interrupt
	* as big endian
	STORE_DX_BE_WORD_AY	d6,a3                    	| [$1731: ld   (iy+$00),l]
	* useless comparison & assign to D0                           	| [$1734: ld   a,l]
	                         	| [$1735: cp   $C0]
	                       	| [$1737: jr   nz,$173B]
	                        	| [$1739: ld   a,$68]


	                    	| [$173b: ld   (iy+$01),h]
	move.b	player_screen_600D,d0           	| [$173e: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$1741: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt			|     jbsr	osd_enable_vblank_interrupt
	addq.w	#1,d6                           	| [$1745: inc  hl]
	jbsr	osd_r_videoram                         	| [$1746: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$1747: cp   $ED]
	jeq	l_175e                             	| [$1749: jr   z,$175E]
	cmp.b	#0xEF,d0                         	| [$174b: cp   $EF]
	jeq	l_175e                             	| [$174d: jr   z,$175E]
											| [$174f: ld   a,l]
	add.w	#0x20,d6                         	| [$1750: add  a,$20]
												| [$1752: ld   l,a]
												| [$1753: ld   a,h]
					
											| [$1756: ld   h,a]
	jbsr	osd_r_videoram                         	| [$1757: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$1758: cp   $ED]
	jeq	l_175e                             	| [$175a: jr   z,$175E]
	jra	l_17a0                             	| [$175c: jr   $17A0]
l_175e:

	move.l	a2,-(sp)                        	| [$175e: push ix]
	jbsr	l_17d5                            	| [$1760: call $17D5]
	move.b	unknown_659D,d0                 	| [$1763: ld   a,(unknown_659D)]
	cmp.b	#0x24,d0                         	| [$1766: cp   $24]
	jne	l_1775                             	| [$1768: jr   nz,$1775]
	move.b	#0x20,d0                        	| [$176a: ld   a,$20]
	move.b	d0,unknown_659D                 	| [$176c: ld   (unknown_659D),a]
	jbsr	l_17d5                            	| [$176f: call $17D5]
	jbsr	l_17d5                            	| [$1772: call $17D5]
l_1775:
	lea	game_mem+0x3F1B,a0                      	| [$1775: ld   hl,$3F1B]
	jbsr	l_2018                            	| [$1778: call $2018]
	jbsr	can_pick_bag_3DEB                 	| [$177b: call can_pick_bag_3DEB]
	jne	l_178a                             	| [$177e: jr   nz,$178A]
	lea	game_mem+0x5B78,a0                      	| [$1780: ld   hl,$5B78]
	move.l	a0,unknown_pointer_6140                 	| [$1783: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$1786: xor  a]
	move.b	d0,unknown_6142                 	| [$1787: ld   (unknown_6142),a]
l_178a:
	move.l	(sp)+,a2                        	| [$178a: pop  ix]
	jbsr	osd_disable_vblank_interrupt |	jbsr	osd_disable_vblank_interrupt
	clr.b	d0                               	| [$178d: xor  a]
	move.b	d0,(0x00,a3)                    	| [$178e: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$1791: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$1794: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt    |     jbsr	osd_enable_vblank_interrupt
	* reset time to 4000
	move.b	#0x40,d0                        	| [$1798: ld   a,$40]
	move.b	d0,time_61E8                    	| [$179a: ld   (time_61E8),a]
	jbsr	l_3b00                            	| [$179d: call $3B00]
l_17a0:
	clr.b	d0                               	| [$17a0: xor  a]
	lea	unknown_659C,a2                	| [$17a1: ld   ix,unknown_659C]
	move.b	d0,(0x02,a2)                    	| [$17a5: ld   (ix+$02),a]
	st.b	d0                                	| [$17a8: ld   a,$FF]
	move.b	d0,(0x03,a2)                    	| [$17aa: ld   (ix+$03),a]
	rts                                    	| [$17ad: ret]

l_17d5:
	move.b	timer_high_prec_61E7+1,d6             	| [$17d5: ld   hl,(timer_high_prec_61E7)]
	lsl.w	#8,d6                              	| [$17d8: ld   l,$00]
	jbsr	add_to_score_5C90                 	| [$17da: call add_to_score_5C90]
	rts                                    	| [$17dd: ret]
check_if_can_pick_bag_17de:
	tst.b	has_bag_6158                 	| [$17de: ld   a,(has_bag_6158)]
											| [$17e1: cp   $00]
	jne	l_195f                             	| [$17e3: jp   nz,$195F]
	move.b	has_pick_61CF,d0                	| [$17e6: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$17e9: cp   $01]
	bne.b	0f
	rts                                    	| [$17eb: ret  z]
0:
	move.b	holds_barrow_61C7,d0            	| [$17ec: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$17ef: cp   $01]
	bne.b	0f
	rts                                    	| [$17f1: ret  z]
0:
	move.b	unknown_6159,d0                 	| [$17f2: ld   a,(unknown_6159)]
	cmp.b	#0x01,d0                         	| [$17f5: cp   $01]
	bne.b	0f
	rts                                    	| [$17f7: ret  z]
0:
	move.b	unknown_615E,d0                 	| [$17f8: ld   a,(unknown_615E)]
	cmp.b	#0x01,d0                         	| [$17fb: cp   $01]
	bne.b	0f
	rts                                    	| [$17fd: ret  z]
0:
	lea	bags_coordinates_609C,a3       	| [$17fe: ld   iy,bags_coordinates_609C]
	move.b	#0x12,d1                        	| [$1802: ld   b,$12]
	move.w	player_logical_address_6009,d6	| [$1804: ld   hl,(player_logical_address_6009)]
	move.b	#0x24,d0                        	| [$1807: ld   a,$24]
	move.b	d0,unknown_627B                 	| [$1809: ld   (unknown_627B),a]
l_180c:
	move.b	(0x02,a3),d0                    	| [$180c: ld   a,(iy+$02)]
	movem.w	d1/d2,-(sp)                    	| [$180f: push bc]
	move.b	d0,d1                           	| [$1810: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1811: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1814: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$1815: pop  bc]
	jne	l_1830                             	| [$1816: jp   nz,$1830]
	LOAD_AX_BE_WORD_DY	a3,d3
										| [$1819: ld   d,(iy+$01)]
								
										| [$181c: ld   e,(iy+$00)]
	addq.w	#2,d3                           	| [$181f: inc  de] * 2
	jbsr	compute_backbuffer_tile_address_1945                            	| [$1821: call $1945]
	clr.b	d0                               	| [$1824: xor  a]

								| [$1825: push hl]
	cmp.w	d3,d6
								| [$1828: pop  hl]
	jeq	l_183e                             	| [$1829: jr   z,$183E]
	jbsr	l_3585                            	| [$182b: call $3585]
	jeq	l_183e                             	| [$182e: jr   z,$183E]
l_1830:
	addq.w	#1,a3                           	| [$1830: inc  iy]
	addq.w	#2,a3                           	| [$1832: inc  iy] * 2
	move.b	#0x20,d0                        	| [$1836: ld   a,$20]
	move.b	d0,unknown_627B                 	| [$1838: ld   (unknown_627B),a]
	subq.b	#1,d1                           	| [...]
	jne	l_180c                             	| [$183b: djnz $180C]
	rts                                    	| [$183d: ret]
l_183e:
	jbsr	test_pickup_flag_19A4             	| [$183e: call test_pickup_flag_19A4]
	move.b	d1,d0                           	| [$1841: ld   a,b]
	cmp.b	#0x00,d0                         	| [$1842: cp   $00]
	bne.b	0f
	rts                                    	| [$1844: ret  z]
0:
	move.b	has_pick_61CF,d0                	| [$1845: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$1848: cp   $00]
	jeq	l_186b                             	| [$184a: jr   z,$186B]

	move.l	a3,-(sp)                        	| [$184c: push iy]

	move.l	a0,-(sp)                        	| [$184e: push hl]
	lea		has_pick_61CF,a4           	| [$184f: ld   bc,has_pick_61CF] None
	lea	unknown_61CC,a3                	| [$1852: ld   iy,unknown_61CC]
	move.b	#0x38,d0                        	| [$1856: ld   a,$38]
	move.b	d0,(0x04,a3)                    	| [$1858: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$185b: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$185d: ld   (iy+$05),a]
	move.b	#0xE4,d0                        	| [$1860: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$1862: ld   (unknown_61D2),a]
	jbsr	l_21ba                            	| [$1865: call $21BA]
	move.l	(sp)+,a0                        	| [$1868: pop  hl]
	move.l	(sp)+,a3                        	| [$1869: pop  iy]
l_186b:
	lea	player_struct_6580,a2          	| [$186b: ld   ix,player_struct_6580]
	move.b	#0x3F,d0                        	| [$186f: ld   a,$3F]
	move.b	d0,(0x1c,a2)                    	| [$1871: ld   (ix+$1c),a]
	move.b	unknown_627B,d0                 	| [$1874: ld   a,(unknown_627B)]
	move.b	d0,(0x1d,a2)                    	| [$1877: ld   (ix+$1d),a]
	move.b	(0x03,a2),d0                    	| [$187a: ld   a,(ix+$03)]
	move.b	d0,(0x1f,a2)                    	| [$187d: ld   (ix+$1f),a]
	move.b	(0x02,a2),d0                    	| [$1880: ld   a,(ix+$02)]
	sub.b	#0x08,d0                         	| [$1883: sub  $08]
	move.b	d0,(0x1e,a2)                    	| [$1885: ld   (ix+$1e),a]
	jbsr	can_pick_bag_3DEB                 	| [$1888: call can_pick_bag_3DEB]
	jne	l_1897                             	| [$188b: jr   nz,$1897]
	lea	game_mem+0x5BA8,a0                      	| [$188d: ld   hl,$5BA8]
	move.l	a0,unknown_pointer_6140                 	| [$1890: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$1893: xor  a]
	move.b	d0,unknown_6142                 	| [$1894: ld   (unknown_6142),a]
 * pickup money bag
l_1897:
	move.b	#0x01,d0                        	| [$1897: ld   a,$01]
	move.b	d0,has_bag_6158                 	| [$1899: ld   (has_bag_6158),a]
	move.l	a3,unknown_pointer_615C                 	| [$189c: ld   (unknown_pointer_615C),iy]
	* store as big endian
	move.b	(0x01,a3),dropped_bag_screen_address_61F6+1                    	| [$18a0: ld   h,(iy+$01)]
	move.b	(0x00,a3),dropped_bag_screen_address_61F6                    	| [$18a3: ld   l,(iy+$00)]
									| [$18a6: ld   (dropped_bag_screen_address_61F6),hl]
	clr.b	d0                               	| [$18a9: xor  a]
	move.b	d0,unknown_627E                 	| [$18aa: ld   (unknown_627E),a]
	jbsr	osd_disable_vblank_interrupt   | [jbsr	osd_disable_vblank_interrupt]
	move.b	d0,(0x00,a3)                    	| [$18ae: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$18b1: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$18b4: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt   | [    jbsr	osd_enable_vblank_interrupt]
	move.b	unknown_627B,d0                 	| [$18b8: ld   a,(unknown_627B)]
	cmp.b	#0x24,d0                         	| [$18bb: cp   $24]
	jne	l_18c3                             	| [$18bf: jr   nz,$18C3]
	move.b	#0x01,d0                        	| [$18c1: ld   a,$01]
	bra.b	l_18c3_2
l_18c3:
	clr.b	d0                               	| [$18bd: ld   a,$00]
l_18c3_2:
	move.b	d0,player_has_blue_bag_flag_627C	| [$18c3: ld   (player_has_blue_bag_flag_627C),a]
	rts                                    	| [$18c6: ret]
l_18c7:
	move.b	unknown_627E,d0                 	| [$18c7: ld   a,(unknown_627E)]
	cmp.b	#0x07,d0                         	| [$18ca: cp   $07]
	bcs.b	0f
	rts                                    	| [$18cc: ret  nc]
0:
	* probably needed to refresh background tiles when picking up bag
	move.w	dropped_bag_screen_address_61F6,d6             	| [$18cd: ld   hl,(dropped_bag_screen_address_61F6)]
	move.w	d6,d0
	* test MSB
	lsr.w	#8,d0                           	| [$18d0: ld   a,h]
												| [$18d1: cp   $00]
	bne.b	0f
	rts                                    	| [$18d3: ret  z]
0:
	move.b	d6,d0                           	| [$18d4: ld   a,l]
	and.b	#0x0F,d0                         	| [$18d5: and  $0F]
											| [$18d7: cp   $00]
	bne.b	0f
	rts                                    	| [$18d9: ret  z]
0:
	jbsr	l_192f                            	| [$18da: call $192F]
	jbsr	l_1915                            	| [$18dd: call $1915]
	addq.w	#1,d6                           	| [$18e0: inc  hl]
	jbsr	l_192f                            	| [$18e1: call $192F]
	jbsr	l_1915                            	| [$18e4: call $1915]
	move.w	#0x0020,d3                      	| [$18e7: ld   de,$0020] 32
	add.w	d3,d6                            	| [$18ea: add  hl,de]
	jbsr	l_192f                            	| [$18eb: call $192F]
	jbsr	l_1915                            	| [$18ee: call $1915]
	subq.b	#1,d6                           	| [$18f1: dec  hl]
	jbsr	l_192f                            	| [$18f2: call $192F]
	jbsr	l_1915                            	| [$18f5: call $1915]
	move.b	unknown_627E,d0                 	| [$18f8: ld   a,(unknown_627E)]
	addq.b	#1,d0                           	| [$18fb: inc  a]
	move.b	d0,unknown_627E                 	| [$18fc: ld   (unknown_627E),a]
	move.b	player_screen_600D,d0           	| [$18ff: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$1902: cp   $02]
	bne.b	0f
	jbsr	l_33e3                            	| [$1904: call z,$33E3]
0:
	rts                                    	| [$1907: ret]
l_1908:
	move.b	(0x00,a2),d0                    	| [$1908: ld   a,(ix+$00)]
	cmp.b	#0x01,d0                         	| [$190b: cp   $01]
	bne.b	0f
	rts                                    	| [$190d: ret  z]
0:
	move.b	(a0),d0                         	| [$190e: ld   a,(hl)]
	cmp.b	#0xF0,d0                         	| [$190f: cp   $F0]
	bcc.b	0f
	rts                                    	| [$1911: ret  c]
0:
	clr.b	d0                               	| [$1912: xor  a]
	move.b	d0,(a1)                         	| [$1913: ld   (de),a]
	rts                                    	| [$1914: ret]
l_1915:
	move.b	#0x1F,d1                        	| [$1915: ld   b,$1F]
	move.b	(a0),d0                         	| [$1917: ld   a,(hl)]
	cmp.b	#0x49,d0                         	| [$1918: cp   $49]
	jeq	l_1926                             	| [$191a: jr   z,$1926]
	cmp.b	#0x4A,d0                         	| [$191c: cp   $4A]
	jeq	l_1926                             	| [$191e: jr   z,$1926]
	cmp.b	#0x4B,d0                         	| [$1920: cp   $4B]
	jeq	l_1926                             	| [$1922: jr   z,$1926]
	move.b	#0x3F,d1                        	| [$1924: ld   b,$3F]
l_1926:

	move.l	a0,-(sp)                        	| [$1926: push hl]
	move.b	d5,d0                           	| [$1927: ld   a,h]
	add.b	#0x08,d0                         	| [$1928: add  a,$08]
	move.b	d0,d5                           	| [$192a: ld   h,a]
	move.b	d1,d0                           	| [$192b: ld   a,b]
	move.b	d0,(a0)                         	| [$192c: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$192d: pop  hl]
	rts                                    	| [$192e: ret]
l_192f:
	* D6 contains screen memory, copy to D3
	move.w	d6,d3                           	| [$192f: ld   a,h]
												| [$1930: ld   d,a]
												| [$1931: ld   a,l]
												| [$1932: ld   e,a]
	jbsr	compute_backbuffer_tile_address_1945                          	| [$1933: call $1945]
l_1936:
	* copy tile data back to screen
	and.l	#0xFFFF,d3
	lea		game_mem,a1
	add.l	d3,a1
	move.b	(a1),d0                         	| [$1936: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$1937: ld   (hl),a]
	* loop until write succeeds... no need for this!
												| [$1938: ld   a,(de)]
												| [$1939: cp   (hl)]
											| [$193a: jr   nz,$1936]

	move.l	a0,-(sp)                        	| [$193c: push hl]
	move.b	d5,d0                           	| [$193d: ld   a,h]
	add.b	#0x08,d0                         	| [$193e: add  a,$08]
	move.b	d0,d5                           	| [$1940: ld   h,a]
	clr.b	d0                               	| [$1941: xor  a]
	move.b	d0,(a0)                         	| [$1942: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1943: pop  hl]
	rts                                    	| [$1944: ret]

* < D3: screen address
* > D3: backbuffer address (depends on current screen)
compute_backbuffer_tile_address_1945:
	move.b	player_screen_600D,d0           	| [$1945: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$1948: cp   $01]
	jne	l_1951                             	| [$194a: jr   nz,$1951]
	                           	| [$194c: ld   a,d]
	sub.w	#0x5000,d3                         	| [$194d: sub  $50]
	                           	| [$194f: ld   d,a]
	rts                                    	| [$1950: ret]
l_1951:
	cmp.b	#0x02,d0                         	| [$1951: cp   $02]
	jne	l_195a                             	| [$1953: jr   nz,$195A]
	                           	| [$1955: ld   a,d]
	sub.w	#0x4C00,d3                         	| [$1956: sub  $4C]
	                           	| [$1958: ld   d,a]
	rts                                    	| [$1959: ret]
l_195a:
	                           	| [$195a: ld   a,d]
	sub.w	#0x4800,d0                         	| [$195b: sub  $48]
	                           	| [$195d: ld   d,a]
	rts                                    	| [$195e: ret]


l_195f:
	move.b	unknown_659E,d0                 	| [$195f: ld   a,(unknown_659E)]
	cmp.b	#0xE0,d0                         	| [$1962: cp   $E0]
	bcs.b	0f
	rts                                    	| [$1964: ret  nc]
0:
	cmp.b	#0x18,d0                         	| [$1965: cp   $18]
	bcc.b	0f
	rts                                    	| [$1967: ret  c]
0:
	jbsr	test_pickup_flag_19A4             	| [$1968: call test_pickup_flag_19A4]
	move.b	d1,d0                           	| [$196b: ld   a,b]
	cmp.b	#0x00,d0                         	| [$196c: cp   $00]
	bne.b	0f
	rts                                    	| [$196e: ret  z]
0:
	lea	unknown_659C,a2                	| [$196f: ld   ix,unknown_659C]
	lea	unknown_615A,a3                	| [$1973: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$1977: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$197a: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c	| [$197d: call compute_logical_address_from_xy_558c]
    jbsr	osd_enable_vblank_interrupt
	subq.b	#1,d6                           	| [$1981: dec  hl]
	bsr	read_rom                         	| [$1982: ld   a,(hl)]

	move.w	d6,-(sp)                        	| [$1983: push hl]
	jbsr	l_19b3                            	| [$1984: call $19B3]
	movem.w	(sp)+,d6                        	| [$1987: pop  hl]
	beq.b	0f
	rts                                    	| [$1988: ret  nz]
0:
	subq.b	#1,d6                           	| [$1989: dec  hl]

	move.w	d6,-(sp)                        	| [$198a: push hl]
	jbsr	l_19b3                            	| [$198b: call $19B3]
	movem.w	(sp)+,d6                        	| [$198e: pop  hl]
	beq.b	0f
	rts                                    	| [$198f: ret  nz]
0:
	move.w	#0x0021,d3                      	| [$1990: ld   de,$0021] 33
	add.w	d3,a0                            	| [$1993: add  hl,de]
	jbsr	l_19b3                            	| [$1994: call $19B3]
	beq.b	0f
	rts                                    	| [$1997: ret  nz]
0:
	clr.b	d0                               	| [$1998: xor  a]
	move.b	d0,has_bag_6158                 	| [$1999: ld   (has_bag_6158),a]
	move.b	d0,player_has_blue_bag_flag_627C	| [$199c: ld   (player_has_blue_bag_flag_627C),a]
	addq.b	#1,d0                           	| [$199f: inc  a]
	move.b	d0,unknown_6159                 	| [$19a0: ld   (unknown_6159),a]
	rts                                    	| [$19a3: ret]

test_pickup_flag_19A4:
	clr.b	d1                               	| [$19a4: ld   b,$00]
	move.b	pickup_flag_6160,d0             	| [$19a6: ld   a,(pickup_flag_6160)]
	cmp.b	#0x00,d0                         	| [$19a9: cp   $00]
	bne.b	0f
	rts                                    	| [$19ab: ret  z]
0:
	clr.b	d0                               	| [$19ac: xor  a]
	move.b	d0,pickup_flag_6160             	| [$19ad: ld   (pickup_flag_6160),a]
	move.b	#0x01,d1                        	| [$19b0: ld   b,$01]
	rts                                    	| [$19b2: ret]
l_19b3:
	lea	game_mem+0X19D0,a0                      	| [$19b3: ld   hl,$19D0]
	move.w	#0x015,d1                        	| [$19b6: ld   bc,$0015] 21
	jbsr	cpdr                              	| [$19b9: cpdr]
	rts                                    	| [$19bb: ret]

 * < $6095:	pointer on direction ($6027/$6067)
 * < d3:	guard screen address
 * < $6098:	guard screen index
 * < a2:	6035 or 6057 guard ????? what????
 * < a3:	guard struct

analyse_guard_direction_change_19D1:

	move.l	a3,-(sp)                        	| [$19d1: push iy]
	lea	game_mem+0x5974,a3                      	| [$19d3: ld   iy,$5974] path "branch" address table
	* 2 bytes: address (big endian) then 1 byte for branch flag
 * loop to look for branches (ladders, etc)
l_19d7:
	* logical address stored as big endian
	LOAD_AX_BE_WORD_DY	a3,d6
								| [$19d7: ld   a,(iy+$00)]
			
						| [$19da: ld   h,a]
								| [$19db: ld   a,(iy+$01)]
	                           	| [$19de: ld   l,a]
								| [$19df: xor  a]
	cmp.w	d3,d6  						| [sbc  hl,de]	; get address distance between guard and
	jeq	l_19fb                             	| [$19e2: jr   z,$19FB]
	addq.w	#3,a3                           	| [$19e4: inc  iy] * 3
	            	| [$19ea: ld   a,(io_read_shit_B800)]
	* branch (direction change) flag (just test end of path!)
	move.b	(0x02,a3),d0                    	| [$19ed: ld   a,(iy+$02)]
	cmp.b	#0xFF,d0                         	| [$19f0: cp   $FF]
	jne	l_19d7                             	| [$19f2: jr   nz,$19D7]
	clr.b	d0                               	| [$19f4: xor  a]
	move.b	d0,(0x11,a2)                    	| [$19f5: ld   (ix+$11),a]
	move.l	(sp)+,a3                        	| [$19f8: pop  iy]
	rts                                    	| [$19fa: ret]

 * branch found:	what do we decide??
l_19fb:

	move.l	a2,-(sp)                        	| [$19fb: push ix]
	move.l	a3,unknown_pointer_604B                 	| [$19fd: ld   (unknown_pointer_604B),iy]
	move.b	screen_index_param_6098,d0      	| [$1a01: ld   a,(screen_index_param_6098)] guard screen
	move.b	d0,d1                           	| [$1a04: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1a05: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1a08: cp   b]
	jeq	l_1a0e                             	| [$1a09: jr   z,$1A0E]
 * not same screen as player
	jbsr	l_1bbd                            	| [$1a0b: call $1BBD]
 * same screen as the player
l_1a0e:
	move.b	#0x08,d1                        	| [$1a0e: ld   b,$08]
	move.b	(0x11,a2),d0                    	| [$1a10: ld   a,(ix+$11)]
	cmp.b	#0x01,d0                         	| [$1a13: cp   $01]
	jeq	l_1b0b                             	| [$1a15: jp   z,$1B0B]  bail out
 * loop
l_1a18:
	move.b	(0x07,a2),d0                    	| [$1a18: ld   a,(ix+$07)]
										| [$1a1b: cp   $00]
	jne	l_1b0b                             	| [$1a1d: jp   nz,$1B0B]  bail out
	addq.w	#1,a2                           	| [$1a20: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_1a18                             	| [$1a22: djnz $1A18]
	move.l	(sp)+,a2                        	| [$1a24: pop  ix]
	clr.b	d0                               	| [$1a26: xor  a]
	move.b	d0,(0x15,a2)                    	| [$1a27: ld   (ix+$15),a]
	move.b	unknown_6047,d0                 	| [$1a2a: ld   a,(unknown_6047)]
										| [$1a2d: cp   $00]
	jeq	l_1a5c                             	| [$1a2f: jp   z,$1A5C]
	move.b	player_x_6582,d0                	| [$1a32: ld   a,(player_x_6582)]
	move.b	d0,d1                           	| [$1a35: ld   b,a]
	move.l	(sp)+,a3                        	| [$1a36: pop  iy]
	move.b	(0x02,a3),d0                    	| [$1a38: ld   a,(iy+$02)]  guard x

	move.l	a3,-(sp)                        	| [$1a3b: push iy]
	cmp.b	d1,d0                            	| [$1a3d: cp   b]
	move.w	d0,-(sp)                        	| [$1a3e: push af]
	bcs.b	0f
	jbsr	l_1b10                            	| [$1a3f: call nc,$1B10]  guard x < player x ?
0:
	move.w	(sp)+,d0                        	| [$1a42: pop  af]
	bcc.b	0f
	jbsr	l_1b19                            	| [$1a43: call c,$1B19]
0:
	move.b	player_y_6583,d0                	| [$1a46: ld   a,(player_y_6583)]
	move.b	d0,d1                           	| [$1a49: ld   b,a]
	move.l	(sp)+,a3                        	| [$1a4a: pop  iy]
	move.b	(0x03,a3),d0                    	| [$1a4c: ld   a,(iy+$03)]

	move.l	a3,-(sp)                        	| [$1a4f: push iy]
	cmp.b	d1,d0                            	| [$1a51: cp   b]
	move.w	d0,-(sp)                        	| [$1a52: push af]
	bcc.b	0f
	jbsr	l_1b2b                            	| [$1a53: call c,$1B2B]
0:
	move.w	(sp)+,d0                        	| [$1a56: pop  af]
	bcs.b	0f
	jbsr	l_1b22                            	| [$1a57: call nc,$1B22]
0:
	jra	l_1ab4                             	| [$1a5a: jr   $1AB4]
l_1a5c:
	* random!
	moveq	#0,d0
	jbsr	osd_get_random		       	| [$1a5c: ld   a,(vertical_beam_pos_A000)]

	move.l	a0,-(sp)                        	| [$1a5f: push hl]
	lea	game_mem+0x1B34,a0  	| [$1a60: ld   hl,direction_index_table_1B34]
	and.b	#0x03,d0                         	| [$1a63: and  $03] random 0 1 2 3
                           	| [$1a65: add  a,l]
                          	| [$1a66: ld   l,a]
                          	| [$1a67: ld   a,h]

                          	| [$1a6a: ld   h,a]
	            	| [$1a6b: ld   a,(io_read_shit_B800)]
	move.b	(a0,d0.w),d0                         	| [$1a6e: ld   a,(hl)] turns to random 8 4 2 1 thanks to table @1B34
	movem.w	d1/d2,-(sp)                    	| [$1a6f: push bc]

	move.l	a2,-(sp)                        	| [$1a70: push ix]
	move.w	guard_direction_pointer_6095,a2             	| [$1a72: ld   ix,(guard_direction_pointer_6095)]
	move.b	d0,d1                           	| [$1a76: ld   b,a]  set 8 4 2 1 value to b
	move.b	(a2),d0                    	| [$1a77: ld   a,(ix+$00)] guard direction
 * divide by 16
	ror.b	#4,d0                            	| [$1a7a: rrc  a] * 4
 * shift so guard current direction flag matches the 8 4 2 1 values computed by random
	and.b	#0x0F,d0                         	| [$1a82: and  $0F]
	cmp.b	#0x01,d0                         	| [$1a84: cp   $01]
	jne	l_1a8c                             	| [$1a86: jr   nz,$1A8C]
 * a is "up"
	move.b	#0x02,d0                        	| [$1a88: ld   a,$02]
	jra	l_1aa2                             	| [$1a8a: jr   $1AA2]
l_1a8c:
	cmp.b	#0x02,d0                         	| [$1a8c: cp   $02]
	jne	l_1a94                             	| [$1a8e: jr   nz,$1A94]
	move.b	#0x01,d0                        	| [$1a90: ld   a,$01]
	jra	l_1aa2                             	| [$1a92: jr   $1AA2]
l_1a94:
	cmp.b	#0x04,d0                         	| [$1a94: cp   $04]
	jne	l_1a9c                             	| [$1a96: jr   nz,$1A9C]
	move.b	#0x08,d0                        	| [$1a98: ld   a,$08]
	jra	l_1aa2                             	| [$1a9a: jr   $1AA2]
l_1a9c:
	cmp.b	#0x08,d0                         	| [$1a9c: cp   $08]
	jne	l_1aa2                             	| [$1a9e: jr   nz,$1AA2]
	move.b	#0x04,d0                        	| [$1aa0: ld   a,$04]
l_1aa2:
	cmp.b	d1,d0                            	| [$1aa2: cp   b]
	jne	l_1aac                             	| [$1aa3: jr   nz,$1AAC] ok:	 random did not give the opposite
	move.l	(sp)+,a2                        	| [$1aa5: pop  ix]

	movem.w	(sp)+,d1/d2                    	| [$1aa7: pop  bc]
	move.l	(sp)+,a0                        	| [$1aa8: pop  hl]
	jra	l_1a5c                             	| [$1aa9: jp   $1A5C] retry until random gives something else than the opposite
l_1aac:
	move.l	(sp)+,a2                        	| [$1aac: pop  ix]
	move.b	d1,d0                           	| [$1aae: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$1aaf: pop  bc]
	move.l	(sp)+,a0                        	| [$1ab0: pop  hl]
	move.b	d0,(0x15,a2)                    	| [$1ab1: ld   (ix+$15),a]  save a
l_1ab4:
	clr.b	d0                               	| [$1ab4: xor  a]
	move.w	unknown_pointer_604B,a3             	| [$1ab5: ld   iy,(unknown_pointer_604B)]
	move.b	(0x02,a3),d0                    	| [$1ab9: ld   a,(iy+$02)]
	ror.b	#4,d0                            	| [$1abc: rrc  a] * 4
	move.b	d0,d1                           	| [$1ac4: ld   b,a]
	move.b	(0x15,a2),d0                    	| [$1ac5: ld   a,(ix+$15)]  restore a
	and.b	d1,d0                            	| [$1ac8: and  b]
	move.w	guard_logical_address_6091,stored_logical_address_6044             	| [$1acb: ld   hl,(guard_logical_address_6091)]
											| [$1ace: ld   (stored_logical_address_6044),a]
	lea	guard_1_struct_6594,a3         	| [$1ad1: ld   iy,guard_1_struct_6594]
	move.l	a3,guard_struct_pointer_6093         	| [$1ad5: ld   (guard_struct_pointer_6093),iy]
	move.l	guard_direction_pointer_6095,a0             	| [$1ad9: ld   hl,(guard_direction_pointer_6095)] contains guard direction pointer unknown_6027 or unknown_6067
	ror.b	#1,d0                            	| [$1ac9: rrc  a]
	jcc	l_1ae3                             	| [$1adc: jr   nc,$1AE3]
	jbsr	set_guard_direction_up_1BB3       	| [$1ade: call set_guard_direction_up_1BB3]
	jra	l_1b03                             	| [$1ae1: jr   $1B03]
l_1ae3:
	ror.b	#1,d0                            	| [$1ae3: rrc  a]
	jcc	l_1aec                             	| [$1ae5: jr   nc,$1AEC]
	jbsr	set_guard_direction_down_1BA9     	| [$1ae7: call set_guard_direction_down_1BA9]
	jra	l_1b03                             	| [$1aea: jr   $1B03]
l_1aec:
	ror.b	#1,d0                            	| [$1aec: rrc  a]
	jcc	l_1af5                             	| [$1aee: jr   nc,$1AF5]
	jbsr	set_guard_direction_left_1B8B     	| [$1af0: call set_guard_direction_left_1B8B]
	jra	l_1afc                             	| [$1af3: jr   $1AFC]
l_1af5:
	ror.b	#1,d0                            	| [$1af5: rrc  a]
	jcc	l_1b03                             	| [$1af7: jr   nc,$1B03]
	jbsr	set_guard_direction_right_1B6D    	| [$1af9: call set_guard_direction_right_1B6D]
l_1afc:
	move.b	unknown_600B,d0                 	| [$1afc: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$1aff: cp   $02]
	jne	l_1b08                             	| [$1b01: jr   nz,$1B08]

l_1b03:
	move.b	#0x01,d0                        	| [$1b03: ld   a,$01]
	move.b	d0,(0x11,a2)                    	| [$1b05: ld   (ix+$11),a]
l_1b08:
	move.l	(sp)+,a3                        	| [$1b08: pop  iy]
	rts                                    	| [$1b0a: ret]
l_1b0b:
	move.l	(sp)+,a2                        	| [$1b0b: pop  ix]
	move.l	(sp)+,a3                        	| [$1b0d: pop  iy]
	rts                                    	| [$1b0f: ret]
l_1b10:
	move.b	(0x15,a2),d0                    	| [$1b10: ld   a,(ix+$15)]
	or.b	#0x04,d0                          	| [$1b13: or   $04]
	move.b	d0,(0x15,a2)                    	| [$1b15: ld   (ix+$15),a]
	rts                                    	| [$1b18: ret]
l_1b19:
	move.b	(0x15,a2),d0                    	| [$1b19: ld   a,(ix+$15)]
	or.b	#0x08,d0                          	| [$1b1c: or   $08]
	move.b	d0,(0x15,a2)                    	| [$1b1e: ld   (ix+$15),a]
	rts                                    	| [$1b21: ret]
l_1b22:
	move.b	(0x15,a2),d0                    	| [$1b22: ld   a,(ix+$15)]
	or.b	#0x01,d0                          	| [$1b25: or   $01]
	move.b	d0,(0x15,a2)                    	| [$1b27: ld   (ix+$15),a]
	rts                                    	| [$1b2a: ret]
l_1b2b:
	move.b	(0x15,a2),d0                    	| [$1b2b: ld   a,(ix+$15)]
	or.b	#0x02,d0                          	| [$1b2e: or   $02]
	move.b	d0,(0x15,a2)                    	| [$1b30: ld   (ix+$15),a]
	rts                                    	| [$1b33: ret]
l_1b38:
	move.w	guard_1_logical_address_6038,guard_logical_address_6091                   	| [$1b38: ld   hl,($6038)]
	                 	| [$1b3b: ld   (guard_logical_address_6091),hl]
	move.l	#guard_1_struct_6594,guard_struct_pointer_6093         	| [$1b3e: ld   iy,guard_1_struct_6594]
	         	| [$1b42: ld   (guard_struct_pointer_6093),iy]
	move.l	#guard_2_direction_6027,guard_direction_pointer_6095      	| [$1b46: ld   hl,guard_2_direction_6027]
	                 	| [$1b49: ld   (guard_direction_pointer_6095),hl]
	move.b	guard_2_sees_player_right_603C,d0	| [$1b4c: ld   a,(guard_2_sees_player_right_603C)]
	                         	| [$1b4f: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_right_1B6D    	| [$1b51: call nz,set_guard_direction_right_1B6D]
0:
	move.b	guard_2_sees_player_left_603D,d0	| [$1b54: ld   a,(guard_2_sees_player_left_603D)]
	                         	| [$1b57: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_left_1B8B     	| [$1b59: call nz,set_guard_direction_left_1B8B]
0:
	move.b	guard_2_sees_player_up_603E,d0  	| [$1b5c: ld   a,(guard_2_sees_player_up_603E)]
	                         	| [$1b5f: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_up_1BB3       	| [$1b61: call nz,set_guard_direction_up_1BB3]
0:
	move.b	guard_2_sees_player_down_603F,d0	| [$1b64: ld   a,(guard_2_sees_player_down_603F)]
	                         	| [$1b67: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_down_1BA9     	| [$1b69: call nz,set_guard_direction_down_1BA9]
0:
	rts                                    	| [$1b6c: ret]


set_guard_direction_right_1B6D:
	move.w	guard_logical_address_6091,d6             	| [$1b6d: ld   hl,(guard_logical_address_6091)]

	move.l	a2,-(sp)                        	| [$1b70: push ix]
	move.l	guard_struct_pointer_6093,a2     	| [$1b72: ld   ix,(guard_struct_pointer_6093)]
	jbsr	character_can_walk_right_0CFA     	| [$1b76: call character_can_walk_right_0CFA]
	move.l	(sp)+,a2                        	| [$1b79: pop  ix]
	move.b	unknown_600B,d0                 	| [$1b7b: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$1b7e: cp   $02]
	beq.b	0f
	rts                                    	| [$1b80: ret  nz]
0:

	move.l	a0,-(sp)                        	| [$1b81: push hl]
	move.l	guard_direction_pointer_6095,a0             	| [$1b82: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$1b85: xor  a]
	bset.b	#7,d0                           	| [$1b86: set  7,a]  set direction to right
	move.b	d0,(a0)                         	| [$1b88: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1b89: pop  hl]
	rts                                    	| [$1b8a: ret]

set_guard_direction_left_1B8B:
	move.w	guard_logical_address_6091,d6             	| [$1b8b: ld   hl,(guard_logical_address_6091)]
	move.l	a2,-(sp)                        	| [$1b8e: push ix]
	move.l	guard_struct_pointer_6093,a2     	| [$1b90: ld   ix,(guard_struct_pointer_6093)]
	jbsr	character_can_walk_left_0D69      	| [$1b94: call character_can_walk_left_0D69]
	move.l	(sp)+,a2                        	| [$1b97: pop  ix]
	move.b	unknown_600B,d0                 	| [$1b99: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$1b9c: cp   $02]
	beq.b	0f
	rts                                    	| [$1b9e: ret  nz]
0:

	move.l	a0,-(sp)                        	| [$1b9f: push hl]
	move.l	guard_direction_pointer_6095,a0             	| [$1ba0: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$1ba3: xor  a]
	bset.b	#6,d0                           	| [$1ba4: set  6,a]  set direction to left
	move.b	d0,(a0)                         	| [$1ba6: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1ba7: pop  hl]
	rts                                    	| [$1ba8: ret]

set_guard_direction_down_1BA9:
	clr.b	d0                               	| [$1ba9: xor  a]
	move.l	a0,-(sp)                        	| [$1baa: push hl]
	move.l	guard_direction_pointer_6095,a0             	| [$1bab: ld   hl,(guard_direction_pointer_6095)]
	bset.b	#5,d0                           	| [$1bae: set  5,a] set direction to down
	move.b	d0,(a0)                         	| [$1bb0: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1bb1: pop  hl]
	rts                                    	| [$1bb2: ret]

	

set_guard_direction_up_1BB3:
	clr.b	d0                               	| [$1bb3: xor  a]

	move.l	a0,-(sp)                        	| [$1bb4: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$1bb5: ld   hl,(guard_direction_pointer_6095)]
	bset.b	#4,d0                           	| [$1bb8: set  4,a]  set direction to up
	move.b	d0,(a0)                         	| [$1bba: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1bbb: pop  hl]
	rts                                    	| [$1bbc: ret]
	
 * not the same screen as player:	 decide something?
 * < b:	guard screen
 * < D3: guard screen address
l_1bbd:

	move.l	a2,-(sp)                        	| [$1bbd: push ix]

	move.l	a3,-(sp)                        	| [$1bbf: push iy]

	move.l	a0,-(sp)                        	| [$1bc1: push hl]
	movem.w	d1/d2,-(sp)                    	| [$1bc2: push bc]
	movem.w	d3/d4,-(sp)                    	| [$1bc3: push de]
	move.b	d1,d0                           	| [$1bc4: ld   a,b]
	cmp.b	#0x01,d0                         	| [$1bc5: cp   $01]
	jne	l_1bcf                             	| [$1bc7: jr   nz,$1BCF]
 * guard on first screen
 *  address table for special locations of screen 1 which lead to screen 2 (up/down/left...)
 * address (2 byte) + direction (1 byte). FF to end
	lea	game_mem+0x5A10,a3                      	| [$1bc9: ld   iy,$5A10]
	jra	l_1bea                             	| [$1bcd: jr   $1BEA]
l_1bcf:
	cmp.b	#0x02,d0                         	| [$1bcf: cp   $02]
	jne	l_1be6                             	| [$1bd1: jr   nz,$1BE6]
 * guard on middle screen
	move.b	d0,d1                           	| [$1bd3: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1bd4: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1bd7: cp   b]
	jcc	l_1be0                             	| [$1bd8: jr   nc,$1BE0]  is it 1 or 3
	lea	game_mem+0x5A3D,a3                      	| [$1bda: ld   iy,$5A3D]  address table for special locations of screen 2 which leads to screen 1
	jra	l_1bea                             	| [$1bde: jr   $1BEA]
l_1be0:
	lea	game_mem+0x5A76,a3                      	| [$1be0: ld   iy,$5A76]  address table for special locations of screen 2 which leads to screen 3
	jra	l_1bea                             	| [$1be4: jr   $1BEA]
 * screen 3 to screen 2
l_1be6:
	lea	game_mem+0x5AAF,a3                      	| [$1be6: ld   iy,$5AAF]
 * special locations loop where we do something
l_1bea:
	movem.w	(sp)+,d3/d4                    	| [$1bea: pop  de]
l_1beb:
	* read address (big endian)
	LOAD_AX_BE_WORD_DY	a3,d6
									| [$1beb: ld   a,(iy+$00)]
										| [$1bee: ld   h,a]
					
										| [$1bef: ld   a,(iy+$01)]
										| [$1bf2: ld   l,a]
											| [$1bf3: xor  a]
	cmp.w	d3,d6							| sbc  hl,de
	jeq	l_1c08                             	| [$1bf6: jr   z,$1C08]
	addq.w	#3,a3                           	| [$1bf8: inc  iy] * 3
	move.b	(0x02,a3),d0                    	| [$1bfe: ld   a,(iy+$02)]
	cmp.b	#0xFF,d0                         	| [$1c01: cp   $FF]
	jne	l_1beb                             	| [$1c03: jr   nz,$1BEB]

	jra	l_1c26                             	| [$1c05: jp   $1C26] special location not found:	do nothing
 * special location found
l_1c08:
	move.b	(0x02,a3),d0                    	| [$1c08: ld   a,(iy+$02)]
	cmp.b	#0x80,d0                         	| [$1c0b: cp   $80]
	jne	l_1c15                             	| [$1c0d: jr   nz,$1C15]
	jbsr	set_guard_direction_right_1B6D    	| [$1c0f: call set_guard_direction_right_1B6D]
	jra	l_1c26                             	| [$1c12: jp   $1C26]
l_1c15:
	cmp.b	#0x40,d0                         	| [$1c15: cp   $40]
	jne	l_1c1f                             	| [$1c17: jr   nz,$1C1F]
	jbsr	set_guard_direction_left_1B8B     	| [$1c19: call set_guard_direction_left_1B8B]
	jra	l_1c26                             	| [$1c1c: jp   $1C26]
l_1c1f:
	move.w	guard_direction_pointer_6095,a2             	| [$1c1f: ld   ix,(guard_direction_pointer_6095)]
	move.b	d0,(0x00,a2)                    	| [$1c23: ld   (ix+$00),a] don't change direction?
l_1c26:

	movem.w	(sp)+,d1/d2                    	| [$1c26: pop  bc]
	move.l	(sp)+,a0                        	| [$1c27: pop  hl]
	move.l	(sp)+,a3                        	| [$1c28: pop  iy]
	move.l	(sp)+,a2                        	| [$1c2a: pop  ix]
	move.l	(sp)+,a0                        	| [$1c2c: pop  hl]
	jra	l_1b0b                             	| [$1c2d: jp   $1B0B]
l_1c30:
	move.b	player_screen_600D,d0           	| [$1c30: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$1c33: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$1c34: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$1c37: cp   b]
	beq.b	0f
	rts                                    	| [$1c38: ret  nz]
0:
	lea	guard_2_sees_player_left_603D,a2	| [$1c39: ld   ix,guard_2_sees_player_left_603D]
	move.w	guard_1_logical_address_6038,d6	| [$1c3d: ld   hl,(guard_1_logical_address_6038)]
	move.w	#-0x20,d1                        	| [$1c40: ld   bc,$FFE0] 65504
	move.b	#0x40,d0                        	| [$1c48: ld   a,$40]
	tst.b	has_pick_61CF                	| [$1c43: ld   a,(has_pick_61CF)]
	jne	l_1c52                             	| [$1c4a: jr   nz,$1C52]
 	lea	guard_2_sees_player_right_603C,a2	| [$1c4c: ld   ix,guard_2_sees_player_right_603C]
	move.b	#0x80,d0                        	| [$1c50: ld   a,$80]
l_1c52:
	exg	d0,d7                              	| [$1c52: ex   af,af']
	jbsr	is_way_clear_to_player_1D33       	| [$1c53: call is_way_clear_to_player_1D33]
	move.w	guard_1_logical_address_6038,d6	| [$1c56: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_2_sees_player_right_603C,a2	| [$1c59: ld   ix,guard_2_sees_player_right_603C]
	move.w	#0x20,d1                        	| [$1c5d: ld   bc,$0020] 32
	                         	| [$1c63: cp   $00]
	move.b	#0x80,d0                        	| [$1c65: ld   a,$80]
	tst.b	has_pick_61CF                	| [$1c60: ld   a,(has_pick_61CF)]
	jne	l_1c6f                             	| [$1c67: jr   nz,$1C6F]
 	lea	guard_2_sees_player_left_603D,a2	| [$1c69: ld   ix,guard_2_sees_player_left_603D]
	move.b	#0x40,d0                        	| [$1c6d: ld   a,$40]
l_1c6f:
	exg	d0,d7                              	| [$1c6f: ex   af,af']
	jbsr	is_way_clear_to_player_1D33       	| [$1c70: call is_way_clear_to_player_1D33]
	move.w	guard_1_logical_address_6038,d6	| [$1c73: ld   hl,(guard_1_logical_address_6038)]
	move.w	#0xffff,d1                        	| [$1c76: ld   bc,$FFFF] 65535
	move.b	#0x10,d0                        	| [$1c79: ld   a,$10]
	exg	d0,d7                              	| [$1c7b: ex   af,af']
	lea	guard_2_sees_player_up_603E,a2 	| [$1c7c: ld   ix,guard_2_sees_player_up_603E]
	jbsr	is_way_clear_to_player_1D33       	| [$1c80: call is_way_clear_to_player_1D33]
	move.w	guard_1_logical_address_6038,d6	| [$1c83: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_2_sees_player_down_603F,a2	| [$1c86: ld   ix,guard_2_sees_player_down_603F]
	move.w	#0x01,d1                        	| [$1c8a: ld   bc,$0001] 1
	move.b	#0x20,d0                        	| [$1c8d: ld   a,$20]
	exg	d0,d7                              	| [$1c8f: ex   af,af']
 	jbsr	is_way_clear_to_player_1D33       	| [$1c90: call is_way_clear_to_player_1D33]
	rts                                    	| [$1c93: ret]

l_1c94:
	move.l	guard_2_logical_address_6078,guard_logical_address_6091	| [$1c94: ld   hl,(guard_2_logical_address_6078)]
											| [$1c97: ld   (guard_logical_address_6091),hl]
	move.l	#guard_2_struct_6598,guard_struct_pointer_6093         	| [$1c9a: ld   iy,guard_2_struct_6598]
								| [$1c9e: ld   (guard_struct_pointer_6093),iy]
	move.l	#guard_1_direction_6067,guard_direction_pointer_6095      	| [$1ca2: ld   hl,guard_1_direction_6067]
	                 	| [$1ca5: ld   (guard_direction_pointer_6095),hl]
	move.b	guard_1_sees_player_right_607C,d0	| [$1ca8: ld   a,(guard_1_sees_player_right_607C)]
										| [$1cab: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_right_1B6D    	| [$1cad: call nz,set_guard_direction_right_1B6D]
0:
	move.b	guard_1_sees_player_left_607D,d0	| [$1cb0: ld   a,(guard_1_sees_player_left_607D)]
											| [$1cb3: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_left_1B8B     	| [$1cb5: call nz,set_guard_direction_left_1B8B]
0:
	move.b	guard_1_sees_player_up_607E,d0  	| [$1cb8: ld   a,(guard_1_sees_player_up_607E)]
	cmp.b	#0x00,d0                         	| [$1cbb: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_up_1BB3       	| [$1cbd: call nz,set_guard_direction_up_1BB3]
0:
	move.b	guard_1_sees_player_down_607F,d0	| [$1cc0: ld   a,(guard_1_sees_player_down_607F)]
	                         	| [$1cc3: cp   $00]
	beq.b	0f
	jbsr	set_guard_direction_down_1BA9     	| [$1cc5: call nz,set_guard_direction_down_1BA9]
0:
	rts                                    	| [$1cc8: ret]


l_1cc9:
	move.b	player_screen_600D,d0           	| [$1cc9: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$1ccc: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$1ccd: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$1cd0: cp   b]
	beq.b	0f
	rts                                    	| [$1cd1: ret  nz]
0:

	lea	guard_1_sees_player_left_607D,a2	| [$1cd2: ld   ix,guard_1_sees_player_left_607D]
	move.w	guard_2_logical_address_6078,d6	| [$1cd6: ld   hl,(guard_2_logical_address_6078)]
	move.b	#-0x20,d1                        	| [$1cd9: ld   bc,$FFE0] 65504

* if player has pick reverts tests:	 if sees on the right, actually
*  pretend he saw him on the left

	move.b	#0x40,d0                        	| [$1ce1: ld   a,$40]
	tst.b	has_pick_61CF                	| [$1cdc: ld   a,(has_pick_61CF)]
	jne	l_1ceb                             	| [$1ce3: jr   nz,$1CEB]
 	lea	guard_1_sees_player_right_607C,a2	| [$1ce5: ld   ix,guard_1_sees_player_right_607C]
	move.b	#0x80,d0                        	| [$1ce9: ld   a,$80]
l_1ceb:
	exg	d0,d7                              	| [$1ceb: ex   af,af']
 	jbsr	is_way_clear_to_player_1D33       	| [$1cec: call is_way_clear_to_player_1D33]
	move.w	guard_2_logical_address_6078,d6	| [$1cef: ld   hl,(guard_2_logical_address_6078)]
	move.w	#0x20,d1                        	| [$1cf2: ld   bc,$0020] 32
	lea	guard_1_sees_player_right_607C,a2	| [$1cf5: ld   ix,guard_1_sees_player_right_607C]

* if player has pick reverts tests:	 if sees on the left, actually
*  pretend he saw him on the right

	                	| [$1cf9: ld   a,(has_pick_61CF)]
	                         	| [$1cfc: cp   $00]
	move.w	d6,-(a7)
	move.w	#0x91B2,d6                       	| [$1cfe: ld   a,($91B2)]
	jbsr	osd_r_videoram
	move.b	d0,unknown_6272                 	| [$1d01: ld   (unknown_6272),a]
	move.w	(a7)+,d6
	
	move.b	#0x80,d0                        	| [$1d04: ld   a,$80]
	tst.b	has_pick_61CF
	jne	l_1d0e                             	| [$1d06: jr   nz,$1D0E]
	lea	guard_1_sees_player_left_607D,a2	| [$1d08: ld   ix,guard_1_sees_player_left_607D]
	move.b	#0x40,d0                        	| [$1d0c: ld   a,$40]
l_1d0e:
	exg	d0,d7                              	| [$1d0e: ex   af,af']
 	jbsr	is_way_clear_to_player_1D33       	| [$1d0f: call is_way_clear_to_player_1D33]

 * up and down (note that having the pick has no effect on those tests)
	move.w	guard_2_logical_address_6078,d6	| [$1d12: ld   hl,(guard_2_logical_address_6078)]
	move.w	#-1,d1                        	| [$1d15: ld   bc,$FFFF] 65535
	move.b	#0x10,d0                        	| [$1d18: ld   a,$10]
	exg	d0,d7                              	| [$1d1a: ex   af,af']
 	lea	guard_1_sees_player_up_607E,a2 	| [$1d1b: ld   ix,guard_1_sees_player_up_607E]
	jbsr	is_way_clear_to_player_1D33       	| [$1d1f: call is_way_clear_to_player_1D33]
	move.w	guard_2_logical_address_6078,d6	| [$1d22: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_1_sees_player_down_607F,a2	| [$1d25: ld   ix,guard_1_sees_player_down_607F]
	move.w	#0x01,d1                        	| [$1d29: ld   bc,$0001] 1
	move.b	#0x20,d0                        	| [$1d2c: ld   a,$20]
	exg	d0,d7                              	| [$1d2e: ex   af,af']
	jbsr	is_way_clear_to_player_1D33       	| [$1d2f: call is_way_clear_to_player_1D33]
	rts                                    	| [$1d32: ret]

* test if there's something blocking the view from guard to player
* works for all directions (up,down,left,right)
*
* params:
* d0:	direction value to set if test works ($40:to left, $80:to right, $10:up, $20:down)
* a2: store a or 0 in (ix)
* d6: logical address
* d1: direction increment (1:	down, -1: up, 32: right, -32: left)

is_way_clear_to_player_1D33:
	subq.w	#2,a0                           	| [$1d33: dec  hl] * 2
l_1d35:
	clr.b	d0                               	| [$1d35: xor  a]
	move.b	d0,(a2)                    	| [$1d36: ld   (ix+$00),a] set "visible" flag to 0
	add.w	d1,d6					| [adc  hl,bc]
	bsr		read_rom                         	| [$1d3b: ld   a,(hl)]
	movem.w	d1/d2,-(sp)                    	| [$1d3c: push bc]
	move.b	#0x08,d1                        	| [$1d3d: ld   b,$08]
 * 8 tests
	lea	game_mem+0x1D6B,a3                      	| [$1d3f: ld   iy,$1D6B]
l_1d43:
	cmp.b	(a3),d0                     	| [$1d43: cp   (iy+$00)]
	jeq	l_1d4e                             	| [$1d46: jr   z,$1D4E]
	addq.w	#1,a3                           	| [$1d48: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_1d43                             	| [$1d4a: djnz $1D43]


	movem.w	(sp)+,d1/d2                    	| [$1d4c: pop  bc]
	rts                                    	| [$1d4d: ret]
l_1d4e:

	movem.w	(sp)+,d1/d2                    	| [$1d4e: pop  bc]

	                        	| [$1d4f: push hl]
	move.w	player_logical_address_6009,d3	| [$1d50: ld   de,(player_logical_address_6009)]
	subq.b	#2,d3                           	| [$1d54: dec  de] * 2
	                               	| [$1d56: xor  a]
	cmp.w  d3,d6
	                        	| [$1d59: pop  hl]
	jeq	l_1d66                             	| [$1d5a: jr   z,$1D66]

                        	| [$1d5c: push hl]
	addq.w	#1,d3                           	| [$1d5d: inc  de]
	                               	| [$1d5e: xor  a]
	cmp.w  d3,d6
	                        	| [$1d61: pop  hl]
	jeq	l_1d66                             	| [$1d62: jr   z,$1D66]
	jra	l_1d35                             	| [$1d64: jr   $1D35]
l_1d66:
	exg	d0,d7                              	| [$1d66: ex   af,af']
 	move.b	d0,(a2)                    	| [$1d67: ld   (ix+$00),a]
	rts                                    	| [$1d6a: ret]


l_1d73:
	move.b	player_in_wagon_flag_6029,d0    	| [$1d73: ld   a,(player_in_wagon_flag_6029)]
	cmp.b	#0x01,d0                         	| [$1d76: cp   $01]
	jeq	l_1d82                             	| [$1d78: jr   z,$1D82]
	move.b	player_death_flag_6025,d0       	| [$1d7a: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$1d7d: cp   $01]
	jeq	l_1f50                             	| [$1d7f: jp   z,$1F50]
l_1d82:
	clr.b	d0                               	| [$1d82: xor  a]
	rts                                    	| [$1d83: ret]

wagon_player_collision_1D84:
	move.b	player_death_flag_6025,d0       	| [$1d84: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$1d87: cp   $01]
	bne.b	0f
	rts                                    	| [$1d89: ret  z] return immediately if player dies
0:
	move.b	player_in_wagon_flag_6029,d0    	| [$1d8a: ld   a,(player_in_wagon_flag_6029)]
	cmp.b	#0x01,d0                         	| [$1d8d: cp   $01]
	bne.b	0f
	rts                                    	| [$1d8f: ret  z]
0:
	lea	player_x_6582,a2               	| [$1d90: ld   ix,player_x_6582]
	lea	wagon_data_658A,a3             	| [$1d94: ld   iy,wagon_data_658A]
	lea	unknown_6022,a0                	| [$1d98: ld   hl,unknown_6022]
	move.w	#0x0004,d3                      	| [$1d9b: ld   de,$0004] 4
	move.b	player_gripping_handle_602A,d0  	| [$1d9e: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$1da1: cp   $01]
	bne.b	0f
	rts                                    	| [$1da3: ret  z]  no collision if gripping handle
0:

* all 3 wagons
	jbsr	one_wagon_player_collision_1DB4   	| [$1da4: call one_wagon_player_collision_1DB4]
	addq.w	#1,a0                           	| [$1da7: inc  hl]
	add.w	d3,a3                            	| [$1da8: add  iy,de]
 	jbsr	one_wagon_player_collision_1DB4   	| [$1daa: call one_wagon_player_collision_1DB4]
	addq.w	#1,a0                           	| [$1dad: inc  hl]
	add.w	d3,a3                            	| [$1dae: add  iy,de]
	jbra	one_wagon_player_collision_1DB4   	| [$1db0: call one_wagon_player_collision_1DB4]
								| [$1db3: ret]

one_wagon_player_collision_1DB4:
	move.b	(0x01,a2),d0                    	| [$1db4: ld   a,(ix+$01)]
	addq.b	#1,d0                           	| [$1db7: inc  a]
	cmp.b	(0x01,a3),d0                     	| [$1db8: cp   (iy+$01)]
	beq.b	0f
	rts                                    	| [$1dbb: ret  nz]
0:
	move.b	(0x00,a3),d0                    	| [$1dbc: ld   a,(iy+$00)]
	sub.b	#0x0D,d0                         	| [$1dbf: sub  $0D]
	move.b	d0,d1                           	| [$1dc1: ld   b,a]
	addq.b	#0x04,d0                        	| [$1dc2: add  a,$04]
	move.b	d0,d2                           	| [$1dc4: ld   c,a]
* collision with wagon arriving by the right
	jbsr	l_1dde                            	| [$1dc5: call $1DDE]
	move.b	d0,player_death_flag_6025       	| [$1dc8: ld   (player_death_flag_6025),a]
	cmp.b	#0x01,d0                         	| [$1dcb: cp   $01]
	bne.b	0f
	rts                                    	| [$1dcd: ret  z]
0:
	move.b	(0x00,a3),d0                    	| [$1dce: ld   a,(iy+$00)]
	add.b	#0x0A,d0                         	| [$1dd1: add  a,$0A]
	move.b	d0,d1                           	| [$1dd3: ld   b,a]
	addq.b	#0x04,d0                        	| [$1dd4: add  a,$04]
	move.b	d0,d2                           	| [$1dd6: ld   c,a]
* collision with wagon arriving by the left
	jbsr	l_1dde                            	| [$1dd7: call $1DDE]
	move.b	d0,player_death_flag_6025       	| [$1dda: ld   (player_death_flag_6025),a]
	rts                                    	| [$1ddd: ret]

l_1dde:
	move.b	(0x00,a2),d0                    	| [$1dde: ld   a,(ix+$00)]
	cmp.b	d1,d0                            	| [$1de1: cp   b]
	jcs	l_1dea                             	| [$1de2: jr   c,$1DEA]
	cmp.b	d2,d0                            	| [$1de4: cp   c]
	jcc	l_1dea                             	| [$1de5: jr   nc,$1DEA]
* collision with wagon
	move.b	#0x01,d0                        	| [$1de7: ld   a,$01]
	rts                                    	| [$1de9: ret]
* no collision
l_1dea:
	clr.b	d0                               	| [$1dea: xor  a]
	rts                                    	| [$1deb: ret]


display_player_ids_and_credit_1dec:
	* display PLAYER 1
	lea	game_mem+0x5680,a1                      	| [$1dec: ld   de,$5680]
	move.w	#0x93A0,d6                      	| [$1def: ld   hl,$93A0]
	jbsr	display_text_30F9                 	| [$1df2: call display_text_30F9]

	* display PLAYER 1 again
	lea	game_mem+0x5680,a1                      	| [$1df5: ld   de,$5680]
	move.w	#0x9120,d6                      	| [$1df8: ld   hl,$9120]
	jbsr	display_text_30F9                 	| [$1dfb: call display_text_30F9]
	* display BONUS
	lea	game_mem+0x5705,a1                      	| [$1dfe: ld   de,$5705]
	move.w	#0x9240,d6                      	| [$1e01: ld   hl,$9240]
	jbsr	display_text_30F9                 	| [$1e04: call display_text_30F9]
	* "2" for PLAYER 2
	move.b	#0x02,d0                        	| [$1e07: ld   a,$02]
	move.w	#0x9040,d6                      	| [$1e09: ld   hl,$9040]
	jbsr	osd_w_videoram                         	| [$1e0c: ld   (hl),a]
	* display CREDIT followed by number of credits
	lea	game_mem+0x5689,a1                      	| [$1e0d: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$1e10: ld   hl,$919F]
	jbsr	display_text_30F9                 	| [$1e13: call display_text_30F9]
	move.b	fake_credit_digit_6004,d0                 	| [$1e16: ld   a,(unknown_6004)]
	move.w	#0x909F,d6
	jbsr	osd_w_videoram                       	| [$1e19: ld   ($909F),a]
	move.b	fake_credit_digit_6005,d0                 	| [$1e1c: ld   a,(unknown_6005)]
	move.w	#0x90BF,d6
	jbsr	osd_w_videoram                       	| [$1e1f: ld   ($90BF),a]

						| [$1e22: call $1E26] converted to fallthrough
						| [$1e25: ret]
l_1e26:
	move.b	#0x02,d0                        	| [$1e26: ld   a,$02]
	move.w	#0x9840,d6                      	| [$1e28: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605                            	| [$1e2b: call $5605]
	move.b	#0x08,d0                        	| [$1e2e: ld   a,$08]
	move.w	#0x985F,d6                      	| [$1e30: ld   hl,$985F]
	jbsr	write_attribute_on_line_5605                            	| [$1e33: call $5605]
	move.b	#0x05,d0                        	| [$1e36: ld   a,$05]
	move.w	#0x9841,d6                      	| [$1e38: ld   hl,$9841]
	jra	write_attribute_on_line_5605                            	| [$1e3b: call $5605]
	rts                                    	| [$1e3e: ret]


l_1e3f:
	move.b	fall_height_604D,d0             	| [$1e3f: ld   a,(fall_height_604D)]
	cmp.b	#0x12,d0                         	| [$1e42: cp   $12]
	jcs	l_1e64                             	| [$1e44: jr   c,$1E64]
	move.b	#0x01,d0                        	| [$1e46: ld   a,$01]
	move.b	d0,fatal_fall_height_reached_604E	| [$1e48: ld   (fatal_fall_height_reached_604E),a]
	move.w	player_logical_address_6009,d6	| [$1e4b: ld   hl,(player_logical_address_6009)]
	bsr		read_rom                         	| [$1e4e: ld   a,(hl)]
	cmp.b	#0xF8,d0                         	| [$1e4f: cp   $F8]

	move.l	a0,-(sp)                        	| [$1e51: push hl]
	lea	game_mem+0x1E67(pc),a0                      	| [$1e52: ld   hl,$1E67]
	move.w	#0x02,d1                        	| [$1e55: ld   bc,$0002] 2
	jbsr	cpdr                              	| [$1e58: cpdr]
	movem.l	(sp)+,a0                        	| [$1e5a: pop  hl]
	jne	l_1e68                             	| [$1e5b: jr   nz,$1E68]
	move.b	unknown_6014,d0                 	| [$1e5d: ld   a,(unknown_6014)]
	cmp.b	#0x01,d0                         	| [$1e60: cp   $01]
	jeq	l_1e70                             	| [$1e62: jr   z,$1E70]
l_1e64:
	clr.b	d0                               	| [$1e64: xor  a]
	rts                                    	| [$1e65: ret]

l_1e68:
	move.b	player_y_6583,d0                	| [$1e68: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$1e6b: sub  $02]
	move.b	d0,player_y_6583                	| [$1e6d: ld   (player_y_6583),a]
l_1e70:
	clr.b	d0                               	| [$1e70: xor  a]
	move.b	d0,unknown_6008                 	| [$1e71: ld   (unknown_6008),a]
	jbsr	l_1f50                            	| [$1e74: call $1F50]
	move.b	#0x01,d0                        	| [$1e77: ld   a,$01]
	rts                                    	| [$1e79: ret]

l_1e7a:
	move.b	gameplay_allowed_6054,d0        	| [$1e7a: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$1e7d: cp   $01]
	jeq	l_1e8d                             	| [$1e7f: jr   z,$1E8D]
	move.b	number_of_credits_6000,d0       	| [$1e81: ld   a,(number_of_credits_6000)]
	cmp.b	#0x00,d0                         	| [$1e84: cp   $00]
	jeq	l_1e8e                             	| [$1e86: jr   z,$1E8E]
	move.b	#0x01,d0                        	| [$1e88: ld   a,$01]
	move.b	d0,unknown_6053                 	| [$1e8a: ld   (unknown_6053),a]
l_1e8d:
	rts                                    	| [$1e8d: ret]
l_1e8e:
	clr.b	d0                               	| [$1e8e: ld   a,$00]
	move.b	d0,unknown_6053                 	| [$1e90: ld   (unknown_6053),a]
	rts                                    	| [$1e93: ret]


display_maze_1E94:
	move.b	unknown_6210,d0                 	| [$1e94: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$1e97: cp   $01]
	jne	l_1eaa                             	| [$1e99: jr   nz,$1EAA]
	jbsr	can_pick_bag_3DEB                 	| [$1e9b: call can_pick_bag_3DEB]
	jne	l_1eaa                             	| [$1e9e: jr   nz,$1EAA]
	lea	game_mem+0x5000,a0                      	| [$1ea0: ld   hl,$5000]
	move.l	a0,unknown_pointer_6140                 	| [$1ea3: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$1ea6: xor  a]
	move.b	d0,unknown_6142                 	| [$1ea7: ld   (unknown_6142),a]
l_1eaa:
											| [$1eaa: xor  a]
											| [$1eab: ld   ($A003),a]
	jbsr	l_284c                            	| [$1eae: call $284C]
	move.b	#0x01,d0                        	| [$1eb1: ld   a,$01]
	move.b	d0,unknown_6016                 	| [$1eb3: ld   (unknown_6016),a]
	jbsr	display_player_ids_and_credit_1dec	| [$1eb6: call display_player_ids_and_credit_1dec]

 * init player coordinates
	move.b	#0x01,d0                        	| [$1eb9: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$1ebb: ld   (player_screen_600D),a]
                      	| [$1ebe: ld   ($A003),a]
	move.b	#0x20,d0                        	| [$1ec1: ld   a,$20]
	lea	player_struct_6580,a0          	| [$1ec3: ld   hl,player_struct_6580]
	move.b	d0,(a0)+                         	| [$1ec6: ld   (hl),a]
	                           	| [$1ec7: inc  hl]
	move.b	#0x08,d0                        	| [$1ec8: ld   a,$08]
	move.b	d0,(a0)+                         	| [$1eca: ld   (hl),a]
	                           	| [$1ecb: inc  hl]
	move.b	#0x29,d0                        	| [$1ecc: ld   a,$29]
	move.b	d0,(a0)+                         	| [$1ece: ld   (hl),a]
	                           	| [$1ecf: inc  hl]
	move.b	#0xE0,d0                        	| [$1ed0: ld   a,$E0]
	move.b	d0,(a0)                         	| [$1ed2: ld   (hl),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$1ed3: ld   (player_in_wagon_flag_6029),a]
	move.b	#0x40,d0                        	| [$1ed6: ld   a,$40]
	move.b	d0,unknown_6165                 	| [$1ed8: ld   (unknown_6165),a]
	move.b	#0xC8,d0                        	| [$1edb: ld   a,$C8]
l_1edd:
	move.b	d0,unknown_6166                 	| [$1edd: ld   (unknown_6166),a]

l_1ee0:
	lea	holds_barrow_61C7,a1           	| [$1ee0: ld   de,holds_barrow_61C7]
	lea	game_mem+0x1F38,a0                      	| [$1ee3: ld   hl,$1F38]
	move.w	#0x18,d1                        	| [$1ee6: ld   bc,$0018] 24
	jbsr	ldir                              	| [$1ee9: ldir]
 	move.b	#0x40,d0                        	| [$1eeb: ld   a,$40]
	move.b	d0,time_61E8                    	| [$1eed: ld   (time_61E8),a]
	move.b	#0x01,d0                        	| [$1ef0: ld   a,$01]
	move.b	d0,extra_life_awarded_6286      	| [$1ef2: ld   (extra_life_awarded_6286),a]
	move.b	d0,unknown_6019                 	| [$1ef5: ld   (unknown_6019),a]
	move.b	#0xB0,d0                        	| [$1ef8: ld   a,$B0]
	move.b	d0,guard_2_x_659A               	| [$1efa: ld   (guard_2_x_659A),a]
	clr.w	d0                               	| [$1efd: xor  a]
	move.b	d0,unknown_6097                 	| [$1efe: ld   (unknown_6097),a]
	move.b	d0,unknown_6288                 	| [$1f01: ld   (unknown_6288),a]
	move.b	d0,unknown_6008                 	| [$1f04: ld   (unknown_6008),a]
	move.b	d0,unknown_6013                 	| [$1f07: ld   (unknown_6013),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$1f0a: ld   (player_in_wagon_flag_6029),a]
	move.b	d0,player_gripping_handle_602A  	| [$1f0d: ld   (player_gripping_handle_602A),a]
	move.b	d0,fatal_fall_height_reached_604E	| [$1f10: ld   (fatal_fall_height_reached_604E),a]
	move.b	d0,unknown_6077                 	| [$1f13: ld   (unknown_6077),a]
	move.b	d0,player_controls_frozen_6028  	| [$1f16: ld   (player_controls_frozen_6028),a]
	move.w	d0,pickaxe_timer_duration_61E0  	| [$1f19: ld   (pickaxe_timer_duration_61E0),a]
	                 	| [$1f1c: ld   (unknown_61E1),a]
	move.b	d0,unknown_6014                 	| [$1f1f: ld   (unknown_6014),a]
	move.b	d0,unknown_6013                 	| [$1f22: ld   (unknown_6013),a]
l_1f25:
	move.b	barrow_start_screen_address_61C4,d0                 	| [$1f25: ld   a,(barrow_start_screen_address_61C4)]
	cmp.b	#0x00,d0                         	| [$1f28: cp   $00]
	jeq	l_1f31                             	| [$1f2a: jr   z,$1F31]
	and.b	#0x02,d0                         	| [$1f2c: and  $02]
	cmp.b	#0x02,d0                         	| [$1f2e: cp   $02]
	bne.b	0f
	rts                                    	| [$1f30: ret  z]
0:
l_1f31:
	move.w   #0x91C2,d6                      	| [$1f31: ld   hl,$91C2]
	move.w	d6,barrow_start_screen_address_61C4                 	| [$1f34: ld   (barrow_start_screen_address_61C4),hl]
	rts                                    	| [$1f37: ret]

l_1f50:
	move.b	#0x01,d0                        	| [$1f50: ld   a,$01]
	move.b	d0,unknown_61F1                 	| [$1f52: ld   (unknown_61F1),a]
	jbsr	check_remaining_bags_3BBC         	| [$1f55: call check_remaining_bags_3BBC]
	move.b	d2,d0                           	| [$1f58: ld   a,c]
	cmp.b	#0x01,d0                         	| [$1f59: cp   $01]
	bne.b	0f
	jbsr	set_bags_coordinates_354f         	| [$1f5b: call z,set_bags_coordinates_354f]
0:
	move.b	current_player_617C,d0          	| [$1f5e: ld   a,(current_player_617C)]
	move.b	d0,unknown_626C                 	| [$1f61: ld   (unknown_626C),a]
	move.w	player_logical_address_6009,d6	| [$1f64: ld   hl,(player_logical_address_6009)]
	lea	unknown_6008,a3                	| [$1f67: ld   iy,unknown_6008]
	lea	player_struct_6580,a2          	| [$1f6b: ld   ix,player_struct_6580]
	jbsr	l_2605                            	| [$1f6f: call $2605]
	move.b	#0x01,d0                        	| [$1f72: ld   a,$01]
	move.b	d0,unknown_6151                 	| [$1f74: ld   (unknown_6151),a]
								| [$1f77: ld   (interrupt_control_A000),a]
	move.w	#0x045E,unknown_6154                      	| [$1f7a: ld   hl,$045E]
	                 	| [$1f7d: ld   (unknown_6154),hl]
	lea	game_mem+0x3EF7,a0                      	| [$1f80: ld   hl,$3EF7]
	clr.b	d0                               	| [$1f83: xor  a]
	move.b	d0,unknown_6152                 	| [$1f84: ld   (unknown_6152),a]
    jbsr	osd_enable_vblank_interrupt
	jbsr	l_2018                            	| [$1f88: call $2018]
	lea	game_mem+0x5B38,a0                      	| [$1f8b: ld   hl,$5B38]
	move.l	a0,unknown_pointer_6140                 	| [$1f8e: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$1f91: xor  a]
	move.b	d0,unknown_6142                 	| [$1f92: ld   (unknown_6142),a]
l_1f95:
	move.b	unknown_6152,d0                 	| [$1f95: ld   a,(unknown_6152)]
	cmp.b	#0x01,d0                         	| [$1f98: cp   $01]
	jne	l_1f95                             	| [$1f9a: jr   nz,$1F95]
	jbsr	start_new_life_2026               	| [$1f9c: call start_new_life_2026]
	lea	unknown_659C,a2                	| [$1f9f: ld   ix,unknown_659C]
	move.b	d0,(0x00,a2)                    	| [$1fa3: ld   (ix+$00),a]
	move.b	d0,(0x01,a2)                    	| [$1fa6: ld   (ix+$01),a]
	move.b	d0,(0x02,a2)                    	| [$1fa9: ld   (ix+$02),a]
	st.b	d0                                	| [$1fac: ld   a,$FF]
	move.b	d0,(0x03,a2)                    	| [$1fae: ld   (ix+$03),a]
	clr.b	d0                               	| [$1fb1: xor  a]
	move.b	d0,has_bag_6158                 	| [$1fb2: ld   (has_bag_6158),a]
	move.b	d0,holds_barrow_61C7            	| [$1fb5: ld   (holds_barrow_61C7),a]
	move.b	unknown_617D,d0                 	| [$1fb8: ld   a,(unknown_617D)]
	cmp.b	#0x01,d0                         	| [$1fbb: cp   $01]
	jeq	l_1fd3                             	| [$1fbd: jr   z,$1FD3]
	move.b	current_player_617C,d0          	| [$1fbf: ld   a,(current_player_617C)]
	addq.b	#0x01,d0                        	| [$1fc2: add  a,$01]
	and.b	#0x01,d0                         	| [$1fc4: and  $01]
	move.b	d0,current_player_617C          	| [$1fc6: ld   (current_player_617C),a]
	move.b	unknown_617D,d0                 	| [$1fc9: ld   a,(unknown_617D)]
	move.b	d0,d1                           	| [$1fcc: ld   b,a]
	cmp.b	#0x02,d0                         	| [$1fcd: cp   $02]
	move.b	d1,d0                           	| [$1fcf: ld   a,b]
	bne.b	0f
	jbsr	l_2a70                            	| [$1fd0: call z,$2A70]
0:
l_1fd3:
	move.b	lives_6056,d0                   	| [$1fd3: ld   a,(lives_6056)]
	cmp.b	#0x00,d0                         	| [$1fd6: cp   $00]
	jne	l_1ff5                             	| [$1fd8: jr   nz,$1FF5]
	move.b	current_player_617C,d0          	| [$1fda: ld   a,(current_player_617C)]
	addq.b	#0x01,d0                        	| [$1fdd: add  a,$01]
	and.b	#0x01,d0                         	| [$1fdf: and  $01]
	move.b	d0,current_player_617C          	| [$1fe1: ld   (current_player_617C),a]
	move.b	unknown_617D,d0                 	| [$1fe4: ld   a,(unknown_617D)]
	move.b	d0,d1                           	| [$1fe7: ld   b,a]
	cmp.b	#0x02,d0                         	| [$1fe8: cp   $02]
	move.b	d1,d0                           	| [$1fea: ld   a,b]
	bne.b	0f
	jbsr	l_2a70                            	| [$1feb: call z,$2A70]
0:
	move.b	lives_6056,d0                   	| [$1fee: ld   a,(lives_6056)]
	                         	| [$1ff1: cp   $00]
	jeq	l_205c                             	| [$1ff3: jr   z,$205C]
l_1ff5:
	subq.b	#1,d0                           	| [$1ff5: dec  a]
	move.b	d0,lives_6056                   	| [$1ff6: ld   (lives_6056),a]
	jbsr	l_3591                            	| [$1ff9: call $3591]
	clr.b	d0                               	| [$1ffc: xor  a]
	move.b	d0,unknown_6008                 	| [$1ffd: ld   (unknown_6008),a]
	move.b	d0,fatal_fall_height_reached_604E	| [$2000: ld   (fatal_fall_height_reached_604E),a]
	move.b	d0,fall_height_604D             	| [$2003: ld   (fall_height_604D),a]
	move.b	d0,unknown_608F                 	| [$2006: ld   (unknown_608F),a]
	move.b	d0,unknown_6077                 	| [$2009: ld   (unknown_6077),a]
	move.b	d0,unknown_6037                 	| [$200c: ld   (unknown_6037),a]
	move.b	d0,unknown_604F                 	| [$200f: ld   (unknown_604F),a]
	jbsr	l_2957                            	| [$2012: call $2957]
	move.b	#0x01,d0                        	| [$2015: ld   a,$01]
	rts                                    	| [$2017: ret]
l_2018:
	lea	unknown_61BD,a1                	| [$2018: ld   de,unknown_61BD]
	moveq	#0x06,d1                        	| [$201b: ld   bc,$0006] 6
	jbsr	ldir                              	| [$201e: ldir]
	move.b	#0x01,d0                        	| [$2020: ld   a,$01]
	move.b	d0,unknown_61F3                 	| [$2022: ld   (unknown_61F3),a]
	rts                                    	| [$2025: ret]

start_new_life_2026:
	lea	unknown_6144,a2                	| [$2026: ld   ix,unknown_6144]
	clr.b	d0                               	| [$202a: ld   a,$00]
	move.b	#0x06,d1                        	| [$202c: ld   b,$06]
	jbsr	memset_2054                       	| [$202e: call memset_2054]  clear region 6144-6144+6
	clr.b	d0                               	| [$2031: xor  a]
* set everything player-related to 0
	move.b	d0,unknown_6152                 	| [$2032: ld   (unknown_6152),a]
	move.b	d0,unknown_6151                 	| [$2035: ld   (unknown_6151),a]
	move.b	d0,player_death_flag_6025       	| [$2038: ld   (player_death_flag_6025),a]
	move.b	d0,player_controls_frozen_6028  	| [$203b: ld   (player_controls_frozen_6028),a]
	move.b	d0,fatal_fall_height_reached_604E	| [$203e: ld   (fatal_fall_height_reached_604E),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$2041: ld   (player_in_wagon_flag_6029),a]
	move.b	d0,unknown_6013                 	| [$2044: ld   (unknown_6013),a]
	move.b	d0,fall_height_604D             	| [$2047: ld   (fall_height_604D),a]
	move.b	d0,unknown_6159                 	| [$204a: ld   (unknown_6159),a]
	move.b	d0,unknown_615E                 	| [$204d: ld   (unknown_615E),a]
	move.b	d0,holds_barrow_61C7            	| [$2050: ld   (holds_barrow_61C7),a]
	rts                                    	| [$2053: ret]

* < b number of bytes to set to a
memset_2054:
0:
	move.b	d0,(a2)+                    	| [$2054: ld   (ix+$00),a]
										| [$2057: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	0b                             	| [$2059: djnz $2054]
	rts                                    	| [$205b: ret]

l_205c:
	move.w	#0x926E,d6                      	| [$205c: ld   hl,$926E]
	lea		game_mem+0x56A1,a1                      	| [$205f: ld   de,$56A1]
	* "GAME OVER"
	jbsr	display_text_30F9                 	| [$2062: call display_text_30F9]
	clr.b	d0                               	| [$2065: xor  a]
	move.b	d0,gameplay_allowed_6054        	| [$2066: ld   (gameplay_allowed_6054),a]
	* ???? sound?
*	move.b	#0x0A,d1                        	| [$2069: ld   b,$0A]
*l_206b:
*	lea	game_mem+0x3000,a0                      	| [$206b: ld   hl,$3000]
*l_206e:
*	subq.b	#1,a0                           	| [$206e: dec  hl]
*	jbsr	osd_enable_vblank_interrupt  | ei
*	move.b	#0x01,d0                        	| [$2070: ld   a,$01]
*	move.b	d0,unknown_6053                 	| [$2072: ld   (unknown_6053),a]
*	move.b	d0,unknown_61F1                 	| [$2075: ld   (unknown_61F1),a]
*	move.b	d5,d0                           	| [$2078: ld   a,h]
*	cmp.b	#0x00,d0                         	| [$2079: cp   $00]
*	jne	l_206e                             	| [$207b: jr   nz,$206E]
*	subq.b	#1,d1                           	| [...]
*	jne	l_206b                             	| [$207d: djnz $206B]
	jbsr	l_2d03                            	| [$207f: call $2D03]
	clr.b	d0                               	| [$2082: xor  a]
	move.b	d0,unknown_6210                 	| [$2083: ld   (unknown_6210),a]
	move.b	number_of_credits_6000,d0       	| [$2086: ld   a,(number_of_credits_6000)]
										| [$2089: cp   $00]
	jne	l_20c9                             	| [$208b: jr   nz,$20C9]
	jbsr	l_2103                            	| [$208d: call $2103]
	* "INSERT COIN"
	lea	game_mem+0x56AC(pc),a1                      	| [$2090: ld   de,$56AC]
	move.w	#0x935A,d6                      	| [$2093: ld   hl,$935A]
	jbsr	display_text_30F9                 	| [$2096: call display_text_30F9]
	* "BY VALADON AUTOMATION 1982"
	lea	game_mem+0x20E6,a1                      	| [$2099: ld   de,$20E6]
	move.w	#0x93B5,d6                      	| [$209c: ld   hl,$93B5]
	jbsr	display_text_55d9                 	| [$209f: call display_text_55d9]
	move.b	#0x0E,d0                        	| [$20a2: ld   a,$0E]
	move.w	#0x989A,d6                      	| [$20a4: ld   hl,$989A]
	jbsr	write_attribute_on_line_5605      	| [$20a7: call write_attribute_on_line_5605]
	move.b	#0x03,d0                        	| [$20aa: ld   a,$03]
	move.w	#0x9855,d6                      	| [$20ac: ld   hl,$9855]
	jbsr	write_attribute_on_line_5605      	| [$20af: call write_attribute_on_line_5605]
	move.b	#0x11,d0                        	| [$20b2: ld   a,$11]
	move.w	#0x9BB5,d6                       	| [$20b4: ld   ($9BB5),a]
	jbsr	osd_w_videoram
 	jbsr	l_2f8d                            	| [$20b7: call $2F8D]
	* protection shit
*l_20ba:
*	move.w	#0x91B5,d6                       	| [$20ba: ld   a,($91B5)]
*	jbsr	osd_r_videoram
*
*	cmp.b	#0x1F,d0                         	| [$20bd: cp   $1F]
*	jne	l_20ba                             	| [$20bf: jr   nz,$20BA]
										| [$20c1: ld   a,$01]
										| [$20c3: ld   (interrupt_control_A000),a]
	* protection to avoid credits hacking ???
	*jbsr	l_2c34                            	| [$20c6: call $2C34]
l_20c9:
	jbsr	osd_disable_vblank_interrupt  | [di]
	jbsr	set_bags_coordinates_355b         	| [$20ca: call set_bags_coordinates_355b]
	jbsr	l_3567                            	| [$20cd: call $3567]
	jbsr	l_2a63                            	| [$20d0: call $2A63]
	clr.b	d0                               	| [$20d3: xor  a]
	move.b	d0,unknown_6053                 	| [$20d4: ld   (unknown_6053),a]
	move.b	d0,unknown_61F1                 	| [$20d7: ld   (unknown_61F1),a]
	move.b	number_of_credits_6000,d0       	| [$20da: ld   a,(number_of_credits_6000)]
	cmp.b	#0x00,d0                         	| [$20dd: cp   $00]
	bne.b	0f
	jbsr	play_intro_3700                   	| [$20df: call z,play_intro_3700]
0:
	jbsr	osd_enable_vblank_interrupt  |	ei
	move.b	#0x01,d0                        	| [$20e3: ld   a,$01]
	rts                                    	| [$20e5: ret]

l_2103:
	                     	| [$2103: ld   a,$00]
	                    	| [$2105: ld   ($A003),a]
	jbsr	clear_screen_2a00                 	| [$2108: call clear_screen_2a00]
	move.b	#0x30,d0                        	| [$210b: ld   a,$30]
	jbsr	change_attribute_everywhere_29ec  	| [$210d: call change_attribute_everywhere_29ec]
	move.b	#0x01,d1                        	| [$2110: ld   b,$01]
	lea	player_struct_6580,a0          	| [$2112: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$2115: ld   a,$00]
	jbsr	l_29f1                            	| [$2117: call $29F1]
	jbsr	display_player_ids_and_credit_1dec	| [$211a: call display_player_ids_and_credit_1dec]
                     	| [$211d: ld   a,$01]
                     	| [$211f: ld   ($A003),a]
	rts                                    	| [$2122: ret]


* put random direction (amongst $80,$40,$20,$10) in ($6095,ind)
choose_guard_random_direction_2123:
	moveq	#0,d0
	jbsr	osd_get_random       	| [$2123: ld   a,(vertical_beam_pos_A000)] random 0-3 direction
	lea	game_mem+0x5970,a0        	| [$2126: ld   hl,direction_table_5970]
	and.b	#0x03,d0                         	| [$2129: and  $03]
                       	| [$212b: add  a,l]
                         	| [$212c: ld   l,a]
                         	| [$212d: ld   a,h]

                          	| [$2130: ld   h,a]
	move.b	(a0,d0.w),d0                         	| [$2131: ld   a,(hl)]
	move.l	guard_direction_pointer_6095,a0	| [$2132: ld   hl,(guard_direction_pointer_6095)]
l_2135:
	move.b	d0,(a0)                         	| [$2135: ld   (hl),a]
	rts                                    	| [$2136: ret]

l_2137:
	move.b	unknown_6159,d0                 	| [$2137: ld   a,(unknown_6159)]
	cmp.b	#0x01,d0                         	| [$213a: cp   $01]
	bne.b	0f                               	| [$213c: ret  z] [...]
	rts                                    	| [$213c: ret  z]
0:
	move.b	unknown_615E,d0                 	| [$213d: ld   a,(unknown_615E)]
	cmp.b	#0x01,d0                         	| [$2140: cp   $01]
	bne.b	0f                               	| [$2142: ret  z] [...]
	rts                                    	| [$2142: ret  z]
0:
	move.b	(a4),d0                         	| [$2143: ld   a,(bc)]
	jbsr	exx                               	| [$2144: exx]
                         	| [$2145: cp   $00]
	jne	l_21a7                             	| [$2147: jp   nz,$21A7]
	move.w	player_logical_address_6009,d6	| [$214a: ld   hl,(player_logical_address_6009)]
	move.b	player_screen_600D,d0           	| [$214d: ld   a,(player_screen_600D)]
	cmp.b	(0x02,a3),d0                     	| [$2150: cp   (iy+$02)]
	beq.b	0f                               	| [$2153: ret  nz] [...]
	rts                                    	| [$2153: ret  nz]
0:
	LOAD_AX_BE_WORD_DY	a3,d3
	                   	| [$2154: ld   d,(iy+$01)]
	                   	| [$2157: ld   e,(iy+$00)]
	movem.w	d3/d4,-(sp)                    	| [$215a: push de]
	addq.w	#2,d3                           	| [$215b: inc  de] * 2
	jbsr	compute_backbuffer_tile_address_1945	| [$215d: call compute_backbuffer_tile_address_1945]

	                    	| [$2160: push hl]
	                     	| [$2161: xor  a]
	cmp.w	d3,d6			| sbc  hl,de
	                       	| [$2164: pop  hl]
	jeq	l_216e                             	| [$2165: jr   z,$216E]
	jbsr	l_3585                            	| [$2167: call $3585]
	movem.w	(sp)+,d3/d4                    	| [$216c: pop  de]
	jeq	l_216e                             	| [$216a: jr   z,$216E]
	rts                                    	| [$216d: ret]
l_216e:
                   	| [$216e: pop  de]
	jbsr	test_pickup_flag_19A4             	| [$216f: call test_pickup_flag_19A4]
	move.b	d1,d0                           	| [$2172: ld   a,b]
	                       	| [$2173: cp   $00]
	bne.b	0f                               	| [$2175: ret  z] [...]
	rts                                    	| [$2175: ret  z]
0:

l_2176:
	move.b	d3,d5                           	| [$2176: ld   h,d]
	move.b	d4,d6                           	| [$2177: ld   l,e]
	move.b	d3,dropped_bag_screen_address_61F6	| [$2178: ld   (dropped_bag_screen_address_61F6),hl]
	move.b	d4,dropped_bag_screen_address_61F6+1	| [$2178: ld   (dropped_bag_screen_address_61F6),hl]
	clr.b	d0                               	| [$217b: xor  a]
	move.b	d0,unknown_627E                 	| [$217c: ld   (unknown_627E),a]
	lea	player_struct_6580,a2          	| [$217f: ld   ix,player_struct_6580]
	move.b	(0x04,a3),d0                    	| [$2183: ld   a,(iy+$04)]
	move.b	d0,(0x1c,a2)                    	| [$2186: ld   (ix+$1c),a]
	move.b	(0x05,a3),d0                    	| [$2189: ld   a,(iy+$05)]
	move.b	d0,(0x1d,a2)                    	| [$218c: ld   (ix+$1d),a]
	clr.b	d0                               	| [$218f: xor  a]
	move.b	d0,(0x00,a3)                    	| [$2190: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$2193: ld   (iy+$01),a]
	move.b	(0x04,a3),d0                    	| [$2196: ld   a,(iy+$04)]
	cmp.b	#0x37,d0                         	| [$2199: cp   $37]
	jne	l_21a2                             	| [$219b: jr   nz,$21A2]
	move.b	#0x01,d0                        	| [$219d: ld   a,$01]
	move.b	d0,(0x14,a3)                    	| [$219f: ld   (iy+$14),a]
l_21a2:
	move.b	#0x01,d0                        	| [$21a2: ld   a,$01]
	bsr		exx
	move.b	d0,(a4)                         	| [$21a5: ld   (bc),a]
	rts                                    	| [$21a6: ret]


l_21a7:
	move.b	(0x00,a3),d0                    	| [$21a7: ld   a,(iy+$00)]
	                         	| [$21aa: cp   $00]
	beq.b	0f                               	| [$21ac: ret  nz] [...]
	rts                                    	| [$21ac: ret  nz]
0:
	move.b	player_x_6582,d0                	| [$21ad: ld   a,(player_x_6582)]
	cmp.b	#0xD0,d0                         	| [$21b0: cp   $D0]
	bcs.b	0f                               	| [$21b2: ret  nc] [...]
	rts                                    	| [$21b2: ret  nc]
0:
	jbsr	test_pickup_flag_19A4             	| [$21b3: call test_pickup_flag_19A4]
	move.b	d1,d0                           	| [$21b6: ld   a,b]
	                         	| [$21b7: cp   $00]
	bne.b	0f                               	| [$21b9: ret  z] [...]
	rts                                    	| [$21b9: ret  z]
0:

l_21ba:
	lea	unknown_659C,a2                	| [$21ba: ld   ix,unknown_659C]
	move.b	player_screen_600D,d0           	| [$21be: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$21c1: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c                            	| [$21c4: call $558C]

	movem.w	d5/d6,-(sp)                        	| [$21c7: push hl]
	move.b	player_screen_600D,d0           	| [$21c8: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$21cb: ld   (iy+$02),a]
	jbsr	convert_logical_to_screen_address_222d                            	| [$21ce: call $222D]
												| [$21d1: ld   h,a]
												| [$21d2: xsor  a]
												| [$21d3: ld   a,l]
	sub.w	#0x22,d6							| [$21d4: sub  $22]
												| [$21d6: ld   l,a]
												| [$21d7: ld   a,h]
					
											| [$21d8: sbc  a,$00]
												| [$21da: ld   h,a]
	STORE_DX_BE_WORD_AY	d6,a3
	

	                 	| [$21de: ld   (iy+$01),h]
	
	
	                 	| [$21db: ld   (iy+$00),l]
	move.b	player_screen_600D,d0           	| [$21e1: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$21e4: ld   (iy+$02),a]
	movem.w	d1/d2,-(sp)                    	| [$21e7: push bc]
	jbsr	test_non_blocking_tiles_3c85                            	| [$21e8: call $3C85]
	move.b	d1,d0                           	| [$21eb: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$21ec: pop  bc]
	cmp.b	#0x00,d0                         	| [$21ed: cp   $00]
	jeq	l_3cb7                             	| [$21ef: jp   z,$3CB7]
	movem.w	(sp)+,d5/d6                        	| [$21f2: pop  hl]

	bsr	read_rom                         	| [$21f3: ld   a,(hl)]

	move.w	d6,-(sp)                        	| [$21f6: push hl]
	cmp.b	#0xE0,d0                         	| [$21f4: cp   $E0]
	jeq	l_3cb7                             	| [$21f7: jp   z,$3CB7]
	movem.w	(sp),d6                        	| [$21fa: pop  hl]

											| [$21fb: push hl]
	                               	| [$21fc: xor  a]
	                           	| [$21fd: ld   a,l]
	sub.w	#0x20,d6                         	| [$21fe: sub  $20]
												| [$2200: ld   a,h]
					
											| [$2201: sbc  a,$00]
												| [$2203: ld   h,a]
	move.w	(sp)+,d6                        	| [$2204: pop  hl]
	bsr	read_rom                         	| [$2205: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$2206: cp   $E0]
	bne.b	0f
	rts                                    	| [$2208: ret  z]
0:
	bsr		exx
	move.b	holds_barrow_61C7,d0                 	| [$220a: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$220d: cp   $01]
	jne	l_2216                             	| [$220f: jr   nz,$2216]
	move.b	#0x28,d0                        	| [$2211: ld   a,$28]
	exg	d0,d7                              	| [$2213: ex   af,af']
	jra	l_2219                             	| [$2214: jr   $2219]
l_2216:
	move.b	#0x20,d0                        	| [$2216: ld   a,$20]
	exg	d0,d7                              	| [$2218: ex   af,af']
l_2219:
	clr.b	d0                               	| [$2219: xor  a]
	move.b	d0,(a4)                         	| [$221a: ld   (bc),a]
	LOAD_AX_BE_WORD_DY	a3,d6
											| [$221e: ld   h,(iy+$01)]
						
											| [$221b: ld   l,(iy+$00)]
	move.b	(0x06,a3),d0                    	| [$2221: ld   a,(iy+$06)]
	jbsr	draw_wheelbarrow_tiles_3417                            	| [$2224: call $3417]
	st.b	d0                                	| [$2227: ld   a,$FF]
	move.b	d0,unknown_659F                 	| [$2229: ld   (unknown_659F),a]
	rts                                    	| [$222c: ret]

* < D0 character screen
* < D6 logical address
* > D6 adjusted screen address
convert_logical_to_screen_address_222d:
	cmp.b	#0x01,d0                         	| [$222d: cp   $01]
	jne	l_2235                             	| [$222f: jr   nz,$2235]
	move.w	d6,d0                           	| [$2231: ld   a,h]
	add.w	#0x5000,d0                         	| [$2232: add  a,$50]
	rts                                    	| [$2234: ret]
l_2235:
	cmp.b	#0x02,d0                         	| [$2235: cp   $02]
	jne	l_223d                             	| [$2237: jr   nz,$223D]
	move.w	d6,d0                           	| [$2239: ld   a,h]
	add.w	#0x4C00,d0                         	| [$223a: add  a,$4C]
	rts                                    	| [$223c: ret]
l_223d:
	move.w	d6,d0                           	| [$223d: ld   a,h]
	add.w	#0x4800,d0                         	| [$223e: add  a,$48]
	rts                                    	| [$2240: ret]

l_2241:
	lea	unknown_6156,a3                	| [$2241: ld   iy,unknown_6156]
	move.b	(0x00,a3),d0                    	| [$2245: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$2248: cp   $01]
	bne.b	0f
	rts                                    	| [$224a: ret  z]
0:
	move.b	guard_1_screen_6099,d0          	| [$224b: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$224e: ld   (screen_index_param_6098),a]

	move.l	a2,-(sp)                        	| [$2251: push ix]
	move.w	#0x500,d6                      	| [$2253: ld   hl,$0500]
	jbsr	add_to_score_5C90                 	| [$2256: call add_to_score_5C90]
	lea	game_mem+0x3F09,a0                      	| [$2259: ld   hl,$3F09]
	jbsr	l_2018                            	| [$225c: call $2018]
	move.l	(sp)+,a2                        	| [$225f: pop  ix]
	sub.l	a4,a4		| added to avoid issues
	jbsr	l_3dbe                            	| [$2261: call $3DBE]
	clr.b	d0                               	| [$2264: xor  a]
	move.b	d0,unknown_6057                 	| [$2265: ld   (unknown_6057),a]
	move.b	#0x21,d0                        	| [$2268: ld   a,$21]
	move.b	d0,guard_1_struct_6594          	| [$226a: ld   (guard_1_struct_6594),a]
	move.l	guard_1_logical_address_6038,d6	| [$226d: ld   hl,(guard_1_logical_address_6038)]
	lea	unknown_6037,a3                	| [$2270: ld   iy,unknown_6037]
	lea	guard_1_struct_6594,a2         	| [$2274: ld   ix,guard_1_struct_6594]
	jbra	l_2605                            	| [$2278: call $2605]
	rts                                    	| [$227b: ret]

l_227c:
	lea	unknown_6157,a3                	| [$227c: ld   iy,unknown_6157]
	move.b	(0x00,a3),d0                    	| [$2280: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$2283: cp   $01]
	bne.b	0f
	rts                                    	| [$2285: ret  z]
0:
	move.b	guard_2_screen_609A,d0          	| [$2286: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$2289: ld   (screen_index_param_6098),a]

	move.l	a2,-(sp)                        	| [$228c: push ix]
	move.w	#0x0500,d6                      	| [$228e: ld   hl,$0500]
	jbsr	add_to_score_5C90                 	| [$2291: call add_to_score_5C90]
	lea	game_mem+0x3F09,a0                      	| [$2294: ld   hl,$3F09]
	jbsr	l_2018                            	| [$2297: call $2018]
	move.l	(sp)+,a2                        	| [$229a: pop  ix]
	jbsr	l_3dbe                            	| [$229c: call $3DBE]
	clr.b	d0                               	| [$229f: xor  a]
	move.b	d0,unknown_6097                 	| [$22a0: ld   (unknown_6097),a]
	move.b	#0x21,d0                        	| [$22a3: ld   a,$21]
	move.b	d0,guard_2_struct_6598          	| [$22a5: ld   (guard_2_struct_6598),a]
	move.w	guard_2_logical_address_6078,d6	| [$22a8: ld   hl,(guard_2_logical_address_6078)]
	lea	unknown_6077,a3                	| [$22ab: ld   iy,unknown_6077]
	lea	guard_2_struct_6598,a2         	| [$22af: ld   ix,guard_2_struct_6598]
	jbsr	l_2605                            	| [$22b3: call $2605]
	rts                                    	| [$22b6: ret]

l_22b7:
	movem.w	d1/d2,-(sp)                    	| [$22b7: push bc]

	move.l	a3,-(sp)                        	| [$22b8: push iy]

	move.l	a2,-(sp)                        	| [$22ba: push ix]
	move.b	#0x03,d1                        	| [$22bc: ld   b,$03]
	lea	unknown_61CC,a2                	| [$22be: ld   ix,unknown_61CC]
l_22c2:
	move.b	(a2),d0                    	| [$22c2: ld   a,(ix+$00)]
	exg	d0,d7                              	| [$22c5: ex   af,af']
 	move.b	(a3),d0                    	| [$22c6: ld   a,(iy+$00)]
	move.b	d0,(a2)+                    	| [$22c9: ld   (ix+$00),a]
	exg	d0,d7                              	| [$22cc: ex   af,af']
	move.b	d0,(a3)+                    	| [$22cd: ld   (iy+$00),a]
	                           	| [$22d0: inc  ix]
	                           	| [$22d2: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_22c2                             	| [$22d4: djnz $22C2]
	move.l	(sp)+,a2                        	| [$22d6: pop  ix]
	move.l	(sp)+,a3                        	| [$22d8: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$22da: pop  bc]
	rts                                    	| [$22db: ret]

l_22dc:
	lea	bags_coordinates_609C,a2       	| [$22dc: ld   ix,bags_coordinates_609C]
	move.b	#0x04,d0                        	| [$22e0: ld   a,$04]
	move.b	d0,unknown_627A                 	| [$22e2: ld   (unknown_627A),a]
	move.b	#0x13,d1                        	| [$22e5: ld   b,$13]
l_22e7:

	move.l	a2,-(sp)                        	| [$22e7: push ix]
	movem.w	d1/d2,-(sp)                    	| [$22e9: push bc]
	jbsr	draw_bag_3151                            	| [$22ea: call $3151]

	movem.w	(sp)+,d1/d2                    	| [$22ed: pop  bc]
	move.l	(sp)+,a2                        	| [$22ee: pop  ix]
	addq.w	#3,a2                           	| [$22f0: inc  ix] * 3
	move.b	#0x01,d0                        	| [$22f6: ld   a,$01]
	move.b	d0,unknown_627A                 	| [$22f8: ld   (unknown_627A),a]
	subq.b	#1,d1                           	| [...]
	jne	l_22e7                             	| [$22fb: djnz $22E7]
	move.b	holds_barrow_61C7,d0            	| [$22fd: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$2300: cp   $01]
	jeq	l_2320                             	| [$2302: jr   z,$2320]
	move.b	player_screen_600D,d0           	| [$2304: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$2307: ld   b,a]
	lea	barrow_start_screen_address_61C4,a3                	| [$2308: ld   iy,barrow_start_screen_address_61C4]
	move.b	(0x02,a3),d0                    	| [$230c: ld   a,(iy+$02)]
	cmp.b	d1,d0                            	| [$230f: cp   b]
	jne	l_2320                             	| [$2310: jr   nz,$2320]
	
	LOAD_AX_BE_WORD_DY	a3,d6		| [$2315: ld   h,(iy+$01)]
									| [$2312: ld   l,(iy+$00)]
	move.b	#0x28,d0                        	| [$2318: ld   a,$28]
	exg	d0,d7                              	| [$231a: ex   af,af']
	move.b	#0xEC,d0                        	| [$231b: ld   a,$EC]
	jbsr	draw_wheelbarrow_tiles_3417                            	| [$231d: call $3417]
l_2320:
	move.b	player_screen_600D,d0           	| [$2320: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$2323: ld   b,a]
	lea	unknown_61CC,a3                	| [$2324: ld   iy,unknown_61CC]
	move.b	(0x02,a3),d0                    	| [$2328: ld   a,(iy+$02)]
	cmp.b	d1,d0                            	| [$232b: cp   b]
	jne	l_2350                             	| [$232c: jr   nz,$2350]
							
	LOAD_AX_BE_WORD_DY	a3,d6                  	| [$232e: ld   l,(iy+$00)]
												| [$2331: ld   h,(iy+$01)]
	jbsr	osd_r_videoram                         	| [$2334: ld   a,(hl)]
	jbsr	is_background_tile_3573                            	| [$2335: call $3573]
	jne	l_2350                             	| [$2338: jr   nz,$2350]

	move.l	a0,-(sp)                        	| [$233a: push hl]
	movem.w	d3/d4,-(sp)                    	| [$233b: push de]
	move.w	#0x0020,d3                      	| [$233c: ld   de,$0020] 32
	add.w	d3,d6                            	| [$233f: add  hl,de]
	jbsr	osd_r_videoram                         	| [$2340: ld   a,(hl)]
	jbsr	is_background_tile_3573                            	| [$2341: call $3573]
	movem.w	(sp)+,d3/d4                    	| [$2344: pop  de]
	move.l	(sp)+,a0                        	| [$2345: pop  hl]
	jne	l_2350                             	| [$2346: jr   nz,$2350]
	move.b	#0x20,d0                        	| [$2348: ld   a,$20]
	exg	d0,d7                              	| [$234a: ex   af,af']
	move.b	#0xE4,d0                        	| [$234b: ld   a,$E4]
	jbsr	draw_wheelbarrow_tiles_3417                            	| [$234d: call $3417]
l_2350:
	move.b	#0x04,d1                        	| [$2350: ld   b,$04]
	lea	unknown_61D3,a3                	| [$2352: ld   iy,unknown_61D3]
	lea	unknown_61CC,a1                	| [$2356: ld   de,unknown_61CC]
l_2359:
	movem.w	d1/d2,-(sp)                    	| [$2359: push bc]

	move.l	a3,-(sp)                        	| [$235a: push iy]
l_235c:
	movem.w	d3/d4,-(sp)                    	| [$235c: push de]
	move.l	a1,-(sp)                        	| [$235c: push de]
	jbsr	l_22b7                           	| [$235d: call $22B7]
	* decode screen address
	move.b	(a1)+,d0                         	| [$2360: ld   a,(de)]
	move.b	d0,d6                           	| [$2361: ld   l,a]
	                           	| [$2362: inc  de]
	move.b	(a1),d0                         	| [$2363: ld   a,(de)]
	move.b	d0,d5                           	| [$2364: ld   h,a]
	lsl.w	#8,d5
	move.b	d6,d5
	move.w	d5,d6		| screen address
	subq.b	#1,a1                           	| [$2365: dec  de]
	move.b	player_screen_600D,d0           	| [$2366: ld   a,(player_screen_600D)]
	move.l	(sp),a3                        	| [$2369: pop  iy]
	cmp.b	(0x02,a3),d0                     	| [$236b: cp   (iy+$02)]

	                        	| [$236e: push iy]
	jne	l_238e                             	| [$2370: jr   nz,$238E]
* read screen tile
	jbsr	osd_r_videoram                         	| [$2372: ld   a,(hl)]
	jbsr	is_background_tile_3573                            	| [$2373: call $3573]
	jne	l_238e                             	| [$2376: jr   nz,$238E]

	move.w	d6,-(sp)                        	| [$2378: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2379: push de]
	move.w	#0x0020,d3                      	| [$237a: ld   de,$0020] 32
	add.w	d3,d6                            	| [$237d: add  hl,de]
* read screen tile
	jbsr	osd_r_videoram                         	| [$237e: ld   a,(hl)]
	jbsr	is_background_tile_3573                            	| [$237f: call $3573]
	movem.w	(sp)+,d3/d4                    	| [$2382: pop  de]
	movem.w	(sp)+,d6                        	| [$2383: pop  hl]
	jne	l_238e                             	| [$2384: jr   nz,$238E]
	move.b	#0x20,d0                        	| [$2386: ld   a,$20]
	exg	d0,d7                              	| [$2388: ex   af,af']
	move.b	#0xE4,d0                        	| [$2389: ld   a,$E4]
	jbsr	draw_wheelbarrow_tiles_3417                            	| [$238b: call $3417]
l_238e:
	move.l	(sp)+,a1                        	| [$238e: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$238e: pop  de]
	move.l	(sp)+,a3                        	| [$238f: pop  iy]

	movem.w	(sp)+,d1/d2                    	| [$2391: pop  bc]
	addq.w	#3,a3                           	| [$2392: inc  iy] * 3
l_2398:
	subq.b	#1,d1                           	| [...]
	jne	l_2359                             	| [$2398: djnz $2359]
	rts                                    	| [$239a: ret]
	subq.b	#1,d1                           	| [...]
	jne	l_235c                             	| [$239b: djnz $235C]
	rts                                    	| [$239d: ret]


l_2480:
	jra	l_29cb                             	| [$2480: jp   $29CB]
l_2483:
	jra	l_29dc                             	| [$2483: jp   $29DC]

l_2486:
	lea		stack_top_67F0,sp			| [ld   sp,stack_top_67F0]
	move.b	#0x3F,d0                        	| [$2489: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$248b: call $29EC]
	jbsr	clear_screen_2a00                            	| [$248e: call $2A00]
*	move.b	#0x01,d0                        	| [$2491: ld   a,$01]
*	move.b	d0,0xA003                       	| [$2493: ld   ($A003),a]
	lea	game_mem+0x3696,a0                      	| [$2496: ld   hl,$3696]
	lea	unknown_6217,a1                	| [$2499: ld   de,unknown_6217]
										| [$249c: ld   bc,$0050] 80
	move.w	#0x50,d1                        	| [$249c: ld   bc,$0050] 80
	jbsr	ldir                              	| [$249f: ldir]
	jra	l_121c                             	| [$24a1: jp   $121C]
l_24a4:
	move.b	unknown_6210,d0                 	| [$24a4: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$24a7: cp   $01]
	jne	l_24e9                             	| [$24a9: jr   nz,$24E9]
	move.b	unknown_626D,d0                 	| [$24ab: ld   a,(unknown_626D)]
	cmp.b	#0x20,d0                         	| [$24ae: cp   $20]
	bcc.b	0f
	jbsr	l_24bd                            	| [$24b0: call c,$24BD]
0:
	cmp.b	#0x30,d0                         	| [$24b3: cp   $30]
	bcc.b	0f
	jbsr	l_24f2                            	| [$24b5: call c,$24F2]
0:
	clr.b	d0                               	| [$24b8: xor  a]
	move.b	d0,unknown_626D                 	| [$24b9: ld   (unknown_626D),a]
	rts                                    	| [$24bc: ret]
l_24bd:
	move.b	unknown_626E,d0                 	| [$24bd: ld   a,(unknown_626E)]
	cmp.b	#0x01,d0                         	| [$24c0: cp   $01]
	jeq	l_24d7                             	| [$24c2: jr   z,$24D7]
	jbsr	get_XUP_screen_address_2501                            	| [$24c4: call $2501]
	jeq	l_24d9                             	| [$24c7: jr   z,$24D9]
	* display PLAYER 1
	lea	game_mem+0x575A,a1                      	| [$24c9: ld   de,$575A]
	jbsr	display_text_30F9                            	| [$24cc: call $30F9]
	jbsr	l_24e9                            	| [$24cf: call $24E9]
	move.b	#0x01,d0                        	| [$24d2: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$24d4: ld   (unknown_626E),a]
l_24d7:
	move.w	(sp)+,d0                        	| [$24d7: pop  af]
	rts                                    	| [$24d8: ret]
l_24d9:
	* display PLAYER2
	lea	game_mem+0x5763,a1                      	| [$24d9: ld   de,$5763]
	jbsr	display_text_30F9                            	| [$24dc: call $30F9]
	jbsr	l_24e9                            	| [$24df: call $24E9]
	move.b	#0x01,d0                        	| [$24e2: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$24e4: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$24e7: pop  af]
	rts                                    	| [$24e8: ret]
l_24e9:
	move.b	#0x02,d0                        	| [$24e9: ld   a,$02]
	move.w	#0x9840,d6                      	| [$24eb: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605                            	| [$24ee: call $5605]
	rts                                    	| [$24f1: ret]
l_24f2:
	jbsr	get_XUP_screen_address_2501                            	| [$24f2: call $2501]
	lea	game_mem+0x576C,a1                      	| [$24f5: ld   de,$576C]
	jbsr	display_text_30F9                            	| [$24f8: call $30F9]
	clr.b	d0                               	| [$24fb: xor  a]
	move.b	d0,unknown_626E                 	| [$24fc: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$24ff: pop  af]
	rts                                    	| [$2500: ret]
get_XUP_screen_address_2501:
	move.b	current_player_617C,d0          	| [$2501: ld   a,(current_player_617C)]
	move.w	#0x93A0,d6                     	| [$2504: ld   hl,$93A0]
	cmp.b	#0x01,d0                         	| [$2507: cp   $01]
	beq.b	0f
	rts                                    	| [$2509: ret  nz]
0:
	move.w	#0x9120,d6                     	| [$250a: ld   hl,$9120]
	rts                                    	| [$250d: ret]
	
l_250e:
	subq.w	#1,a0                           	| [$250e: dec  hl]
	jbsr	l_25c8                            	| [$250f: call $25C8]
	addq.w	#1,a0                           	| [$2512: inc  hl]
	jbsr	l_25c8                            	| [$2513: call $25C8]
	rts                                    	| [$2516: ret]

l_2517:
	move.b	player_screen_600D,d0           	| [$2517: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$251a: cp   $02]
	beq.b	0f
	rts                                    	| [$251c: ret  nz]
0:
	move.b	player_y_6583,d0                	| [$251d: ld   a,(player_y_6583)]
	cmp.b	#0xC0,d0                         	| [$2520: cp   $C0]
	beq.b	0f
	rts                                    	| [$2522: ret  nz]
0:
	move.b	player_x_6582,d0                	| [$2523: ld   a,(player_x_6582)]
	cmp.b	#0x40,d0                         	| [$2526: cp   $40]
	beq.b	0f
	rts                                    	| [$2528: ret  nz]
0:
	move.b	has_pick_61CF,d0                	| [$2529: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$252c: cp   $00]
	bne.b	0f
	rts                                    	| [$252e: ret  z]
0:
	move.b	unknown_659C,d0                 	| [$252f: ld   a,(unknown_659C)]
	cmp.b	#0xB8,d0                         	| [$2532: cp   $B8]
	jeq	l_2539                             	| [$2534: jr   z,$2539]
	cmp.b	#0xB7,d0                         	| [$2536: cp   $B7]
	beq.b	0f
	rts                                    	| [$2538: ret  nz]
0:
l_2539:
	move.w	#0x9318,d6                       	| [$2539: ld   a,($9318)]
	jbsr	osd_r_videoram
	cmp.b	#0xE0,d0                         	| [$253c: cp   $E0]
	bne.b	0f
	rts                                    	| [$253e: ret  z]
0:
	cmp.b	#0xE6,d0                         	| [$253f: cp   $E6]
	bne.b	0f
	rts                                    	| [$2541: ret  z]
0:
	cmp.b	#0xE4,d0                         	| [$2542: cp   $E4]
	bne.b	0f
	rts                                    	| [$2544: ret  z]
0:
	cmp.b	#0xD0,d0                         	| [$2545: cp   $D0]
	bne.b	0f
	rts                                    	| [$2547: ret  z]
0:
	move.w	#0x9318,d6                       	| [$2548: ld   a,($9318)]
 	jbsr	osd_r_videoram
	cmp.b	#0x02,d0                         	| [$254b: cp   $02]
	jeq	l_255a                             	| [$254d: jr   z,$255A]
	subq.b	#2,d0                           	| [$254f: dec  a] * 2
	move.w	#0x9318,d6                       	| [$2551: ld   ($9318),a]
	jbsr	osd_w_videoram
	subq.b	#1,d0                           	| [$2554: dec  a]
	move.w	#0x9319,d6                       	| [$2555: ld   ($9319),a]
	jbsr	osd_w_videoram
 	jra	l_2562                             	| [$2558: jr   $2562]
l_255a:
	move.b	#0xE0,d0                        	| [$255a: ld   a,$E0]
	move.w	#0x9318,d6                       	| [$255c: ld   ($9318),a]
	jbsr	osd_w_videoram
	move.w	#0x9319,d6                       	| [$255f: ld   ($9319),a]
	jbsr	osd_w_videoram
l_2562:
	move.w	#0x9318,d6                       	| [$2562: ld   a,($9318)
	jbsr	osd_r_videoram
	move.b	d0,unknown_627D                 	| [$2565: ld   (unknown_627D),a]
	rts                                    	| [$2568: ret]

l_2569:
	movem.w	d1/d2,-(sp)                    	| [$2569: push bc]

	move.l	a0,-(sp)                        	| [$256a: push hl]
	movem.w	d3/d4,-(sp)                    	| [$256b: push de]
	clr.b	d0                               	| [$256c: xor  a]
	move.b	d0,unknown_600B                 	| [$256d: ld   (unknown_600B),a]
	lea	game_mem+0x46FA,a1                      	| [$2570: ld   de,$46FA]
	cmp.w	d3,d6										| [sbc  hl,de]
	jne	l_2581                             	| [$2575: jr   nz,$2581]
	jbsr	l_25a1                            	| [$2577: call $25A1]
	jeq	l_2581                             	| [$257a: jr   z,$2581]
	move.b	#0x02,d0                        	| [$257c: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$257e: ld   (unknown_600B),a]
l_2581:
	movem.w	(sp)+,d3/d4                    	| [$2581: pop  de]
	move.l	(sp)+,a0                        	| [$2582: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$2583: pop  bc]
	rts                                    	| [$2584: ret]

l_2585:
	movem.w	d1/d2,-(sp)                    	| [$2585: push bc]

                        	| [$2586: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2587: push de]
	move.l	a1,-(sp)                        	| [$2587: push de]
	clr.b	d0                               	| [$2588: xor  a]
	move.b	d0,unknown_600B                 	| [$2589: ld   (unknown_600B),a]
	move.w	#0x473A,d3                      	| [$258c: ld   de,$473A]
	cmp.w	d3,d6			| sbc  hl,de
	jne	l_259d                             	| [$2591: jr   nz,$259D]
	jbsr	l_25a1                            	| [$2593: call $25A1]
	jeq	l_259d                             	| [$2596: jr   z,$259D]
	move.b	#0x02,d0                        	| [$2598: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$259a: ld   (unknown_600B),a]
l_259d:
	move.l	(sp)+,a1                        	| [$259d: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$259d: pop  de]
                        	| [$259e: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$259f: pop  bc]
	rts                                    	| [$25a0: ret]

l_25a1:
	move.w   #0x9318,d6                      	| [$25a1: ld   hl,$9318]
	jbsr	osd_r_videoram                         	| [$25a4: ld   a,(hl)]
	lea	game_mem+0x25AE,a0                      	| [$25a5: ld   hl,$25AE]
	move.w	#0x05,d1                        	| [$25a8: ld   bc,$0005] 5
	                        	| [$25a8: ld   bc,$0005] 5
	jbsr	cpir                              	| [$25ab: cpir]
 	rts                                    	| [$25ad: ret]

l_25b3:
	move.b	player_screen_600D,d0           	| [$25b3: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$25b6: cp   $02]
	beq.b	0f
	rts                                    	| [$25b8: ret  nz]
0:
	move.b	time_61E8,d0                    	| [$25b9: ld   a,(time_61E8)]
	cmp.b	#0x20,d0                         	| [$25bc: cp   $20]
	beq.b	0f
	rts                                    	| [$25be: ret  nz]
0:

	move.l	a0,-(sp)                        	| [$25bf: push hl]
	lea	game_mem+0x570F,a0                      	| [$25c0: ld   hl,$570F]
	move.b	(a0),d0                         	| [$25c3: ld   a,(hl)]
	cmp.b	#0x44,d0                         	| [$25c4: cp   $44]
	movem.l	(sp)+,a0                        	| [$25c6: pop  hl]
	bne.b	0f
	rts                                    	| [$25c7: ret  z]
0:

l_25c8:
	move.b	(a0),d0                         	| [$25c8: ld   a,(hl)]
	lea	game_mem+0x25FC,a3                      	| [$25c9: ld   iy,$25FC]
	lea	game_mem+0x25EB,a1                      	| [$25cd: ld   de,$25EB]
	move.b	d0,d2                           	| [$25d0: ld   c,a]
	move.b	#0x07,d1                        	| [$25d1: ld   b,$07]
l_25d3:
	move.b	(a1),d0                         	| [$25d3: ld   a,(de)]
	cmp.b	d2,d0                            	| [$25d4: cp   c]
	jeq	l_25dd                             	| [$25d5: jr   z,$25DD]
	addq.w	#1,a1                           	| [$25d7: inc  de]
	addq.w	#1,a3                           	| [$25d8: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_25d3                             	| [$25da: djnz $25D3]
	rts                                    	| [$25dc: ret]
l_25dd:
	move.b	(0x03,a2),d0                    	| [$25dd: ld   a,(ix+$03)]
	and.b	#0xF0,d0                         	| [$25e0: and  $F0]
	move.b	d0,d1                           	| [$25e2: ld   b,a]
	move.b	(a3),d0                    	| [$25e3: ld   a,(iy+$00)]
	or.b	d1,d0                             	| [$25e6: or   b]
	move.b	d0,(0x03,a2)                    	| [$25e7: ld   (ix+$03),a]
	rts                                    	| [$25ea: ret]

l_2605:
	jbsr	l_2640                            	| [$2605: call $2640]
	move.b	d1,d0                           	| [$2608: ld   a,b]
	move.b	d0,unknown_600C                 	| [$2609: ld   (unknown_600C),a]
	                         	| [$260c: cp   $00]
	bne.b	0f
	rts                                    	| [$260e: ret  z]
0:
	move.b	(a3),d0                    	| [$260f: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$2612: cp   $01]
	bne.b	0f
	rts                                    	| [$2614: ret  z]
0:
	bsr		read_rom                         	| [$2615: ld   a,(hl)]
	move.b	d0,d2                           	| [$2616: ld   c,a]
	lea	game_mem+0x25F4,a1                      	| [$2617: ld   de,$25F4]
	move.b	#0x08,d1                        	| [$261a: ld   b,$08]
l_261c:
	move.b	(a1),d0                         	| [$261c: ld   a,(de)]
	cmp.b	d2,d0                            	| [$261d: cp   c]
	bne.b	0f
	rts                                    	| [$261e: ret  z]
0:
	addq.w	#1,a1                           	| [$261f: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_261c                             	| [$2620: djnz $261C]
	move.b	unknown_600C,d0                 	| [$2622: ld   a,(unknown_600C)]
	cmp.b	#0x05,d0                         	| [$2625: cp   $05]
	jcc	l_2632                             	| [$2627: jr   nc,$2632]
	move.b	d0,d1                           	| [$2629: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$262a: ld   a,(ix+$03)]
	sub.b	d1,d0                            	| [$262d: sub  b]
	move.b	d0,(0x03,a2)                    	| [$262e: ld   (ix+$03),a]
	rts                                    	| [$2631: ret]
l_2632:
	not.b	d0                               	| [$2632: cpl]
	and.b	#0x07,d0                         	| [$2633: and  $07]
	addq.b	#0x01,d0                        	| [$2635: add  a,$01]
	move.b	d0,d1                           	| [$2637: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$2638: ld   a,(ix+$03)]
	add.b	d1,d0                            	| [$263b: add  a,b]
	move.b	d0,(0x03,a2)                    	| [$263c: ld   (ix+$03),a]
	rts                                    	| [$263f: ret]
l_2640:
	move.b	(0x03,a2),d0                    	| [$2640: ld   a,(ix+$03)]
	rol.b	#5,d0                            	| [$2643: rlc  a] * 5
	clr.b	d1                               	| [$264d: ld   b,$00]
	CLEAR_XC_FLAG
	roxl.b	#1,d0                            	| [$264f: rlc  a]
	roxl.b	#1,d1                           	| [$2651: rl   b]
 	roxl.b	#1,d0                            	| [$2653: rlc  a]
	roxl.b	#1,d1                           	| [$2655: rl   b]
	roxl.b	#1,d0                            	| [$2657: rlc  a]
	roxl.b	#1,d1                           	| [$2659: rl   b]
	jbsr	l_2923                            	| [$265b: call $2923]
	rts                                    	| [$265e: ret]

l_265f:
	jbsr	l_2a16                            	| [$265f: call $2A16]
	move.b	#0x3F,d0                        	| [$2662: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec  	| [$2664: call change_attribute_everywhere_29ec]
	            	| [$2667: ld   a,(io_read_shit_B800)]
	lea	game_mem+0x4800,a0                      	| [$266a: ld   hl,$4800]
	move.w	#0x9000,d6                      	| [$266d: ld   de,$9000]
	move.w	#0x400-1,d1                      	| [$2670: ld   bc,$0400] 1024
	                        	
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b   | [$2673: ldir]
	
	move.w   #0x9B44,d6                      	| [$2675: ld   hl,$9B44]
	move.b	#0x04,d1                        	| [$2678: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$267a: call $297B]
	move.w   #0x9924,d6                      	| [$267d: ld   hl,$9924]
	move.b	#0x0F,d1                        	| [$2680: ld   b,$0F]
	jbsr	write_line_of_zeroes_297b                            	| [$2682: call $297B]
	move.w   #0x9844,d6                      	| [$2685: ld   hl,$9844]
	move.b	#0x04,d1                        	| [$2688: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$268a: call $297B]
	move.w   #0x9871,d6                      	| [$268d: ld   hl,$9871]
	move.b	#0x03,d1                        	| [$2690: ld   b,$03]
	jbsr	write_line_of_zeroes_297b                            	| [$2692: call $297B]
	move.w   #0x9931,d6                      	| [$2695: ld   hl,$9931]
	move.b	#0x04,d1                        	| [$2698: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$269a: call $297B]
	move.w   #0x9B50,d6                      	| [$269d: ld   hl,$9B50]
	move.b	#0x04,d1                        	| [$26a0: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$26a2: call $297B]
	move.w   #0x9B58,d6                      	| [$26a5: ld   hl,$9B58]
	move.b	#0x04,d1                        	| [$26a8: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$26aa: call $297B]
	move.w   #0x9A18,d6                      	| [$26ad: ld   hl,$9A18]
	move.b	#0x08,d1                        	| [$26b0: ld   b,$08]
	jbsr	write_line_of_zeroes_297b                            	| [$26b2: call $297B]
	move.w   #0x99B4,d6                      	| [$26b5: ld   hl,$99B4]
	move.b	#0x0B,d1                        	| [$26b8: ld   b,$0B]
	jbsr	write_line_of_zeroes_297b                            	| [$26ba: call $297B]
	move.w   #0x98D8,d6                      	| [$26bd: ld   hl,$98D8]
	move.b	#0x07,d1                        	| [$26c0: ld   b,$07]
	jbsr	write_line_of_zeroes_297b                            	| [$26c2: call $297B]
	move.w   #0x98C8,d6                      	| [$26c5: ld   hl,$98C8]
	move.b	#0x0A,d1                        	| [$26c8: ld   b,$0A]
	jbsr	write_line_of_zeroes_297b                            	| [$26ca: call $297B]
	move.w   #0x989B,d6                      	| [$26cd: ld   hl,$989B]
	move.b	#0x1A,d1                        	| [$26d0: ld   b,$1A]
	jbsr	write_line_of_2F_attributes_2985                            	| [$26d2: call $2985]
	move.w   #0x9925,d6                      	| [$26d5: ld   hl,$9925]
	jbsr	write_3_attributes_2989                            	| [$26d8: call $2989]
	move.w   #0x9A85,d6                      	| [$26db: ld   hl,$9A85]
	jbsr	write_3_attributes_2989                            	| [$26de: call $2989]
	move.w   #0x9B45,d6                      	| [$26e1: ld   hl,$9B45]
	jbsr	write_3_attributes_2989                            	| [$26e4: call $2989]
	move.w   #0x9B59,d6                      	| [$26e7: ld   hl,$9B59]
	jbsr	write_3_attributes_2989                            	| [$26ea: call $2989]
	move.w   #0x9A19,d6                      	| [$26ed: ld   hl,$9A19]
	jbsr	write_3_attributes_2989                            	| [$26f0: call $2989]
	move.w   #0x9AD9,d6                      	| [$26f3: ld   hl,$9AD9]
	jbsr	write_3_attributes_2989                            	| [$26f6: call $2989]
	move.w   #0x9AB5,d6                      	| [$26f9: ld   hl,$9AB5]
	jbsr	write_3_attributes_2989                            	| [$26fc: call $2989]
	move.w   #0x9B51,d6                      	| [$26ff: ld   hl,$9B51]
	jbsr	write_3_attributes_2989                            	| [$2702: call $2989]
	move.w   #0x98D9,d6                      	| [$2705: ld   hl,$98D9]
	jbsr	write_3_attributes_2989                            	| [$2708: call $2989]
	move.w   #0x9979,d6                      	| [$270b: ld   hl,$9979]
	jbsr	write_3_attributes_2989                            	| [$270e: call $2989]
	move.w   #0x9A15,d6                      	| [$2711: ld   hl,$9A15]
	jbsr	write_3_attributes_2989                            	| [$2714: call $2989]
	move.w   #0x9929,d6                      	| [$2717: ld   hl,$9929]
	jbsr	write_3_attributes_2989                            	| [$271a: call $2989]
	move.w   #0x99C9,d6                      	| [$271d: ld   hl,$99C9]
	jbsr	write_3_attributes_2989                            	| [$2720: call $2989]
	move.w   #0x9AB8,d6                      	| [$2723: ld   hl,$9AB8]
	move.b	#0x3F,d0                        	| [$2726: ld   a,$3F]
	jbsr	osd_w_colorram                         	| [$2728: ld   (hl),a]
	* write "BONUS"
	lea	game_mem+0x5705,a1                      	| [$2729: ld   de,$5705]
	move.w   #0x9240,d6                      	| [$272c: ld   hl,$9240]
	jbsr	display_text_30F9                 	| [$272f: call display_text_30F9]
	lea	unknown_6584,a0                	| [$2732: ld   hl,unknown_6584]
	move.b	#0x33,d0                        	| [$2735: ld   a,$33]
	move.b	d0,(a0)                         	| [$2737: ld   (hl),a]
	addq.w	#1,a0                           	| [$2738: inc  hl]
	move.b	#0x0C,d0                        	| [$2739: ld   a,$0C]
	move.b	d0,(a0)                         	| [$273b: ld   (hl),a]
	addq.w	#1,a0                           	| [$273c: inc  hl]
	move.b	#0x2F,d0                        	| [$273d: ld   a,$2F]
	move.b	d0,(a0)                         	| [$273f: ld   (hl),a]
	addq.w	#1,a0                           	| [$2740: inc  hl]
	            	| [$2741: ld   a,(io_read_shit_B800)]
	move.b	unknown_6166,d0                 	| [$2744: ld   a,(unknown_6166)]
	move.b	d0,(a0)                         	| [$2747: ld   (hl),a]
	jbsr	l_1e26                            	| [$2748: call $1E26]
	jbsr	l_3110                            	| [$274b: call $3110]
	jbsr	can_pick_bag_3DEB                 	| [$274e: call can_pick_bag_3DEB]
	beq.b	0f
	rts                                    	| [$2751: ret  nz]
0:
	lea	game_mem+0x5200,a0                      	| [$2752: ld   hl,$5200]
	move.l	a0,unknown_pointer_6140                 	| [$2755: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$2758: xor  a]
	move.b	d0,unknown_6142                 	| [$2759: ld   (unknown_6142),a]
	rts                                    	| [$275c: ret]
l_275d:
	jbsr	l_2a16                            	| [$275d: call $2A16]
	move.b	#0x3F,d0                        	| [$2760: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec  	| [$2762: call change_attribute_everywhere_29ec]
	            	| [$2765: ld   a,(io_read_shit_B800)]
	lea	game_mem+0x4400,a0                      	| [$2768: ld   hl,$4400]
	move.w	#0x9000,d6                      	| [$276b: ld   de,$9000]
	move.w	#0x0400-1,d1                        	| [$276e: ld   bc,$0400] 1024
									| [$276e: ld   bc,$0400] 1024
										| [$2771: ldir]
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram
	addq.w	#1,d6
	dbf		d1,0b
	
 	move.w   #0x99B0,d6                      	| [$2773: ld   hl,$99B0]
	move.b	#0x11,d1                        	| [$2776: ld   b,$11]
	jbsr	write_line_of_zeroes_297b                            	| [$2778: call $297B]
	move.w   #0x9A0B,d6                      	| [$277b: ld   hl,$9A0B]
	move.b	#0x0A,d1                        	| [$277e: ld   b,$0A]
	jbsr	write_line_of_zeroes_297b                            	| [$2780: call $297B]
	move.w   #0x9B07,d6                      	| [$2783: ld   hl,$9B07]
	move.b	#0x06,d1                        	| [$2786: ld   b,$06]
	jbsr	write_line_of_zeroes_297b                            	| [$2788: call $297B]
	move.w   #0x995B,d6                      	| [$278b: ld   hl,$995B]
	move.b	#0x08,d1                        	| [$278e: ld   b,$08]
	jbsr	write_line_of_zeroes_297b                            	| [$2790: call $297B]
	move.w   #0x9ABB,d6                      	| [$2793: ld   hl,$9ABB]
	move.b	#0x09,d1                        	| [$2796: ld   b,$09]
	jbsr	write_line_of_zeroes_297b                            	| [$2798: call $297B]
	move.w   #0x99A7,d6                      	| [$279b: ld   hl,$99A7]
	move.b	#0x08,d1                        	| [$279e: ld   b,$08]
	jbsr	write_line_of_zeroes_297b                            	| [$27a0: call $297B]
	move.w   #0x9844,d6                      	| [$27a3: ld   hl,$9844]
	move.b	#0x08,d1                        	| [$27a6: ld   b,$08]
	jbsr	write_line_of_zeroes_297b                            	| [$27a8: call $297B]
	move.w   #0x9850,d6                      	| [$27ab: ld   hl,$9850]
	move.b	#0x09,d1                        	| [$27ae: ld   b,$09]
	jbsr	write_line_of_zeroes_297b                            	| [$27b0: call $297B]
	move.w   #0x9858,d6                      	| [$27b3: ld   hl,$9858]
	move.b	#0x04,d1                        	| [$27b6: ld   b,$04]
	jbsr	write_line_of_zeroes_297b                            	| [$27b8: call $297B]
	move.w   #0x99AA,d6                      	| [$27bb: ld   hl,$99AA]
	move.b	#0x0D,d1                        	| [$27be: ld   b,$0D]
	jbsr	write_line_of_2F_attributes_2985                            	| [$27c0: call $2985]
	move.w   #0x985B,d6                      	| [$27c3: ld   hl,$985B]
	move.b	#0x05,d1                        	| [$27c6: ld   b,$05]
	jbsr	write_line_of_2F_attributes_2985                            	| [$27c8: call $2985]
	move.w   #0x989E,d6                      	| [$27cb: ld   hl,$989E]
	move.b	#0x1A,d1                        	| [$27ce: ld   b,$1A]
	jbsr	write_line_of_2F_attributes_2985                            	| [$27d0: call $2985]
	move.w   #0x9BAA,d6                      	| [$27d3: ld   hl,$9BAA]
	move.b	#0x2F,d0                        	| [$27d6: ld   a,$2F]
	move.b	d0,(a0)                         	| [$27d8: ld   (hl),a]
	move.w   #0x9931,d6                      	| [$27d9: ld   hl,$9931]
	jbsr	write_3_attributes_2989                            	| [$27dc: call $2989]
	move.w   #0x98C5,d6                      	| [$27df: ld   hl,$98C5]
	jbsr	write_3_attributes_2989                            	| [$27e2: call $2989]
	move.w   #0x9AFC,d6                      	| [$27e5: ld   hl,$9AFC]
	jbsr	write_3_attributes_2989                            	| [$27e8: call $2989]
	move.w   #0x9A28,d6                      	| [$27eb: ld   hl,$9A28]
	jbsr	write_3_attributes_2989                            	| [$27ee: call $2989]
	move.w   #0x99D1,d6                      	| [$27f1: ld   hl,$99D1]
	jbsr	write_3_attributes_2989                            	| [$27f4: call $2989]
	move.w   #0x995C,d6                      	| [$27f7: ld   hl,$995C]
	jbsr	write_3_attributes_2989                            	| [$27fa: call $2989]
	move.w   #0x9A1C,d6                      	| [$27fd: ld   hl,$9A1C]
	jbsr	write_3_attributes_2989                            	| [$2800: call $2989]
	move.w   #0x9AEC,d6                      	| [$2803: ld   hl,$9AEC]
	jbsr	write_3_attributes_2989                            	| [$2806: call $2989]
	move.w   #0x9B08,d6                      	| [$2809: ld   hl,$9B08]
	jbsr	write_3_attributes_2989                            	| [$280c: call $2989]
	move.w   #0x9B91,d6                      	| [$280f: ld   hl,$9B91]
	jbsr	write_3_attributes_2989                            	| [$2812: call $2989]
	move.w   #0x99FB,d6                      	| [$2815: ld   hl,$99FB]
	move.b	#0x3F,d0                        	| [$2818: ld   a,$3F]
	jbsr	osd_w_videoram                         	| [$281a: ld   (hl),a]
	move.w   #0x9A07,d6                      	| [$281b: ld   hl,$9A07]
	jbsr	osd_w_videoram                         	| [$281e: ld   (hl),a]
	move.w   #0x9898,d6                      	| [$281f: ld   hl,$9898]
	jbsr	osd_w_videoram                         	| [$2822: ld   (hl),a]
	            	| [$2823: ld   a,(io_read_shit_B800)]
	
	* write "BONUS"
	lea	game_mem+0x5705,a1                      	| [$2826: ld   de,$5705]
	move.w   #0x9240,d6                      	| [$2829: ld   hl,$9240]
	jbsr	display_text_30F9                 	| [$282c: call display_text_30F9]
	lea	unknown_6584,a0                	| [$282f: ld   hl,unknown_6584]
	move.b	#0x33,d0                        	| [$2832: ld   a,$33]
	move.b	d0,(a0)                         	| [$2834: ld   (hl),a]
	move.b	#0x04,d0                        	| [$2835: ld   a,$04]
	addq.w	#1,a0                           	| [$2837: inc  hl]
	move.b	d0,(a0)                         	| [$2838: ld   (hl),a]
	move.b	#0x97,d0                        	| [$2839: ld   a,$97]
	addq.w	#1,a0                           	| [$283b: inc  hl]
	move.b	d0,(a0)                         	| [$283c: ld   (hl),a]
	move.b	unknown_6165,d0                 	| [$283d: ld   a,(unknown_6165)]
	addq.w	#1,a0                           	| [$2840: inc  hl]
	move.b	d0,(a0)                         	| [$2841: ld   (hl),a]
	            	| [$2842: ld   a,(io_read_shit_B800)]
	jbsr	l_1e26                            	| [$2845: call $1E26]
	jbsr	l_3110                            	| [$2848: call $3110]
	rts                                    	| [$284b: ret]
l_284c:
	jbsr	l_2a16                            	| [$284c: call $2A16]
	move.b	#0x3F,d0                        	| [$284f: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec  	| [$2851: call change_attribute_everywhere_29ec]
	            	| [$2854: ld   a,(io_read_shit_B800)]
	lea	game_mem+0x4000,a0                      	| [$2857: ld   hl,$4000]
	move.w	#0x9000,d6                      	| [$285a: ld   de,$9000]
	move.w	#0x04-1,d1                        	| [$285d: ld   bc,$0400] 1024
0:
	move.b	(a0)+,d0
	jbsr	osd_w_videoram	| [$2860: ldir]
	addq.w	#1,d6
	dbf		d1,0b
	
 	move.w   #0x9907,d6                      	| [$2862: ld   hl,$9907]
	move.b	#0x0E,d1                        	| [$2865: ld   b,$0E]
	jbsr	write_line_of_zeroes_297b                            	| [$2867: call $297B]
	move.w   #0x9917,d6                      	| [$286a: ld   hl,$9917]
	move.b	#0x0E,d1                        	| [$286d: ld   b,$0E]
	jbsr	write_line_of_zeroes_297b                            	| [$286f: call $297B]
	move.w   #0x985B,d6                      	| [$2872: ld   hl,$985B]
	move.b	#0x14,d1                        	| [$2875: ld   b,$14]
	jbsr	write_line_of_zeroes_297b                            	| [$2877: call $297B]
	move.w   #0x9847,d6                      	| [$287a: ld   hl,$9847]
	move.b	#0x03,d1                        	| [$287d: ld   b,$03]
	jbsr	write_line_of_zeroes_297b                            	| [$287f: call $297B]
	move.w   #0x9850,d6                      	| [$2882: ld   hl,$9850]
	move.b	#0x03,d1                        	| [$2885: ld   b,$03]
	jbsr	write_line_of_zeroes_297b                            	| [$2887: call $297B]
	move.w   #0x9B3B,d6                      	| [$288a: ld   hl,$9B3B]
	move.b	#0x03,d1                        	| [$288d: ld   b,$03]
	jbsr	write_line_of_zeroes_297b                            	| [$288f: call $297B]
	move.w   #0x9B4A,d6                      	| [$2892: ld   hl,$9B4A]
	move.b	#0x03,d1                        	| [$2895: ld   b,$03]
	jbsr	write_line_of_zeroes_297b                            	| [$2897: call $297B]
	move.w   #0x984A,d6                      	| [$289a: ld   hl,$984A]
	move.b	#0x03,d1                        	| [$289d: ld   b,$03]
	jbsr	write_line_of_2F_attributes_2985                            	| [$289f: call $2985]
	move.w   #0x990A,d6                      	| [$28a2: ld   hl,$990A]
	move.b	#0x0E,d1                        	| [$28a5: ld   b,$0E]
	jbsr	write_line_of_2F_attributes_2985                            	| [$28a7: call $2985]
	move.w   #0x985E,d6                      	| [$28aa: ld   hl,$985E]
	move.b	#0x1A,d1                        	| [$28ad: ld   b,$1A]
	jbsr	write_line_of_2F_attributes_2985                            	| [$28af: call $2985]
	move.w   #0x9A68,d6                      	| [$28b2: ld   hl,$9A68]
	jbsr	write_3_attributes_2989                            	| [$28b5: call $2989]
	move.w   #0x9968,d6                      	| [$28b8: ld   hl,$9968]
	jbsr	write_3_attributes_2989                            	| [$28bb: call $2989]
	move.w   #0x9918,d6                      	| [$28be: ld   hl,$9918]
	jbsr	write_3_attributes_2989                            	| [$28c1: call $2989]
	move.w   #0x9998,d6                      	| [$28c4: ld   hl,$9998]
	jbsr	write_3_attributes_2989                            	| [$28c7: call $2989]
	move.w   #0x9A78,d6                      	| [$28ca: ld   hl,$9A78]
	jbsr	write_3_attributes_2989                            	| [$28cd: call $2989]
	move.w   #0x989C,d6                      	| [$28d0: ld   hl,$989C]
	jbsr	write_3_attributes_2989                            	| [$28d3: call $2989]
	move.w   #0x9A9C,d6                      	| [$28d6: ld   hl,$9A9C]
	jbsr	write_3_attributes_2989                            	| [$28d9: call $2989]
	move.w   #0x9871,d6                      	| [$28dc: ld   hl,$9871]
	jbsr	write_3_attributes_2989                            	| [$28df: call $2989]
	move.w   #0x9B3C,d6                      	| [$28e2: ld   hl,$9B3C]
	jbsr	write_3_attributes_2989                            	| [$28e5: call $2989]
	move.b	#0x3F,d0                        	| [$28e8: ld   a,$3F]
	move.w   #0x9A7B,d6                      	| [$28ea: ld   hl,$9A7B]
	move.b	d0,(a0)                         	| [$28ed: ld   (hl),a]
	move.w   #0x98DB,d6                      	| [$28ee: ld   hl,$98DB]
	move.b	d0,(a0)                         	| [$28f1: ld   (hl),a]
	move.w   #0x9A27,d6                      	| [$28f2: ld   hl,$9A27]
	move.b	d0,(a0)                         	| [$28f5: ld   (hl),a]
	move.w   #0x9867,d6                      	| [$28f6: ld   hl,$9867]
	move.b	d0,(a0)                         	| [$28f9: ld   (hl),a]
	clr.b	d0                               	| [$28fa: xor  a]
	lea	unknown_6584,a0                	| [$28fb: ld   hl,unknown_6584]
	move.b	d0,(a0)                         	| [$28fe: ld   (hl),a]
	addq.w	#1,a0                           	| [$28ff: inc  hl]
	move.b	d0,(a0)                         	| [$2900: ld   (hl),a]
	addq.w	#1,a0                           	| [$2901: inc  hl]
	move.b	d0,(a0)                         	| [$2902: ld   (hl),a]
	addq.w	#1,a0                           	| [$2903: inc  hl]
	move.b	d0,(a0)                         	| [$2904: ld   (hl),a]
	            	| [$2905: ld   a,(io_read_shit_B800)]
	jbsr	l_1e26                            	| [$2908: call $1E26]
	jbsr	l_3110                            	| [$290b: call $3110]
	move.b	unknown_6210,d0                 	| [$290e: ld   a,(unknown_6210)]
	cmp.b	#0x00,d0                         	| [$2911: cp   $00]
	bne.b	0f
	rts                                    	| [$2913: ret  z]
0:
	jbsr	can_pick_bag_3DEB                 	| [$2914: call can_pick_bag_3DEB]
	beq.b	0f
	rts                                    	| [$2917: ret  nz]
0:
	lea	game_mem+0x5000,a0                      	| [$2918: ld   hl,$5000]
	move.w	a0,unknown_pointer_6140                 	| [$291b: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$291e: xor  a]
	move.b	d0,unknown_6142                 	| [$291f: ld   (unknown_6142),a]
	rts                                    	| [$2922: ret]

l_2923:
	move.b	player_screen_600D,d0           	| [$2923: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$2926: cp   $03]
	beq.b	0f
	rts                                    	| [$2928: ret  nz]
0:
	move.b	guard_1_y_6597,d0               	| [$2929: ld   a,(guard_1_y_6597)]
	cmp.b	#0x28,d0                         	| [$292c: cp   $28]
	beq.b	0f
	rts                                    	| [$292e: ret  nz]
0:

	move.l	a2,-(sp)                        	| [$292f: push ix]

	move.l	a0,-(sp)                        	| [$2931: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2932: push de]
	move.l	a1,-(sp)                        	| [$2932: push de]
	lea	game_mem+0x570C,a2                      	| [$2933: ld   ix,$570C]
	move.b	(a2),d0                    	| [$2937: ld   a,(ix+$00)]
	lea	game_mem+0x2994,a0                      	| [$293a: ld   hl,$2994]
	cmp.b	(a0),d0                          	| [$293d: cp   (hl)]
	beq.b	0f
	jbsr	l_2946                            	| [$293e: call nz,$2946]
0:
	move.l	(sp)+,a1                        	| [$2941: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$2941: pop  de]
	move.l	(sp)+,a0                        	| [$2942: pop  hl]
	move.l	(sp)+,a2                        	| [$2943: pop  ix]
	rts                                    	| [$2945: ret]
l_2946:
	lea		game_mem+0x29A9,a1                      	| [$2946: ld   de,$29A9]
	move.w	#0x92E2,d6                      	| [$2949: ld   hl,$92E2]
	movem.w	d1/d2,-(sp)                    	| [$294c: push bc]
	move.w	d0,-(sp)                        	| [$294d: push af]
	move.b	#0x07,d0                        	| [$294e: ld   a,$07]
	exg	d0,d7                              	| [$2950: ex   af,af']
	jbsr	write_text_55f0                   	| [$2951: call write_text_55f0]
	move.w	(sp)+,d0                        	| [$2954: pop  af]

	movem.w	(sp)+,d1/d2                    	| [$2955: pop  bc]
	rts                                    	| [$2956: ret]


l_2957:
	move.b	#0x01,d0                        	| [$2957: ld   a,$01]
	move.b	d0,unknown_601A                 	| [$2959: ld   (unknown_601A),a]
	move.b	d0,unknown_601B                 	| [$295c: ld   (unknown_601B),a] third wagon screen index (0,1,2)
	move.b	#0x80,d0                        	| [$295f: ld   a,$80]
	move.b	d0,guard_2_direction_6027       	| [$2961: ld   (guard_2_direction_6027),a]
	move.b	#0x40,d0                        	| [$2964: ld   a,$40]
	move.b	d0,guard_1_direction_6067       	| [$2966: ld   (guard_1_direction_6067),a]  $40:	to left, $80:	 to right, $10:	 up, $20:	down
	lea	game_mem+0x2995,a0                      	| [$2969: ld   hl,$2995]
	            	| [$296c: ld   a,(io_read_shit_B800)]
	lea	unknown_6588,a1                	| [$296f: ld   de,unknown_6588]
	move.w	#0x14,d1                        	| [$2972: ld   bc,$0014] 20
	jbsr	ldir                              	| [$2975: ldir]
	jbsr	l_1ee0                            	| [$2977: call $1EE0]
	rts                                    	| [$297a: ret]

write_line_of_zeroes_297b:
	move.b	#0x1F,d0                        	| [$297b: ld   a,$1F]
	move.w	#0x0020,d3                      	| [$297d: ld   de,$0020] 32
l_2980:
	jbsr		osd_w_videoram	| [$2980: ld   (hl),a]
	add.w	d3,d6                            	| [$2981: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2980                             	| [$2982: djnz $2980]
	rts                                    	| [$2984: ret]

write_line_of_2F_attributes_2985:
	move.b	#0x2F,d0                        	| [$2985: ld   a,$2F]
	* we have to duplicate the code because of the
	* osd API (color/video)
	move.w	#0x0020,d3                      	| [$297d: ld   de,$0020] 32
0:
	jbsr		osd_w_colorram	| [$2980: ld   (hl),a]
	add.w	d3,d6                            	| [$2981: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	0b                             	| [$2982: djnz $2980]
	rts                                    	| [$2984: ret]


write_3_attributes_2989:
	move.w	#0x0020,d3                      	| [$2989: ld   de,$0020] 32
	move.b	#0x1F,d0                        	| [$298c: ld   a,$1F]
	jbsr	osd_w_colorram                         	| [$298e: ld   (hl),a]
	add.w	d3,d6                            	| [$298f: add  hl,de]
	jbsr	osd_w_colorram                         	| [$2990: ld   (hl),a]
	addq.w	#1,d6                           	| [$2991: inc  hl]
	jbsr	osd_w_colorram                         	| [$2992: ld   (hl),a]
	rts                                    	| [$2993: ret]


write_text_29bc:
	movem.w	d1,-(sp)                    	| [$29bc: push bc]
	move.w	#-0x20,d1                        	| [$29bd: ld   bc,$FFE0] 65504
	jbsr	osd_w_videoram                         	| [$29c0: ld   (hl),a]
	add.w	d1,a0                            	| [$29c1: add  hl,bc]

	movem.w	(sp)+,d1                    	| [$29c2: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	write_text_29bc                             	| [$29c3: djnz $29BC]
	rts                                    	| [$29c5: ret]
l_29c6:
	move.b	d0,(a0)                         	| [$29c6: ld   (hl),a]
	addq.w	#1,a0                           	| [$29c7: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_29c6                             	| [$29c8: djnz $29C6]
	rts                                    	| [$29ca: ret]

l_29cb:
	move.b	#0x08,d1                        	| [$29cb: ld   b,$08]
	* clear ram
	lea	number_of_credits_6000,a0      	| [$29cd: ld   hl,number_of_credits_6000]
l_29d0:
	clr.b	d0                               	| [$29d0: xor  a]
l_29d1:
	move.b	d0,d2                           	| [$29d1: ld   c,a]
l_29d2:
	move.b	d0,(a0)+                         	| [$29d2: ld   (hl),a]
											| [$29d3: inc  hl]
	subq.b	#1,d2                           	| [$29d4: dec  c]
	jne	l_29d2                             	| [$29d5: jr   nz,$29D2]
	subq.b	#1,d1                           	| [...]
	jne	l_29d1                             	| [$29d7: djnz $29D1]
	jra	l_2483                             	| [$29d9: jp   $2483]

l_29dc:
	move.b	#0x08,d1                        	| [$29dc: ld   b,$08]
	lea	number_of_credits_6000,a0      	| [$29de: ld   hl,number_of_credits_6000]
l_29e1:
	move.b	d0,d2                           	| [$29e1: ld   c,a]
l_29e2:
	move.b	d0,(a0)+                         	| [$29e2: ld   (hl),a]
	                           	| [$29e3: inc  hl]
	subq.b	#1,d2                           	| [$29e4: dec  c]
	jne	l_29e2                             	| [$29e5: jr   nz,$29E2]
	subq.b	#1,d1                           	| [...]
	jne	l_29e1                             	| [$29e7: djnz $29E1]
	jra	l_2486                             	| [$29e9: jp   $2486]
	
change_attribute_everywhere_29ec:
	* 8 is too much as it writes beyond $9C00
	* changing to 4
	* set all attributes to passed d0
	move.b	#0x04,d1                        	| [$29ec: ld   b,$08]
	move.w	#0x9800,d6                      	| [$29ee: ld   hl,$9800]
l_29f1:
	clr.b	d2                               	| [$29f1: ld   c,$00]
l_29f3:
	jbsr	osd_w_colorram                         	| [$29f3: ld   (hl),a]
	addq.w	#1,d6                           	| [$29f4: inc  hl]
	* kick watchdog
												| [$29f5: push af]
												| [$29f6: ld   a,(watchdog_reset_B800)]
												| [$29f9: pop  af]
	subq.b	#1,d2                           	| [$29fa: dec  c]
	jne	l_29f3                             	| [$29fb: jr   nz,$29F3]
	subq.b	#1,d1                           	| [...]
	jne	l_29f1                             	| [$29fd: djnz $29F1]
	rts                                    	| [$29ff: ret]
	
	
clear_screen_2a00:
	move.b	#0x04,d1                        	| [$2a00: ld   b,$04]
	move.b	#0xE0,d0                        	| [$2a02: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$2a04: ld   hl,$9000]
l_2a07:
	clr.b	d2                               	| [$2a07: ld   c,$00]
l_2a09:
	jbsr	osd_w_videoram                         	| [$2a09: ld   (hl),a]
	addq.w	#1,d6									| [$2a0a: inc  hl]
												| [$2a0b: push af]
												| [$2a0c: ld   a,(watchdog_reset_B800)]
												| [$2a0f: pop  af]
	subq.b	#1,d2                           	| [$2a10: dec  c]
	jne	l_2a09                             	| [$2a11: jr   nz,$2A09]
	subq.b	#1,d1                           	| [...]
	jne	l_2a07                             	| [$2a13: djnz $2A07]
	rts                                    	| [$2a15: ret]
l_2a16:
	move.b	#0xE0,d0                        	| [$2a16: ld   a,$E0]
												| [$2a18: ld   a,$E0]
	move.w	#0x93E4,d6                      	| [$2a1a: ld   hl,$93E4]
	move.b	#0x1B,d1                        	| [$2a1d: ld   b,$1B]
l_2a1f:

	move.w	d6,-(sp)                        	| [$2a1f: push hl]
	movem.w	d1/d2,-(sp)                    	| [$2a20: push bc]
	move.b	#0x20,d1                        	| [$2a21: ld   b,$20]
	jbsr	write_text_29bc                            	| [$2a23: call $29BC]

	movem.w	(sp)+,d1/d2                    	| [$2a26: pop  bc]
	move.w	(sp)+,d6                        	| [$2a27: pop  hl]
	addq.w	#1,d6                           	| [$2a28: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2a1f                             	| [$2a29: djnz $2A1F]
	rts                                    	| [$2a2b: ret]


l_2a2c:
*	clr.b	d0                               	| [$2a2c: ld   a,$00]
*	move.b	d0,0xA003                       	| [$2a2e: ld   ($A003),a]
	move.b	#0x04,d1                        	| [$2a31: ld   b,$04]
	move.b	#0xE0,d0                        	| [$2a33: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$2a35: ld   hl,$9000]
	jbsr	l_2a07                            	| [$2a38: call $2A07]
	move.b	#0x3F,d0                        	| [$2a3b: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$2a3d: call $29EC]
	move.b	unknown_628C,d0                       	| [$2a40: ld   a,($628C)]
	cmp.b	#0x01,d0                         	| [$2a43: cp   $01]
	jeq	l_2a50                             	| [$2a45: jr   z,$2A50]
	lea	game_mem+0x56C3,a1                      	| [$2a47: ld   de,$56C3]
	* write "PUSH START BUTTON" to screen
	move.w	#0x93AF,d6                      	| [$2a4a: ld   hl,$93AF]
	jbsr	display_text_30F9                            	| [$2a4d: call $30F9]
l_2a50:
	move.b	#0x01,d1                        	| [$2a50: ld   b,$01]
	lea	player_struct_6580,a0          	| [$2a52: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$2a55: ld   a,$00]
	jbsr	l_29f1                            	| [$2a57: call $29F1]
	jbsr	l_3110                            	| [$2a5a: call $3110]
	* video enable
*	move.b	#0x01,d0                        	| [$2a5d: ld   a,$01]
*	move.b	d0,0xA003                       	| [$2a5f: ld   ($A003),a]
	rts                                    	| [$2a62: ret]
l_2a63:
	lea	player_1_score_6176,a2                      	| [$2a63: ld   ix,$6176]
	move.b	#0x07,d1                        	| [$2a67: ld   b,$07]
	clr.b	d0                               	| [$2a69: xor  a]
l_2a6a:
	nop                                    	| [$2a6a: nop]
	addq.w	#1,a2                           	| [$2a6b: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_2a6a                             	| [$2a6d: djnz $2A6A]
	rts                                    	| [$2a6f: ret]
l_2a70:
	* cocktail mode?
*	move.b	unknown_6163,d0                       	| [$2a70: ld   a,($6163)]
*	and.b	#0x80,d0                         	| [$2a73: and  $80]
*	                         	| [$2a75: cp   $00]
*	jeq	l_2a85                             	| [$2a77: jr   z,$2A85]
*	move.b	current_player_617C,d0          	| [$2a79: ld   a,(current_player_617C)]
*	not.b	d0                               	| [$2a7c: cpl]
*	and.b	#0x01,d0                         	| [$2a7d: and  $01]
*	move.b	d0,0xA001                       	| [$2a7f: ld   ($A001),a]
*	move.b	d0,0xA002                       	| [$2a82: ld   ($A002),a]
*l_2a85:
	lea	bags_coordinates_609C,a2                      	| [$2a85: ld   ix,$609C]
	lea	unknown_617F,a3                      	| [$2a89: ld   iy,$617F]
	move.b	#0x36,d1                        	| [$2a8d: ld   b,$36]
	jbsr	l_2abc                            	| [$2a8f: call $2ABC]
	lea	barrow_start_screen_address_61C4,a2                      	| [$2a92: ld   ix,$61C4]
	lea	unknown_screen_address_61FA,a3                      	| [$2a96: ld   iy,$61FA]
	move.b	#0x03,d1                        	| [$2a9a: ld   b,$03]
	jbsr	l_2abc                            	| [$2a9c: call $2ABC]
	move.b	lives_6056,d0                   	| [$2a9f: ld   a,(lives_6056)]
	move.w	d0,-(sp)                        	| [$2aa2: push af]
	move.b	unknown_617E,d0                       	| [$2aa3: ld   a,($617E)]
	move.b	d0,lives_6056                   	| [$2aa6: ld   (lives_6056),a]
	move.w	(sp)+,d0                        	| [$2aa9: pop  af]
	move.b	d0,unknown_617E                       	| [$2aaa: ld   ($617E),a]
	move.b	unknown_6290,d0                       	| [$2aad: ld   a,($6290)]
	move.w	d0,-(sp)                        	| [$2ab0: push af]
	move.b	unknown_627D,d0                       	| [$2ab1: ld   a,($627D)]
	move.b	d0,unknown_6290                       	| [$2ab4: ld   ($6290),a]
	move.w	(sp)+,d0                        	| [$2ab7: pop  af]
	move.b	d0,unknown_627D                       	| [$2ab8: ld   ($627D),a]
	rts                                    	| [$2abb: ret]
l_2abc:
	move.b	(0x00,a2),d0                    	| [$2abc: ld   a,(ix+$00)]
	move.w	d0,-(sp)                        	| [$2abf: push af]
	move.b	(0x00,a3),d0                    	| [$2ac0: ld   a,(iy+$00)]
	move.b	d0,(0x00,a2)                    	| [$2ac3: ld   (ix+$00),a]
	move.w	(sp)+,d0                        	| [$2ac6: pop  af]
	move.b	d0,(0x00,a3)                    	| [$2ac7: ld   (iy+$00),a]
	addq.w	#1,a2                           	| [$2aca: inc  ix]
	addq.w	#1,a3                           	| [$2acc: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_2abc                             	| [$2ace: djnz $2ABC]
	rts                                    	| [$2ad0: ret]
	

guard_collision_with_pick_2AD1:
	move.b	#0x0B,d2                        	| [$2ad1: ld   c,$0B]
	move.b	#0x07,d1                        	| [$2ad3: ld   b,$07]
l_2ad5:
	move.b	(0x03,a2),d0                    	| [$2ad5: ld   a,(ix+$03)]  guard_x_struct + 3 = guard y
	addq.b	#0x03,d0                        	| [$2ad8: add  a,$03]
	sub.b	d2,d0                            	| [$2ada: sub  c]
	cmp.b	(0x03,a3),d0                     	| [$2adb: cp   (iy+$03)]
	jeq	l_2ae6                             	| [$2ade: jr   z,$2AE6]
	addq.b	#1,d2                           	| [$2ae0: inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_2ad5                             	| [$2ae1: djnz $2AD5]
l_2ae3:
	clr.b	d0                               	| [$2ae3: ld   a,$00]
	rts                                    	| [$2ae5: ret]
l_2ae6:
	move.b	(0x02,a2),d0                    	| [$2ae6: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$2ae9: add  a,$08]
	cmp.b	(0x02,a3),d0                     	| [$2aeb: cp   (iy+$02)]
	jcs	l_2ae3                             	| [$2aee: jr   c,$2AE3]
	sub.b	#0x0F,d0                         	| [$2af0: sub  $0F]
	cmp.b	(0x02,a3),d0                     	| [$2af2: cp   (iy+$02)]
	jcc	l_2ae3                             	| [$2af5: jr   nc,$2AE3]
	move.b	#0x01,d0                        	| [$2af7: ld   a,$01]
	rts                                    	| [$2af9: ret]

* guard does not know where player is (not visible)
* check if guard must wait for the elevator

 * params:
*  screen_index_param_6098:	current guard screen
*  ix:	player struct
*  iy:	current guard struct
*  de:	current guard screen address
*  hl:	address to store bool flag "guard is in the elevator" (603B/607B)

guard_wait_for_elevator_test_2AFA:
	move.b	screen_index_param_6098,d0      	| [$2afa: ld   a,(screen_index_param_6098)]
	move.b	d0,d1                           	| [$2afd: ld   b,a]
	move.b	player_screen_600D,d0           	| [$2afe: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$2b01: cp   b]
	jne	l_2c1e                             	| [$2b02: jp   nz,$2C1E] not same screen as the player

 * same screen as the player:	 check if on an elevator waiting zone


	move.l	a0,-(sp)                        	| [$2b05: push hl] save hl

	move.l	a3,-(sp)                        	| [$2b06: push iy] save il
	lea	game_mem+0x2CD3,a3	| [$2b08: ld   iy,elevator_waiting_point_table_2CD3]  table ends with FF
l_2b0c:
	LOAD_AX_BE_WORD_DY	a3,d6                     	| [$2b0c: ld   a,(iy+$00)]
	             	| [$2b0f: ld   h,a]
	             	| [$2b10: ld   a,(iy+$01)]
	             	| [$2b13: ld   l,a]
	              	| [$2b14: xor  a]
	cmp.w	d3,d6	| [sbc  hl,de]
	jeq	l_2b31                             	| [$2b17: jr   z,$2B31]  facing an elevator waiting point
	addq.w	#3,a3                           	| [$2b19: inc  iy] * 3
	move.b	(0x02,a3),d0                    	| [$2b1f: ld   a,(iy+$02)]
	cmp.b	#0xFF,d0                         	| [$2b22: cp   $FF]
	jne	l_2b0c                             	| [$2b24: jr   nz,$2B0C]
* not over an elevator waiting point
	move.l	unknown_pointer_6146,a0     	| [$2b26: ld   hl,(unknown_pointer_6146)]
	clr.b	d0                               	| [$2b29: xor  a]
	move.b	d0,(a0)                         	| [$2b2a: ld   (hl),a] not in elevator either
l_2b2b:
	move.l	(sp)+,a3                        	| [$2b2b: pop  iy]
	move.l	(sp)+,a0                        	| [$2b2d: pop  hl]
	jra	l_2b84                             	| [$2b2e: jp   $2B84]

 * guard facing the elevator waiting point

l_2b31:
	move.b	#0x01,d0                        	| [$2b31: ld   a,$01]
	move.l	unknown_pointer_6146,a0     	| [$2b33: ld   hl,(unknown_pointer_6146)]
	move.b	(a0),d0                         	| [$2b36: ld   a,(hl)]
											| [$2b37: cp   $00]
	jne	l_2b2b                             	| [$2b39: jp   nz,$2B2B]
	jbsr	get_elevator_exit_y_2BD1          	| [$2b3c: call get_elevator_exit_y_2BD1]
	move.l	(sp)+,a3                        	| [$2b3f: pop  iy]
	move.b	d0,d1                           	| [$2b41: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$2b42: ld   a,(iy+$03)]
	cmp.b	d1,d0                            	| [$2b45: cp   b]
	jeq	l_2bc6                             	| [$2b46: jp   z,$2BC6]
	move.l	unknown_pointer_6146,a0     	| [$2b49: ld   hl,(unknown_pointer_6146)]
	addq.w	#4,a0                           	| [$2b4c: inc  hl] * 4
	move.b	#0x01,d0                        	| [$2b50: ld   a,$01]
	move.b	d0,(a0)                         	| [$2b52: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$2b53: pop  hl]
	movem.w	d3/d4,-(sp)                    	| [$2b54: push de]
	move.l	a1,-(sp)                        	| [$2b54: push de]
	move.w	#0x001C,d3                      	| [$2b55: ld   de,$001C] 28
	add.w	d3,a0                            	| [$2b58: add  hl,de]
	move.l	(sp)+,a1                        	| [$2b59: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$2b59: pop  de]
	clr.b	d0                               	| [$2b5a: xor  a]
	move.b	d0,(a0)                         	| [$2b5b: ld   (hl),a]
	move.b	(0x07,a2),d0                    	| [$2b5c: ld   a,(ix+$07)] elevator y for current screen
	subq.b	#1,d0                           	| [$2b5f: dec  a]
	cmp.b	(0x03,a3),d0                     	| [$2b60: cp   (iy+$03)]
	jeq	l_2b71                             	| [$2b63: jr   z,$2B71]
	subq.b	#1,d0                           	| [$2b65: dec  a]
	cmp.b	(0x03,a3),d0                     	| [$2b66: cp   (iy+$03)]
	jeq	l_2b71                             	| [$2b69: jr   z,$2B71]
	move.l	guard_direction_pointer_6095,a0	| [$2b6b: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$2b6e: xor  a]
	move.b	d0,(a0)                         	| [$2b6f: ld   (hl),a]
	rts                                    	| [$2b70: ret]
l_2b71:
	move.b	(0x06,a2),d0                    	| [$2b71: ld   a,(ix+$06)]
	move.l	guard_direction_pointer_6095,a0	| [$2b74: ld   hl,(guard_direction_pointer_6095)]
	cmp.b	(0x02,a3),d0                     	| [$2b77: cp   (iy+$02)]
	jcc	l_2b80                             	| [$2b7a: jr   nc,$2B80]
	move.b	#0x40,d0                        	| [$2b7c: ld   a,$40]
	move.b	d0,(a0)                         	| [$2b7e: ld   (hl),a]
	rts                                    	| [$2b7f: ret]
l_2b80:
	move.b	#0x80,d0                        	| [$2b80: ld   a,$80]
	move.b	d0,(a0)                         	| [$2b82: ld   (hl),a]
	rts                                    	| [$2b83: ret]
l_2b84:
	move.b	(a0),d0                         	| [$2b84: ld   a,(hl)]
	cmp.b	#0x01,d0                         	| [$2b85: cp   $01]
	jeq	l_2b92                             	| [$2b87: jr   z,$2B92]
	move.l	unknown_pointer_6146,a0     	| [$2b89: ld   hl,(unknown_pointer_6146)]
	addq.w	#4,a0                           	| [$2b8c: inc  hl] * 4
	move.b	d0,(a0)                         	| [$2b90: ld   (hl),a]
	rts                                    	| [$2b91: ret]
l_2b92:
	move.l	unknown_pointer_6146,a0     	| [$2b92: ld   hl,(unknown_pointer_6146)]
	move.b	#0x01,d0                        	| [$2b95: ld   a,$01]
	move.b	d0,(a0)                         	| [$2b97: ld   (hl),a]
	jbsr	get_elevator_exit_y_2BD1          	| [$2b98: call get_elevator_exit_y_2BD1]
	move.b	d0,d1                           	| [$2b9b: ld   b,a]
	move.b	(0x03,a3),d0                    	| [$2b9c: ld   a,(iy+$03)]
	cmp.b	d1,d0                            	| [$2b9f: cp   b]
	jeq	l_2bc7                             	| [$2ba0: jr   z,$2BC7]
	addq.w	#4,a0                           	| [$2ba2: inc  hl] * 4
	move.b	#0x01,d0                        	| [$2ba6: ld   a,$01]
	move.b	d0,(a0)                         	| [$2ba8: ld   (hl),a]
	move.b	screen_index_param_6098,d0      	| [$2ba9: ld   a,(screen_index_param_6098)]
	cmp.b	#0x02,d0                         	| [$2bac: cp   $02]
	jne	l_2bb7                             	| [$2bae: jr   nz,$2BB7]
	move.b	#0x98,d0                        	| [$2bb0: ld   a,$98]
	move.b	d0,(0x02,a3)                    	| [$2bb2: ld   (iy+$02),a]
	jra	l_2bc0                             	| [$2bb5: jr   $2BC0]
l_2bb7:
	cmp.b	#0x03,d0                         	| [$2bb7: cp   $03]
	jne	l_2bc0                             	| [$2bb9: jr   nz,$2BC0]
	move.b	#0x30,d0                        	| [$2bbb: ld   a,$30]
	move.b	d0,(0x02,a3)                    	| [$2bbd: ld   (iy+$02),a]
l_2bc0:
	move.l	guard_direction_pointer_6095,a0	| [$2bc0: ld   hl,(guard_direction_pointer_6095)]
	clr.b	d0                               	| [$2bc3: xor  a]
	move.b	d0,(a0)                         	| [$2bc4: ld   (hl),a]
	rts                                    	| [$2bc5: ret]
l_2bc6:
	move.l	(sp)+,a0                        	| [$2bc6: pop  hl]
l_2bc7:
	move.l	unknown_pointer_6146,a0     	| [$2bc7: ld   hl,(unknown_pointer_6146)]
	addq.w	#4,a0                           	| [$2bca: inc  hl] * 4
	clr.b	d0                               	| [$2bce: xor  a]
	move.b	d0,(a0)                         	| [$2bcf: ld   (hl),a]
	rts                                    	| [$2bd0: ret]
	
 * called when guard is waiting or in the stopped elevator
 * guard/elevator routine.
get_elevator_exit_y_2BD1:
	move.b	screen_index_param_6098,d0      	| [$2bd1: ld   a,(screen_index_param_6098)]
	cmp.b	#0x03,d0                         	| [$2bd4: cp   $03]
	jeq	l_2bee                             	| [$2bd6: jr   z,$2BEE]
	cmp.b	#0x02,d0                         	| [$2bd8: cp   $02]
	beq.b	0f
	rts                                    	| [$2bda: ret  nz]
0:
 * 2nd screen:	get exit y
	move.b	(0x03,a2),d0                    	| [$2bdb: ld   a,(ix+$03)] player y
	cmp.b	#0x80,d0                         	| [$2bde: cp   $80]
	bcs.b	0f
	move.b	#0x88,d0                        	| [$2be0: ld   a,$88]  exits at the bottom if player y > $80
	rts                                    	| [$2be2: ret  nc]
0:
	move.b	(0x02,a2),d0                    	| [$2be3: ld   a,(ix+$02)] player x
	cmp.b	#0x98,d0                         	| [$2be6: cp   $98]
	bcc.b	0f
	move.b	#0x40,d0                        	| [$2be8: ld   a,$40]  exits at the wagon exit if player in the upper-left quarter x < $98
	rts                                    	| [$2bea: ret  c]
0:
	move.b	#0x69,d0                        	| [$2beb: ld   a,$69]  exits at the 2nd floor (2 bags, lead to screen 3)
	rts                                    	| [$2bed: ret]
 * 3rd screen
l_2bee:
	move.b	(0x02,a2),d0                    	| [$2bee: ld   a,(ix+$02)] player x
	move.b	#0x40,d1                        	| [$2bf3: ld   b,$40]
	cmp.b	#0x28,d0                         	| [$2bf1: cp   $28]
 * b:	 guard direction??
	jcs	l_2bf9                             	| [$2bf5: jr   c,$2BF9]  jump if player x < $28
	move.b	#0x80,d1                        	| [$2bf7: ld   b,$80]
l_2bf9:
	move.b	(0x03,a2),d0                    	| [$2bf9: ld   a,(ix+$03)] player y
	cmp.b	#0x78,d0                         	| [$2bfc: cp   $78]
	jcs	l_2c17_29                             	| [$2c00: jr   c,$2C17]  exits at y=$29 (below the top exit) if player y < $78

	move.b	(0x03,a2),d0                    	| [$2c02: ld   a,(ix+$03)]
	cmp.b	#0xA0,d0                         	| [$2c05: cp   $A0]
	jcs	l_2c17_71                             	| [$2c09: jr   c,$2C17]  exits at y=$71 (slope exit) if player y < $A0

	move.b	(0x03,a2),d0                    	| [$2c0b: ld   a,(ix+$03)]
	cmp.b	#0xC0,d0                         	| [$2c0e: cp   $C0]
	move.b	#0xA9,d0                        	| [$2c10: ld   a,$A9]
	jcs	l_2c17_A9                             	| [$2c12: jr   c,$2C17]  exits at y=$A9 (pickaxe exit) if player y < $C0
	move.b	#0xC8,d0                        	| [$2c14: ld   a,$C8] exits at the bottom else
	rts                                    	| [$2c16: ret]
l_2c17:

	move.l	a0,-(sp)                        	| [$2c17: push hl]
	move.l	guard_direction_pointer_6095,a0	| [$2c18: ld   hl,(guard_direction_pointer_6095)]
	move.b	d1,(a0)                         	| [$2c1b: ld   (hl),b]
	move.l	(sp)+,a0                        	| [$2c1c: pop  hl]
	rts                                    	| [$2c1d: ret]
l_2c17_71:
	move.b	#0x71,d0                        	| [$2c07: ld   a,$71]
	bra.b	l_2c17
l_2c17_29:
	move.b	#0x29,d0                        	| [$2bfe: ld   a,$29]
	bra.b	l_2c17
l_2c17_A9:
	move.b	#0xA9,d0                        	| [$2bfe: ld   a,$29]
	bra.b	l_2c17

* not the same screen as the player:	different behaviour
* don't wait for the elevator, just jump in the hole and die

l_2c1e:
	move.l	unknown_pointer_6146,a0     	| [$2c1e: ld   hl,(unknown_pointer_6146)]
	addq.w	#4,a0                           	| [$2c21: inc  hl] * 4
	clr.b	d0                               	| [$2c25: xor  a]
	move.b	d0,(a0)                         	| [$2c26: ld   (hl),a]
	rts                                    	| [$2c27: ret]




compute_guard_speed_from_dipsw_2C4D:
	move.b	unknown_61ED,d0                 	| [$2c4d: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$2c50: cp   $01]
	jeq	l_2c78                             	| [$2c54: jr   z,$2C78]
	clr.b	d0                               	| [$2c52: ld   a,$00]
	move.b	score_ten_thousands_player_1_6178,d0     	| [$2c56: ld   a,(score_ten_thousands_player_1_6178)]
	move.b	d0,d1                           	| [$2c59: ld   b,a]
	move.b	current_player_617C,d0          	| [$2c5a: ld   a,(current_player_617C)]
	cmp.b	#0x01,d0                         	| [$2c5d: cp   $01]
	jne	l_2c65                             	| [$2c5f: jr   nz,$2C65]
	move.b	score_ten_thousands_player_2_617B,d0                 	| [$2c61: ld   a,(score_ten_thousands_player_2_617B)]
	move.b	d0,d1                           	| [$2c64: ld   b,a]
l_2c65:
	moveq	#0,d0
	*jbsr	osd_read_dipswitches
	*move.b	dip_switch_B000,d0              	| [$2c65: ld   a,(dip_switch_B000)]
	roxr.b	#3,d0                           	| [$2c68: rr   a] * 3
	not.b	d0                               	| [$2c6e: cpl]
	and.b	#0x03,d0                         	| [$2c6f: and  $03]
	add.b	d1,d0                            	| [$2c71: add  a,b] difficulty level
	clr.b	d1                               	| [$2c72: ld   b,$00]
	jbsr	compute_guard_speed_2C7C          	| [$2c74: call compute_guard_speed_2C7C]
	move.b	d1,d0                           	| [$2c77: ld   a,b]
l_2c78:
	clr.b	d0                               	| [$2c52: ld   a,$00]
	move.b	d0,guard_speed_6164             	| [$2c78: ld   (guard_speed_6164),a]
	rts                                    	| [$2c7b: ret]

 * depending on score & difficulty level, return guard speed in b
 * easy:	0->10000 :	0
 * easy:	10000->20000 :	2
 * easy:	20000-30000:	4
 * easy:	30000->40000 :	5
 * easy:	after 40000 :	 9
 * easy:	after 50000 :	 10
 * medium:	0->10000 :	2
 * medium:	10000->20000:	 4
 * medium:	20000->30000 :	5
 * medium:	30000->40000 :	9
 * medium:	after 40000:	10

compute_guard_speed_2C7C:
	cmp.b	#0x01,d0                         	| [$2c7c: cp   $01]
	bcc.b	0f
	rts                                    	| [$2c7e: ret  c]
0:
	move.b	#0x02,d1                        	| [$2c7f: ld   b,$02]
	cmp.b	#0x02,d0                         	| [$2c81: cp   $02]
	bcc.b	0f
	rts                                    	| [$2c83: ret  c]
0:
	move.b	#0x04,d1                        	| [$2c84: ld   b,$04]
	cmp.b	#0x03,d0                         	| [$2c86: cp   $03]
	bcc.b	0f
	rts                                    	| [$2c88: ret  c]
0:
	move.b	#0x05,d1                        	| [$2c89: ld   b,$05]
	cmp.b	#0x04,d0                         	| [$2c8b: cp   $04]
	bcc.b	0f
	rts                                    	| [$2c8d: ret  c]
0:
	move.b	#0x09,d1                        	| [$2c8e: ld   b,$09]
	cmp.b	#0x05,d0                         	| [$2c90: cp   $05]
	bcc.b	0f
	rts                                    	| [$2c92: ret  c]
0:
	move.b	#0x0A,d1                        	| [$2c93: ld   b,$0A]
	rts                                    	| [$2c95: ret]

l_2c96:
	lea	guard_1_struct_6594,a2         	| [$2c96: ld   ix,guard_1_struct_6594]
	lea	unknown_659C,a3                	| [$2c9a: ld   iy,unknown_659C]
	jbsr	guard_collision_with_pick_2AD1    	| [$2c9e: call guard_collision_with_pick_2AD1]
	cmp.b	#0x01,d0                         	| [$2ca1: cp   $01]
	jne	l_2cb4                             	| [$2ca3: jr   nz,$2CB4]
	move.b	has_bag_6158,d0                 	| [$2ca5: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$2ca8: cp   $01]
	jeq	l_2cb4                             	| [$2caa: jr   z,$2CB4]
	move.b	#0x01,d0                        	| [$2cac: ld   a,$01]
	move.b	d0,unknown_6037                 	| [$2cae: ld   (unknown_6037),a]
	move.b	d0,unknown_6208                 	| [$2cb1: ld   (unknown_6208),a]
l_2cb4:
	lea	guard_2_struct_6598,a2         	| [$2cb4: ld   ix,guard_2_struct_6598]
	lea	unknown_659C,a3                	| [$2cb8: ld   iy,unknown_659C]
	jbsr	guard_collision_with_pick_2AD1    	| [$2cbc: call guard_collision_with_pick_2AD1]
	cmp.b	#0x01,d0                         	| [$2cbf: cp   $01]
	jne	l_2cd2                             	| [$2cc1: jr   nz,$2CD2]
	move.b	has_bag_6158,d0                 	| [$2cc3: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$2cc6: cp   $01]
	jeq	l_2cd2                             	| [$2cc8: jr   z,$2CD2]
	move.b	#0x01,d0                        	| [$2cca: ld   a,$01]
	move.b	d0,unknown_6077                 	| [$2ccc: ld   (unknown_6077),a]
	move.b	d0,unknown_6209                 	| [$2ccf: ld   (unknown_6209),a]
l_2cd2:
	rts                                    	| [$2cd2: ret]


l_2d03:
	move.b	unknown_6210,d0                 	| [$2d03: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$2d06: cp   $01]
	beq.b	0f                               	| [$2d08: ret  nz] [...]
	rts                                    	| [$2d08: ret  nz]
0:
	lea	player_1_score_6176,a3                	| [$2d09: ld   iy,player_1_score_6176]
	jbsr	l_2dd8                            	| [$2d0d: call $2DD8]
	move.b	d1,d0                           	| [$2d10: ld   a,b]
	cmp.b	#0x05,d0                         	| [$2d11: cp   $05]
	jcs	l_2d20                             	| [$2d13: jr   c,$2D20]
	lea	player_2_score_6179,a3                	| [$2d15: ld   iy,player_2_score_6179]
	jbsr	l_2dd8                            	| [$2d19: call $2DD8]
	move.b	d1,d0                           	| [$2d1c: ld   a,b]
	cmp.b	#0x05,d0                         	| [$2d1d: cp   $05]
	bcs.b	0f                               	| [$2d1f: ret  nc] [...]
	rts                                    	| [$2d1f: ret  nc]
0:
l_2d20:
	jbsr	l_2103                            	| [$2d20: call $2103]
	jbsr	high_score_entry_2ffb                            	| [$2d23: call $2FFB]
	move.b	unknown_626C,d0                 	| [$2d26: ld   a,(unknown_626C)]
	cmp.b	#0x01,d0                         	| [$2d29: cp   $01]
	bne.b	0f
	jbsr	l_2a70                            	| [$2d2b: call z,$2A70]
0:
	jbsr	l_2f8d                            	| [$2d2e: call $2F8D]
                   	| [$2d31: ld   a,$01]
                   	| [$2d33: ld   ($A001),a]
                        	| [$2d36: ld   ($A002),a]
	lea	player_1_score_6176,a3                	| [$2d39: ld   iy,player_1_score_6176]
	jbsr	l_2dd8                            	| [$2d3d: call $2DD8]
	move.b	d1,d0                           	| [$2d40: ld   a,b]
	cmp.b	#0x05,d0                         	| [$2d41: cp   $05]
	jcc	l_2d71                             	| [$2d43: jp   nc,$2D71]
	addq.w	#3,a2                           	| [$2d46: inc  ix] * 3
	                    	| [$2d4c: push de]
	                        	| [$2d4c: push de]
	                      	| [$2d4d: ld   de,$FFF0]
	sub.w	#0x10,a2                            	| [$2d50: add  ix,de]
	                        	| [$2d52: pop  de]
	                    	| [$2d52: pop  de]

	move.l	a2,-(sp)                        	| [$2d53: push ix]
	addq.w	#2,a0                           	| [$2d55: inc  hl] * 2

	move.l	a0,-(sp)                        	| [$2d57: push hl]
	jbsr	l_2e04                            	| [$2d58: call $2E04]
	move.b	#0x60,d0                        	| [$2d5b: ld   a,$60]
	move.b	d0,time_61E8                    	| [$2d5d: ld   (time_61E8),a]
	move.l	(sp)+,a0                        	| [$2d60: pop  hl]
	jbsr	l_2f8d                            	| [$2d61: call $2F8D]
	move.l	(sp)+,a2                        	| [$2d64: pop  ix]
	move.b	#0x01,d0                        	| [$2d66: ld   a,$01]
	move.b	d0,unknown_6279                 	| [$2d68: ld   (unknown_6279),a]
	jbsr	l_2e58                            	| [$2d6b: call $2E58]
	jbsr	l_2f8d                            	| [$2d6e: call $2F8D]
l_2d71:
	move.b	unknown_617D,d0                 	| [$2d71: ld   a,(unknown_617D)]
	cmp.b	#0x01,d0                         	| [$2d74: cp   $01]
	jeq	l_2dd3                             	| [$2d76: jr   z,$2DD3]
	jbsr	osd_read_dipswitches              	| [$2d78: ld   a,(dip_switch_B000)]
	and.b	#0x80,d0                         	| [$2d7b: and  $80]
	cmp.b	#0x80,d0                         	| [$2d7d: cp   $80]
	jeq	l_2d89                             	| [$2d7f: jr   z,$2D89]
	clr.b	d0                               	| [$2d81: ld   a,$00]
                  	| [$2d83: ld   ($A001),a]
                  	| [$2d86: ld   ($A002),a]
l_2d89:
	move.b	player_input_6026,d0            	| [$2d89: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$2d8c: and  $80]
	cmp.b	#0x80,d0                         	| [$2d8e: cp   $80]
	jeq	l_2d89                             	| [$2d90: jr   z,$2D89]
	lea	player_2_score_6179,a3                	| [$2d92: ld   iy,player_2_score_6179]
	jbsr	l_2dd8                            	| [$2d96: call $2DD8]
	move.b	d1,d0                           	| [$2d99: ld   a,b]
	cmp.b	#0x05,d0                         	| [$2d9a: cp   $05]
	jcc	l_2dd3                             	| [$2d9c: jr   nc,$2DD3]
	jbsr	l_2f8d                            	| [$2d9e: call $2F8D]
	addq.w	#3,a2                           	| [$2da1: inc  ix] * 3
	                   	| [$2da7: push de]
	                    	| [$2da7: push de]
	                      	| [$2da8: ld   de,$FFF0]
	sub.w	#0x10,a2                            	| [$2dab: add  ix,de]
	                  	| [$2dad: pop  de]
	                 	| [$2dad: pop  de]

	move.l	a2,-(sp)                        	| [$2dae: push ix]
	addq.w	#2,a0                           	| [$2db0: inc  hl] * 2

	move.l	a0,-(sp)                        	| [$2db2: push hl]
	jbsr	l_2e04                            	| [$2db3: call $2E04]
	move.b	#0x60,d0                        	| [$2db6: ld   a,$60]
	move.b	d0,time_61E8                    	| [$2db8: ld   (time_61E8),a]
	move.l	(sp)+,a0                        	| [$2dbb: pop  hl]
	jbsr	l_2f8d                            	| [$2dbc: call $2F8D]
	move.l	(sp)+,a2                        	| [$2dbf: pop  ix]
	clr.b	d0                               	| [$2dc1: ld   a,$00]
	move.b	d0,unknown_6279                 	| [$2dc3: ld   (unknown_6279),a]
	jbsr	busy_wait_2f19                            	| [$2dc6: call $2F19]
	jbsr	busy_wait_2f19                            	| [$2dc9: call $2F19]
	jbsr	busy_wait_2f19                            	| [$2dcc: call $2F19]
	jbsr	l_2e58                            	| [$2dcf: call $2E58]
	rts                                    	| [$2dd2: ret]
l_2dd3:
	clr.b	d0                               	| [$2dd3: xor  a]
	move.b	d0,unknown_6267                 	| [$2dd4: ld   (unknown_6267),a]
	rts                                    	| [$2dd7: ret]
l_2dd8:
	lea	unknown_6217,a2                	| [$2dd8: ld   ix,unknown_6217]
	move.w	#0x0010,d3                      	| [$2ddc: ld   de,$0010] 16
	move.w	#0x920F,d6                      	| [$2ddf: ld   hl,$920F]
	move.b	#0x05,d1                        	| [$2de2: ld   b,$05]
l_2de4:
	move.b	(0x02,a3),d0                    	| [$2de4: ld   a,(iy+$02)]
	cmp.b	(0x02,a2),d0                     	| [$2de7: cp   (ix+$02)]
	bcc.b	0f                               	| [$2dea: ret  c] [...]
	rts                                    	| [$2dea: ret  c]
0:
	jne	l_2dfd                             	| [$2deb: jr   nz,$2DFD]
	move.b	(0x01,a3),d0                    	| [$2ded: ld   a,(iy+$01)]
	cmp.b	(0x01,a2),d0                     	| [$2df0: cp   (ix+$01)]
	bcc.b	0f                               	| [$2df3: ret  c] [...]
	rts                                    	| [$2df3: ret  c]
0:
	jne	l_2dfd                             	| [$2df4: jr   nz,$2DFD]
	move.b	(0x00,a3),d0                    	| [$2df6: ld   a,(iy+$00)]
	cmp.b	(0x00,a2),d0                     	| [$2df9: cp   (ix+$00)]
	bcc.b	0f                               	| [$2dfc: ret  c] [...]
	rts                                    	| [$2dfc: ret  c]
0:
l_2dfd:
	add.w	d3,a2                            	| [$2dfd: add  ix,de]
	subq.w	#2,d6                           	| [$2dff: dec  hl] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_2de4                             	| [$2e01: djnz $2DE4]
	rts                                    	| [$2e03: ret]
l_2e04:
	movem.w	d1/d2,-(sp)                    	| [$2e04: push bc]
	lea	unknown_6217,a2                	| [$2e05: ld   ix,unknown_6217]
l_2e09:
	move.b	d1,d0                           	| [$2e09: ld   a,b]
	cmp.b	#0x04,d0                         	| [$2e0a: cp   $04]
	jcc	l_2e1f                             	| [$2e0c: jr   nc,$2E1F]
	movem.w	d1/d2,-(sp)                    	| [$2e0e: push bc]
	move.b	#0x10,d1                        	| [$2e0f: ld   b,$10]
l_2e11:
	move.b	(0x10,a2),d0                    	| [$2e11: ld   a,(ix+$10)]
	move.b	d0,(a2)+                    	| [$2e14: ld   (ix+$00),a]
	                           	| [$2e17: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_2e11                             	| [$2e19: djnz $2E11]

	movem.w	(sp)+,d1/d2                    	| [$2e1b: pop  bc]
	addq.b	#1,d1                           	| [$2e1c: inc  b]
	jra	l_2e09                             	| [$2e1d: jr   $2E09]
l_2e1f:

	movem.w	(sp)+,d1/d2                    	| [$2e1f: pop  bc]
	lea	unknown_6217,a2                	| [$2e20: ld   ix,unknown_6217]
l_2e24:
	move.b	d1,d0                           	| [$2e24: ld   a,b]
	cmp.b	#0x04,d0                         	| [$2e25: cp   $04]
	jcc	l_2e2e                             	| [$2e27: jr   nc,$2E2E]
	add.w	d3,a2                            	| [$2e29: add  ix,de]
	addq.b	#1,d1                           	| [$2e2b: inc  b]
	jra	l_2e24                             	| [$2e2c: jr   $2E24]
l_2e2e:
	move.b	(0x00,a3),d0                    	| [$2e2e: ld   a,(iy+$00)]
	move.b	d0,(0x00,a2)                    	| [$2e31: ld   (ix+$00),a]
	move.b	(0x01,a3),d0                    	| [$2e34: ld   a,(iy+$01)]
	move.b	d0,(0x01,a2)                    	| [$2e37: ld   (ix+$01),a]
	move.b	(0x02,a3),d0                    	| [$2e3a: ld   a,(iy+$02)]
	move.b	d0,(0x02,a2)                    	| [$2e3d: ld   (ix+$02),a]
	movem.w	d1/d2,-(sp)                    	| [$2e40: push bc]
	move.b	#0x0D,d1                        	| [$2e41: ld   b,$0D]

	move.l	a2,-(sp)                        	| [$2e43: push ix]
	addq.w	#3,a2                           	| [$2e45: inc  ix] * 3
	move.b	#0x10,d0                        	| [$2e4b: ld   a,$10]
l_2e4d:
	move.b	d0,(0x00,a2)                    	| [$2e4d: ld   (ix+$00),a]
	addq.w	#1,a2                           	| [$2e50: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_2e4d                             	| [$2e52: djnz $2E4D]
	move.l	(sp)+,a2                        	| [$2e54: pop  ix]

	movem.w	(sp)+,d1/d2                    	| [$2e56: pop  bc]
	rts                                    	| [$2e57: ret]
l_2e58:
	move.b	#0x11,d1                        	| [$2e58: ld   b,$11]
	clr.b	d0                               	| [$2e5a: ld   a,$00]
	move.b	d0,unknown_6278                 	| [$2e5c: ld   (unknown_6278),a]
l_2e5f:
	move.b	unknown_6279,d0                 	| [$2e5f: ld   a,(unknown_6279)]
	cmp.b	#0x01,d0                         	| [$2e62: cp   $01]
	jne	l_2e6b                             	| [$2e64: jr   nz,$2E6B]
l_2e66:
	jbsr	l_309c                            	| [$2e66: call $309C]
	jra	l_2e77                             	| [$2e69: jr   $2E77]
l_2e6b:
	jbsr	osd_read_dipswitches              	| [$2e6b: ld   a,(dip_switch_B000)]
	and.b	#0x80,d0                         	| [$2e6e: and  $80]
	cmp.b	#0x80,d0                         	| [$2e70: cp   $80]
	jeq	l_2e66                             	| [$2e72: jr   z,$2E66]
	jbsr	l_30b8                            	| [$2e74: call $30B8]
l_2e77:
	move.b	unknown_6278,d0                 	| [$2e77: ld   a,(unknown_6278)]
	and.b	#0x10,d0                         	| [$2e7a: and  $10]
	cmp.b	#0x10,d0                         	| [$2e7c: cp   $10]
	bne.b	0f
	jbsr	l_2eb2                            	| [$2e7e: call z,$2EB2]
0:
	move.b	unknown_6278,d0                 	| [$2e81: ld   a,(unknown_6278)]
	and.b	#0x08,d0                         	| [$2e84: and  $08]
	cmp.b	#0x08,d0                         	| [$2e86: cp   $08]
	bne.b	0f
	jbsr	l_2ec1                            	| [$2e88: call z,$2EC1]
0:
	move.b	unknown_6278,d0                 	| [$2e8b: ld   a,(unknown_6278)]
	and.b	#0x40,d0                         	| [$2e8e: and  $40]
	cmp.b	#0x40,d0                         	| [$2e90: cp   $40]
	bne.b	0f
	jbsr	l_2ed0                            	| [$2e92: call z,$2ED0]
0:
	move.b	unknown_6278,d0                 	| [$2e95: ld   a,(unknown_6278)]
	and.b	#0x20,d0                         	| [$2e98: and  $20]
	cmp.b	#0x20,d0                         	| [$2e9a: cp   $20]
	bne.b	0f
	jbsr	l_2eee                            	| [$2e9c: call z,$2EEE]
0:
	move.b	unknown_6278,d0                 	| [$2e9f: ld   a,(unknown_6278)]
	and.b	#0x80,d0                         	| [$2ea2: and  $80]
	cmp.b	#0x80,d0                         	| [$2ea4: cp   $80]
	bne.b	0f                               	| [$2ea6: ret  z] [...]
	rts                                    	| [$2ea6: ret  z]
0:
	move.b	time_61E8,d0                    	| [$2ea7: ld   a,(time_61E8)]
	cmp.b	#0x00,d0                         	| [$2eaa: cp   $00]
	bne.b	0f                               	| [$2eac: ret  z] [...]
	rts                                    	| [$2eac: ret  z]
0:
	jbsr	l_2f0a                            	| [$2ead: call $2F0A]
	jra	l_2e5f                             	| [$2eb0: jr   $2E5F]
l_2eb2:
	move.b	d1,d0                           	| [$2eb2: ld   a,b]
	cmp.b	#0x29,d0                         	| [$2eb3: cp   $29]
	jne	l_2eb9                             	| [$2eb5: jr   nz,$2EB9]
	move.b	#0x10,d1                        	| [$2eb7: ld   b,$10]
l_2eb9:
	addq.b	#1,d1                           	| [$2eb9: inc  b]
	jbsr	l_2f0a                            	| [$2eba: call $2F0A]
	jbsr	busy_wait_2f19                            	| [$2ebd: call $2F19]
	rts                                    	| [$2ec0: ret]
l_2ec1:
	move.b	d1,d0                           	| [$2ec1: ld   a,b]
	cmp.b	#0x10,d0                         	| [$2ec2: cp   $10]
	jne	l_2ec8                             	| [$2ec4: jr   nz,$2EC8]
	move.b	#0x2A,d1                        	| [$2ec6: ld   b,$2A]
l_2ec8:
	subq.b	#1,d1                           	| [$2ec8: dec  b]
	jbsr	l_2f0a                            	| [$2ec9: call $2F0A]
	jbsr	busy_wait_2f19                            	| [$2ecc: call $2F19]
	rts                                    	| [$2ecf: ret]
l_2ed0:
	move.b	d6,d0                           	| [$2ed0: ld   a,l]
	and.b	#0xF0,d0                         	| [$2ed1: and  $F0]
	                         	| [$2ed3: cp   $00]
	jne	l_2edb                             	| [$2ed5: jr   nz,$2EDB]
	move.b	d6,d0                           	| [$2ed7: ld   a,h]
	lsr.w	#8,d0
	cmp.b	#0x92,d0                         	| [$2ed8: cp   $92]
	bne.b	0f                               	| [$2eda: ret  z] [...]
	rts                                    	| [$2eda: ret  z]
0:
l_2edb:
	move.b	#0x10,d1                        	| [$2edb: ld   b,$10]
	jbsr	l_2f0a                            	| [$2edd: call $2F0A]
	move.w	#0x0020,d3                      	| [$2ee0: ld   de,$0020] 32
	add.w	d3,d6                            	| [$2ee3: add  hl,de]
	subq.b	#1,a2                           	| [$2ee4: dec  ix]
	jbsr	osd_r_videoram
	move.b	d0,d1                         	| [$2ee6: ld   b,(hl)]
	jbsr	l_2f0a                            	| [$2ee7: call $2F0A]
	jbsr	busy_wait_2f19                            	| [$2eea: call $2F19]
	rts                                    	| [$2eed: ret]
l_2eee:
	move.b	d6,d0                           	| [$2eee: ld   a,l]
	and.b	#0xF0,d0                         	| [$2eef: and  $F0]
	cmp.b	#0x80,d0                         	| [$2ef1: cp   $80]
	jne	l_2ef9                             	| [$2ef3: jr   nz,$2EF9]
	move.w	d6,d0                           	| [$2ef5: ld   a,h]
	lsr.w	#8,d0
	cmp.b	#0x90,d0                         	| [$2ef6: cp   $90]
	bne.b	0f                               	| [$2ef8: ret  z] [...]
	rts                                    	| [$2ef8: ret  z]
0:
l_2ef9:
	move.w	#0x0020,d3                      	| [$2ef9: ld   de,$0020] 32
	                               	| [$2efc: xor  a]
	sub.w	d3,d6		| [sbc  hl,de]
	addq.w	#1,a2                           	| [$2eff: inc  ix]
	move.b	#0x11,d1                        	| [$2f01: ld   b,$11]
	jbsr	l_2f0a                            	| [$2f03: call $2F0A]
	jbsr	busy_wait_2f19                            	| [$2f06: call $2F19]
	rts                                    	| [$2f09: ret]
l_2f0a:
	move.b	d1,d0                           	| [$2f0a: ld   a,b]
	move.b	d0,(a2)                    	| [$2f0b: ld   (ix+$00),a]
l_2f0e:
	jbsr	osd_w_videoram                         	| [$2f0e: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$2f0f: push hl]
	                           	| [$2f10: ld   a,h]
	add.w	#0x0800,d6                         	| [$2f11: add  a,$08]
	                           	| [$2f13: ld   h,a]
	move.b	#0x04,d0                        	| [$2f14: ld   a,$04]
	jbsr	osd_w_colorram                         	| [$2f16: ld   (hl),a]
	move.w	(sp)+,d6                       	| [$2f17: pop  hl]
	rts                                    	| [$2f18: ret]
busy_wait_2f19:
	* TODO wait some time
	move.w	#0x0F0,0xDFF180
	rts                                    	| [$2f2c: ret]
l_2f2d:
	move.w	#0x9325,d6                      	| [$2f2d: ld   hl,$9325]
	lea	game_mem+0x574F,a1                      	| [$2f30: ld   de,$574F]
	jbsr	display_text_30F9                 	| [$2f33: call display_text_30F9]
	move.w	#0x9205,d6                      	| [$2f36: ld   hl,$9205]
	lea	game_mem+0x5755,a1                      	| [$2f39: ld   de,$5755]
	jbsr	display_text_30F9                 	| [$2f3c: call display_text_30F9]
	move.w	#0x92E3,d6                      	| [$2f3f: ld   hl,$92E3]
	lea	game_mem+0x5690,a1                      	| [$2f42: ld   de,$5690]
	jbsr	display_text_30F9                 	| [$2f45: call display_text_30F9]
	move.w	#0x9883,d6                      	| [$2f48: ld   hl,$9883]
	move.b	#0x0E,d0                        	| [$2f4b: ld   a,$0E]
	jbsr	write_attribute_on_line_5605      	| [$2f4d: call write_attribute_on_line_5605]
	lea	game_mem+0x4D00,a1                      	| [$2f50: ld   de,$4D00]
	move.w	#0x9382,d6                      	| [$2f53: ld   hl,$9382]
	move.b	#0x12,d0                        	| [$2f56: ld   a,$12]
	exg	d0,d7                              	| [$2f58: ex   af,af']
 	jbsr	write_text_55f0                   	| [$2f59: call write_text_55f0]
	lea	game_mem+0x4D1B(pc),a1                      	| [$2f5c: ld   de,$4D1B]
	move.w	#0x9390,d6                      	| [$2f5f: ld   hl,$9390]
	move.b	#0x12,d0                        	| [$2f62: ld   a,$12]
	exg	d0,d7                              	| [$2f64: ex   af,af']
	jbsr	write_text_55f0                   	| [$2f65: call write_text_55f0]
	move.b	#0x0D,d1                        	| [$2f68: ld   b,$0D]
	move.b	#0x8B,d0                        	| [$2f6a: ld   a,$8B]
	move.w	#0x9383,d6                      	| [$2f6c: ld   hl,$9383]
	jbsr	l_2f7d                            	| [$2f6f: call $2F7D]
	move.b	#0x8E,d0                        	| [$2f72: ld   a,$8E]
	move.b	#0x0D,d1                        	| [$2f74: ld   b,$0D]
	move.w	#0x9063,d6                      	| [$2f76: ld   hl,$9063]
	jbsr	l_2f7d                            	| [$2f79: call $2F7D]
	rts                                    	| [$2f7c: ret]
l_2f7d:
	jbsr	osd_w_videoram                         	| [$2f7d: ld   (hl),a]

	                        	| [$2f7e: push hl]
	move.w	d6,-(sp)                        	| [$2f7f: push af]
	                           	| [$2f80: ld   a,h]
	add.w	#0x0800,d6                         	| [$2f81: add  a,$08]
	                           	| [$2f83: ld   h,a]
	move.b	#0x10,d0                        	| [$2f84: ld   a,$10]
	jbsr	osd_w_colorram                         	| [$2f86: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$2f87: pop  af]
	                        	| [$2f88: pop  hl]
	addq.w	#1,d6                           	| [$2f89: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2f7d                             	| [$2f8a: djnz $2F7D]
	rts                                    	| [$2f8c: ret]

l_2f8d:

	move.l	a2,-(sp)                        	| [$2f8d: push ix]
	movem.w	d1/d2,-(sp)                    	| [$2f8f: push bc]

	move.w	d6,-(sp)                        	| [$2f90: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2f91: push de]
	move.l	a1,-(sp)                        	| [$2f91: push de]
	jbsr	l_2f2d                            	| [$2f92: call $2F2D]
	move.w	#0x0020,d3                      	| [$2f95: ld   de,$0020] 32
	move.w	#0x928F,d6                      	| [$2f98: ld   hl,$928F]
	lea	unknown_6217,a2                	| [$2f9b: ld   ix,unknown_6217]
	move.b	#0x05,d1                        	| [$2f9f: ld   b,$05]
l_2fa1:
	movem.w	d1/d2,-(sp)                    	| [$2fa1: push bc]

	move.w	d6,-(sp)                        	| [$2fa2: push hl]
	move.b	#0x03,d1                        	| [$2fa3: ld   b,$03]
l_2fa5:
	move.b	(0x00,a2),d0                    	| [$2fa5: ld   a,(ix+$00)]
	and.b	#0x0F,d0                         	| [$2fa8: and  $0F]
	jbsr	l_2f0e                            	| [$2faa: call $2F0E]
	move.b	(0x00,a2),d0                    	| [$2fad: ld   a,(ix+$00)]
	ror.b	#4,d0                            	| [$2fb0: rrca] * 4
	and.b	#0x0F,d0                         	| [$2fb4: and  $0F]
	move.w	#0x0020,d3                      	| [$2fb6: ld   de,$0020] 32
	add.w	d3,d6                            	| [$2fb9: add  hl,de]
	jbsr	l_2f0e                            	| [$2fba: call $2F0E]
	addq.w	#1,a2                           	| [$2fbd: inc  ix]
	add.w	d3,d6                            	| [$2fbf: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2fa5                             	| [$2fc0: djnz $2FA5]
	move.w	(sp)+,d6                        	| [$2fc2: pop  hl]
	subq.b	#2,d6                           	| [$2fc3: dec  hl] * 2

	movem.w	(sp)+,d1/d2                    	| [$2fc5: pop  bc]
	move.w	#0x000D,d3                      	| [$2fc6: ld   de,$000D] 13
	add.w	d3,a2                            	| [$2fc9: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2fa1                             	| [$2fcb: djnz $2FA1]
	move.w	#0x0020,d3                      	| [$2fcd: ld   de,$0020] 32
	lea	unknown_6217,a2                	| [$2fd0: ld   ix,unknown_6217]
	move.w	#0x920F,d6                      	| [$2fd4: ld   hl,$920F]
	move.b	#0x05,d1                        	| [$2fd7: ld   b,$05]
l_2fd9:
	movem.w	d1/d2,-(sp)                    	| [$2fd9: push bc]

	move.w	d6,-(sp)                        	| [$2fda: push hl]
	addq.w	#3,a2                           	| [$2fdb: inc  ix] * 3
	move.b	#0x0D,d1                        	| [$2fe1: ld   b,$0D]
l_2fe3:
	move.b	(a2),d0                    	| [$2fe3: ld   a,(ix+$00)]
	jbsr	l_2f0e                            	| [$2fe6: call $2F0E]
	addq.w	#1,a2                           	| [$2fe9: inc  ix]
	sub.w	d3,d6			| [sbc  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2fe3                             	| [$2fed: djnz $2FE3]
	move.w	(sp)+,d6                        	| [$2fef: pop  hl]
	subq.b	#2,d6                           	| [$2ff0: dec  hl] * 2

	movem.w	(sp)+,d1/d2                    	| [$2ff2: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_2fd9                             	| [$2ff3: djnz $2FD9]
	move.l	(sp)+,a1                        	| [$2ff5: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$2ff5: pop  de]
	move.w	(sp)+,d6                        	| [$2ff6: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$2ff7: pop  bc]
	move.l	(sp)+,a2                        	| [$2ff8: pop  ix]
	rts                                    	| [$2ffa: ret]
	* high score entry
high_score_entry_2ffb:
	move.b	#0x01,d0                        	| [$2ffb: ld   a,$01]
	move.b	d0,unknown_6267                 	| [$2ffd: ld   (unknown_6267),a]
	move.w	#0x9372,d6                      	| [$3000: ld   hl,$9372]
	lea	game_mem+0x571E,a1                      	| [$3003: ld   de,$571E]
	* "MOVE JOYSTICK"
	jbsr	display_text_30F9                 	| [$3006: call display_text_30F9]
	move.w	#0x9373,d6                      	| [$3009: ld   hl,$9373]
	* "TO DISPLAY YOUR NAME"
	lea	game_mem+0x5737,a1                      	| [$300c: ld   de,$5737]
	jbsr	display_text_30F9                 	| [$300f: call display_text_30F9]
	move.w	#0x937D,d6                      	| [$3012: ld   hl,$937D]
	* "END BY ACTION BUTTON"
	lea	game_mem+0x5775,a1                      	| [$3015: ld   de,$5775]
	jbsr	display_text_30F9                 	| [$3018: call display_text_30F9]
	lea	game_mem+0x4D00,a1                      	| [$301b: ld   de,$4D00]
	move.w	#0x9391,d6                      	| [$301e: ld   hl,$9391]
	move.b	#0x12,d0                        	| [$3021: ld   a,$12]
	exg	d0,d7                              	| [$3023: ex   af,af']
 	jbsr	write_text_55f0                   	| [$3024: call write_text_55f0]
	lea  game_mem+0x4D1B,a1                      	| [$3027: ld   de,$4D1B]
	move.w  #0x939E,d6                      	| [$302a: ld   hl,$939E]
	move.b	#0x12,d0                        	| [$302d: ld   a,$12]
	exg	d0,d7                              	| [$302f: ex   af,af']
	jbsr	write_text_55f0                   	| [$3030: call write_text_55f0]
	move.b	#0x0C,d1                        	| [$3033: ld   b,$0C]
	move.w  #0x9392,d6                      	| [$3035: ld   hl,$9392]
	move.b	#0x8B,d0                        	| [$3038: ld   a,$8B]
	jbsr	l_2f7d                            	| [$303a: call $2F7D]
	move.b	#0x0C,d1                        	| [$303d: ld   b,$0C]
	move.b	#0x8E,d0                        	| [$303f: ld   a,$8E]
	move.w  #0x9072,d6                      	| [$3041: ld   hl,$9072]
	jbsr	l_2f7d                            	| [$3044: call $2F7D]
	lea  game_mem+0x4D36,a1                      	| [$3047: ld   de,$4D36]
	move.w  #0x9275,d6                      	| [$304a: ld   hl,$9275]
	jbsr	l_30db                            	| [$304d: call $30DB]
	lea  game_mem+0x4D4A,a1                      	| [$3050: ld   de,$4D4A]
	move.w  #0x91B8,d6                      	| [$3053: ld   hl,$91B8]
	jbsr	l_30db                            	| [$3056: call $30DB]
	lea  game_mem+0x4D5E,a1                      	| [$3059: ld   de,$4D5E]
	move.w  #0x929B,d6                      	| [$305c: ld   hl,$929B]
	jbsr	l_30db                            	| [$305f: call $30DB]
	lea  game_mem+0x4D72,a1                      	| [$3062: ld   de,$4D72]
	move.w  #0x92F8,d6                      	| [$3065: ld   hl,$92F8]
	jbsr	l_30db                            	| [$3068: call $30DB]
	lea  game_mem+0x4D86,a1                      	| [$306b: ld   de,$4D86]
	move.w  #0x9258,d6                      	| [$306e: ld   hl,$9258]
	jbsr	l_30d4                            	| [$3071: call $30D4]
	lea  game_mem+0x4D8C,a1                      	| [$3074: ld   de,$4D8C]
	move.w  #0x9216,d6                      	| [$3077: ld   hl,$9216]
	jbsr	l_30d4                            	| [$307a: call $30D4]
	lea  game_mem+0x4D8E,a1                      	| [$307d: ld   de,$4D8E]
	move.w  #0x9217,d6                      	| [$3080: ld   hl,$9217]
	jbsr	l_30d4                            	| [$3083: call $30D4]
	lea  game_mem+0x4D90,a1                      	| [$3086: ld   de,$4D90]
	move.w  #0x9219,d6                      	| [$3089: ld   hl,$9219]
	jbsr	l_30d4                            	| [$308c: call $30D4]
	lea  game_mem+0x4D92,a1                      	| [$308f: ld   de,$4D92]
	move.w  #0x921A,d6                      	| [$3092: ld   hl,$921A]
	jbsr	l_30d4                            	| [$3095: call $30D4]
	jbsr	l_2f2d                            	| [$3098: call $2F2D]
	rts                                    	| [$309b: ret]
	* probably speech synthesis ???
l_30b8:
	rts
	
l_309c:
	rts                                    	| [$30d3: ret]
l_30d4:
	move.b	#0x14,d0                        	| [$30d4: ld   a,$14]
	exg	d0,d7                              	| [$30d6: ex   af,af']
	jbsr	write_text_55f0                   	| [$30d7: call write_text_55f0]
	rts                                    	| [$30da: ret]
l_30db:
	move.b	#0x18,d0                        	| [$30db: ld   a,$18]
	exg	d0,d7                              	| [$30dd: ex   af,af']
	*jbsr	l_30e5                            	| [$30de: call $30E5]
	jbsr	write_text_55f0                   	| [$30e1: call write_text_55f0]
	rts                                    	| [$30e4: ret]

l_30e5:
	move.w	d0,-(sp)                        	| [$30e5: push af]
	jbsr	osd_read_dipswitches              	| [$30e6: ld   a,(dip_switch_B000)]
	and.b	#0x20,d0                         	| [$30e9: and  $20]
	cmp.b	#0x20,d0                         	| [$30eb: cp   $20]
	jne	l_30f7                             	| [$30ed: jr   nz,$30F7]
* fix stuff for french (disabled ATM)
	move.l	a0,-(sp)                        	| [$30ef: push hl]
	exg	d3,a0                              	| [$30f0: ex   de,hl]
	move.w	#0x000A,d3                      	| [$30f1: ld   de,$000A] 10
	add.w	d3,a0                            	| [$30f4: add  hl,de]
	exg	d3,a0                              	| [$30f5: ex   de,hl]
	move.l	(sp)+,a0                        	| [$30f6: pop  hl]
l_30f7:
	move.w	(sp)+,d0                        	| [$30f7: pop  af]
	rts                                    	| [$30f8: ret]


* < A1: text
display_text_30F9:
*	move.w	d0,-(sp)                        	| [$30f9: push af]
*	move.b	dip_switch_B000,d0              	| [$30fa: ld   a,(dip_switch_B000)]
*	and.b	#0x20,d0                         	| [$30fd: and  $20]
*	cmp.b	#0x20,d0                         	| [$30ff: cp   $20]
*	jeq	l_310b                             	| [$3101: jr   z,$310B]
*
*	move.l	a0,-(sp)                        	| [$3103: push hl]
*	exg	a1,a0                              	| [$3104: ex   de,hl]
*	                      	| [$3105: ld   de,$0196]
*	add.w	#0x196,a0                            	| [$3108: add  hl,de]
*	exg	a1,a0                              	| [$3109: ex   de,hl]
*	move.l	(sp)+,a0                        	| [$310a: pop  hl]
*l_310b:
*	move.w	(sp)+,d0                        	| [$310b: pop  af]
	jra		display_text_55d9                            	| [$310c: call $55D9]
	rts                                    	| [$310f: ret]	
l_3110:
	lea	game_mem+0x575A,a1                      	| [$3110: ld   de,$575A]
	move.w	#0x93A0,d6                      	| [$3113: ld   hl,$93A0]
	jbsr	display_text_30F9                 	| [$3116: call display_text_30F9]
	lea	game_mem+0x5763,a1                      	| [$3119: ld   de,$5763]
	move.w	#0x9120,d6                      	| [$311c: ld   hl,$9120]
	jbsr	display_text_30F9                 	| [$311f: call display_text_30F9]
	rts                                    	| [$3122: ret]

l_3123:
	move.b	player_input_6026,d0            	| [$3123: ld   a,(player_input_6026)]
	cmp.b	#0xA5,d0                         	| [$3126: cp   $A5]
	beq.b	0f
	rts                                    	| [$3128: ret  nz]  strange mode????
0:
	lea	game_mem+0x3662,a1                      	| [$3129: ld   de,$3662]
	move.w	#0x93A2,d6                      	| [$312c: ld   hl,$93A2]
	jbsr	write_text_55f0                   	| [$312f: call write_text_55f0]
	lea	game_mem+0x367F,a1                      	| [$3132: ld   de,$367F]
	move.w	#0x93A3,d6                      	| [$3135: ld   hl,$93A3]
	jbsr	write_text_55f0                   	| [$3138: call write_text_55f0]
	jra	l_3123                             	| [$313b: jr   $3123]
l_313d:
	lea	unknown_61CC,a2                	| [$313d: ld   ix,unknown_61CC]
	clr.w	d0                               	| [$3141: xor  a]
	move.b	d0,(0x03,a2)                    	| [$3142: ld   (ix+$03),a]
	move.w	d0,pickaxe_timer_duration_61E0  	| [$3145: ld   (pickaxe_timer_duration_61E0),a]
												| [$3148: ld   (unknown_61E1),a]
	st.b	d0                                	| [$314b: ld   a,$FF]
	move.b	d0,unknown_659F                 	| [$314d: ld   (unknown_659F),a]
	rts                                    	| [$3150: ret]
	
draw_bag_3151:
	move.b	(0x01,a2),d6                    	| [$3155: ld   a,(ix+$01)]
	lsl.w	#8,d6
	move.b	(0x00,a2),d6                    	| [$3151: ld   a,(ix+$00)]
												| [$3154: ld   l,a]
												| [$3158: ld   h,a]
	move.b	player_screen_600D,d0           	| [$3159: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$315c: ld   b,a]
	move.b	(0x02,a2),d0                    	| [$315d: ld   a,(ix+$02)]
	cmp.b	d1,d0                            	| [$3160: cp   b]
	beq.b	0f
	rts                                    	| [$3161: ret  nz]
0:
	* bags
	move.b	#0xD0,d0                        	| [$3162: ld   a,$D0]
	jbsr	osd_w_videoram                         	| [$3164: ld   (hl),a]

	move.l	d6,-(sp)                        	| [$3165: push hl]
	jbsr	l_3197                            	| [$3166: call $3197]
	move.l	(sp)+,d6                        	| [$3169: pop  hl]
	addq.w	#1,d6                           	| [$316a: inc  hl]
* read screen tile
	jbsr	osd_r_videoram                         	| [$316b: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$316c: cp   $ED]
	jeq	l_317c                             	| [$316e: jr   z,$317C]
	cmp.b	#0xEF,d0                         	| [$3170: cp   $EF]
	jeq	l_317c                             	| [$3172: jr   z,$317C]
	move.b	#0xD1,d0                        	| [$3174: ld   a,$D1]
	jbsr	osd_w_videoram                         	| [$3176: ld   (hl),a]

	move.l	d6,-(sp)                        	| [$3177: push hl]
	jbsr	l_3197                            	| [$3178: call $3197]
	move.l	(sp)+,d6                        	| [$317b: pop  hl]
l_317c:
	move.w	#0x0020,d3                      	| [$317c: ld   de,$0020] 32
	add.w	d3,a6                            	| [$317f: add  hl,de]
* read screen tile
	jbsr	osd_r_videoram                         	| [$3180: ld   a,(hl)]
	cmp.b	#0xD1,d0                         	| [$3181: cp   $D1]
	bne.b	0f
	rts                                    	| [$3183: ret  z]
0:
	cmp.b	#0x67,d0                         	| [$3184: cp   $67]
	bne.b	0f
	rts                                    	| [$3186: ret  z]
0:
	cmp.b	#0x27,d0                         	| [$3187: cp   $27]
	bne.b	0f
	rts                                    	| [$3189: ret  z]
0:
	cmp.b	#0xED,d0                         	| [$318a: cp   $ED]
	bne.b	0f
	rts                                    	| [$318c: ret  z]
0:
	cmp.b	#0xEF,d0                         	| [$318d: cp   $EF]
	bne.b	0f
	rts                                    	| [$318f: ret  z]
0:
	move.b	#0xD3,d0                        	| [$3190: ld   a,$D3]
	jbsr	osd_w_videoram                         	| [$3192: ld   (hl),a]
	jbsr	l_3197                            	| [$3193: call $3197]
	rts                                    	| [$3196: ret]
l_3197:
	move.b	d5,d0                           	| [$3197: ld   a,h]
	cmp.b	#0x00,d0                         	| [$3198: cp   $00]
	bne.b	0f
	rts                                    	| [$319a: ret  z]
0:
	add.b	#0x08,d0                         	| [$319b: add  a,$08]
	move.b	d0,d5                           	| [$319d: ld   h,a]
	move.b	unknown_627A,d0                 	| [$319e: ld   a,(unknown_627A)]
	jbsr	osd_w_videoram                         	| [$31a1: ld   (hl),a]
	rts                                    	| [$31a2: ret]
l_31a3:
	lea	guard_1_struct_6594,a2         	| [$31a3: ld   ix,guard_1_struct_6594]
	move.b	guard_1_in_elevator_603B,d0     	| [$31a7: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$31aa: cp   $01]
	bne.b	0f
	rts                                    	| [$31ac: ret  z]
0:
	move.b	unknown_6156,d0                 	| [$31ad: ld   a,(unknown_6156)]
	cmp.b	#0x01,d0                         	| [$31b0: cp   $01]
	bne.b	0f
	rts                                    	| [$31b2: ret  z]
0:
	move.b	unknown_6211,d0                 	| [$31b3: ld   a,(unknown_6211)]
	cmp.b	#0x01,d0                         	| [$31b6: cp   $01]
	bne.b	0f
	rts                                    	| [$31b8: ret  z]
0:
	jbsr	reset_guard_position_31DF         	| [$31b9: call reset_guard_position_31DF]
	move.b	d1,d0                           	| [$31bc: ld   a,b]
	move.b	d0,guard_1_screen_6099          	| [$31bd: ld   (guard_1_screen_6099),a]
	rts                                    	| [$31c0: ret]
l_31c1:
	lea	guard_2_struct_6598,a2         	| [$31c1: ld   ix,guard_2_struct_6598]
	move.b	guard_2_in_elevator_607B,d0     	| [$31c5: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$31c8: cp   $01]
	bne.b	0f
	rts                                    	| [$31ca: ret  z]
0:
	move.b	unknown_6157,d0                 	| [$31cb: ld   a,(unknown_6157)]
	cmp.b	#0x01,d0                         	| [$31ce: cp   $01]
	bne.b	0f
	rts                                    	| [$31d0: ret  z]
0:
	move.b	unknown_6212,d0                 	| [$31d1: ld   a,(unknown_6212)]
	cmp.b	#0x01,d0                         	| [$31d4: cp   $01]
	bne.b	0f
	rts                                    	| [$31d6: ret  z]
0:
	jbsr	reset_guard_position_31DF         	| [$31d7: call reset_guard_position_31DF]
	move.b	d1,d0                           	| [$31da: ld   a,b]
	move.b	d0,guard_2_screen_609A          	| [$31db: ld   (guard_2_screen_609A),a]
	rts                                    	| [$31de: ret]

reset_guard_position_31DF:
	move.b	#0x80,d0                        	| [$31df: ld   a,$80]
	move.b	d0,(0x02,a2)                    	| [$31e1: ld   (ix+$02),a]
	move.b	#0x10,d0                        	| [$31e4: ld   a,$10]
	move.b	d0,(0x03,a2)                    	| [$31e6: ld   (ix+$03),a]
	move.b	#0x03,d1                        	| [$31e9: ld   b,$03]
	move.b	player_screen_600D,d0           	| [$31eb: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$31ee: cp   $03]
	beq.b	0f
	rts                                    	| [$31f0: ret  nz]
0:
	move.b	#0x02,d1                        	| [$31f1: ld   b,$02]
	rts                                    	| [$31f3: ret]
l_31f4:
	move.b	unknown_61F3,d0                 	| [$31f4: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$31f7: cp   $00]
	bne.b	0f
	rts                                    	| [$31f9: ret  z]
0:
	addq.b	#1,d0                           	| [$31fa: inc  a]
	movem.w	d1/d2,-(sp)                    	| [$31fb: push bc]
	move.b	d0,d1                           	| [$31fc: ld   b,a]
	move.b	unknown_6275,d0                 	| [$31fd: ld   a,(unknown_6275)]
	cmp.b	#0x01,d0                         	| [$3200: cp   $01]
	move.b	d1,d0                           	| [$3202: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$3203: pop  bc]
	jne	l_320c                             	| [$3204: jr   nz,$320C]
	cmp.b	#0x30,d0                         	| [$3206: cp   $30]
	jne	l_3215                             	| [$3208: jr   nz,$3215]
	jra	l_320e                             	| [$320a: jr   $320E]
l_320c:
	cmp.b	#0x17,d0                         	| [$320c: cp   $17]
l_320e:
	jne	l_3215                             	| [$320e: jr   nz,$3215]
	clr.b	d0                               	| [$3210: ld   a,$00]
	move.b	d0,unknown_6275                 	| [$3212: ld   (unknown_6275),a]
l_3215:
	move.b	d0,unknown_61F3                 	| [$3215: ld   (unknown_61F3),a]
	rts                                    	| [$3218: ret]
l_3219:
	move.b	player_x_6582,d0                	| [$3219: ld   a,(player_x_6582)]
	cmp.b	#0xE8,d0                         	| [$321c: cp   $E8]
	clr.b	d0                               	| [$321e: ld   a,$00]
	move.b	d0,unknown_6285                 	| [$3220: ld   (unknown_6285),a]
	bcs.b	0f
	jbsr	l_3243                            	| [$3223: call nc,$3243]
0:
	move.b	player_x_6582,d0                	| [$3226: ld   a,(player_x_6582)]
	cmp.b	#0x10,d0                         	| [$3229: cp   $10]
	bcc.b	0f
	jbsr	l_3284                            	| [$322b: call c,$3284]
0:
	clr.b	d0                               	| [$322e: ld   a,$00]
	move.b	d0,unknown_626F                 	| [$3230: ld   (unknown_626F),a]
	jbsr	l_10ff                            	| [$3233: call $10FF]
				
						| [$3237: xor  a]
						| [$3238: ld   (interrupt_control_A000),a]
				
						| [$323c: ld   a,$01]
						| [$323e: ld   (interrupt_control_A000),a]
											| [$3241: nop]
	rts                                    	| [$3242: ret]
l_3243:
	jbsr	l_3374                            	| [$3243: call $3374]
	move.b	player_screen_600D,d0           	| [$3246: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$3249: cp   $01]
	jne	l_3261                             	| [$324b: jr   nz,$3261]
	jbsr	l_275d                            	| [$324d: call $275D]
	move.b	#0x11,d0                        	| [$3250: ld   a,$11]
	move.b	d0,player_x_6582                	| [$3252: ld   (player_x_6582),a]
	jbsr	l_33e3                            	| [$3255: call $33E3]
	jbsr	l_22dc                            	| [$3258: call $22DC]
	jbsr	l_33b1                            	| [$325b: call $33B1]
	jra	l_32ce                             	| [$325e: jp   $32CE]
l_3261:
	move.b	player_screen_600D,d0           	| [$3261: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$3264: cp   $02]
	jne	l_3281                             	| [$3266: jr   nz,$3281]
	move.b	elevator_y_current_screen_6587,d0	| [$3268: ld   a,(elevator_y_current_screen_6587)]
	move.b	d0,unknown_6165                 	| [$326b: ld   (unknown_6165),a]
	jbsr	l_265f                            	| [$326e: call $265F]
	move.b	#0x03,d0                        	| [$3271: ld   a,$03]
	move.b	d0,player_screen_600D           	| [$3273: ld   (player_screen_600D),a]
	jbsr	l_22dc                            	| [$3276: call $22DC]
	move.b	#0x11,d0                        	| [$3279: ld   a,$11]
	move.b	d0,player_x_6582                	| [$327b: ld   (player_x_6582),a]
	jbsr	l_33b1                            	| [$327e: call $33B1]
l_3281:
	jra	l_32ce                             	| [$3281: jp   $32CE]
l_3284:
	move.b	#0x01,d0                        	| [$3284: ld   a,$01]
	move.b	d0,unknown_6285                 	| [$3286: ld   (unknown_6285),a]
	jbsr	l_3374                            	| [$3289: call $3374]
	move.b	player_screen_600D,d0           	| [$328c: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$328f: cp   $01]
	bne.b	0f
	rts                                    	| [$3291: ret  z]
0:
	cmp.b	#0x02,d0                         	| [$3292: cp   $02]
	jne	l_32ac                             	| [$3294: jr   nz,$32AC]
	jbsr	l_284c                            	| [$3296: call $284C]
	move.b	#0x01,d0                        	| [$3299: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$329b: ld   (player_screen_600D),a]
	jbsr	l_22dc                            	| [$329e: call $22DC]
	move.b	#0xE3,d0                        	| [$32a1: ld   a,$E3]
	move.b	d0,player_x_6582                	| [$32a3: ld   (player_x_6582),a]
	jbsr	l_33b1                            	| [$32a6: call $33B1]
	jra	l_32ce                             	| [$32a9: jp   $32CE]
l_32ac:
	cmp.b	#0x03,d0                         	| [$32ac: cp   $03]
	beq.b	0f
	rts                                    	| [$32ae: ret  nz]
0:
	move.b	elevator_y_current_screen_6587,d0	| [$32af: ld   a,(elevator_y_current_screen_6587)]
	move.b	d0,unknown_6166                 	| [$32b2: ld   (unknown_6166),a]
	lea	game_mem+0x4442,a2                      	| [$32b5: ld   ix,$4442]
	* bogus write, not read anywhere   | [$32b9: ld   (unknown_6281),ix]
	jbsr	l_275d                            	| [$32bd: call $275D]
	move.b	#0xE3,d0                        	| [$32c0: ld   a,$E3]
	move.b	d0,player_x_6582                	| [$32c2: ld   (player_x_6582),a]
	jbsr	l_33e3                            	| [$32c5: call $33E3]
	jbsr	l_22dc                            	| [$32c8: call $22DC]
	jbsr	l_33b1                            	| [$32cb: call $33B1]
l_32ce:
											| [$32ce: ld   a,$01]
											| [$32d0: ld   ($A003),a]
	lea	guard_1_struct_6594,a2         	| [$32d3: ld   ix,guard_1_struct_6594]
	lea	player_struct_6580,a3          	| [$32d7: ld   iy,player_struct_6580]
	move.b	(0x03,a3),d0                    	| [$32db: ld   a,(iy+$03)]
	cmp.b	(0x03,a2),d0                     	| [$32de: cp   (ix+$03)]
	jne	l_32fa                             	| [$32e1: jp   nz,$32FA]
	move.b	(0x02,a2),d0                    	| [$32e4: ld   a,(ix+$02)]
	cmp.b	#0xCD,d0                         	| [$32e7: cp   $CD]
	jcs	l_32f0                             	| [$32e9: jr   c,$32F0]
	jbsr	l_364e                            	| [$32eb: call $364E]
	jra	l_32fa                             	| [$32ee: jr   $32FA]
l_32f0:
	move.b	(0x02,a2),d0                    	| [$32f0: ld   a,(ix+$02)]
	cmp.b	#0x26,d0                         	| [$32f3: cp   $26]
	jcc	l_32fa                             	| [$32f5: jr   nc,$32FA]
	jbsr	l_364e                            	| [$32f7: call $364E]
l_32fa:
	lea	guard_2_struct_6598,a2         	| [$32fa: ld   ix,guard_2_struct_6598]
	lea	player_struct_6580,a3          	| [$32fe: ld   iy,player_struct_6580]
	move.b	(0x03,a3),d0                    	| [$3302: ld   a,(iy+$03)]
	cmp.b	(0x03,a2),d0                     	| [$3305: cp   (ix+$03)]
	jne	l_3321                             	| [$3308: jp   nz,$3321]
	move.b	(0x02,a2),d0                    	| [$330b: ld   a,(ix+$02)]
	cmp.b	#0xE0,d0                         	| [$330e: cp   $E0]
	jcs	l_3317                             	| [$3310: jr   c,$3317]
	jbsr	l_3658                            	| [$3312: call $3658]
	jra	l_3321                             	| [$3315: jr   $3321]
l_3317:
	move.b	(0x02,a2),d0                    	| [$3317: ld   a,(ix+$02)]
	cmp.b	#0x10,d0                         	| [$331a: cp   $10]
	jcc	l_3321                             	| [$331c: jr   nc,$3321]
	jbsr	l_3658                            	| [$331e: call $3658]
l_3321:
	move.b	unknown_601C,d0                 	| [$3321: ld   a,(unknown_601C)]
	cmp.b	#0x01,d0                         	| [$3324: cp   $01]
	bne.b	0f
	rts                                    	| [$3326: ret  z]
0:
	move.b	unknown_601D,d0                 	| [$3327: ld   a,(unknown_601D)]
	cmp.b	#0x01,d0                         	| [$332a: cp   $01]
	bne.b	0f
	rts                                    	| [$332c: ret  z]
0:
	move.b	unknown_601E,d0                 	| [$332d: ld   a,(unknown_601E)]
	cmp.b	#0x01,d0                         	| [$3330: cp   $01]
	bne.b	0f
	rts                                    	| [$3332: ret  z]
0:
	lea	player_y_6583,a0               	| [$3333: ld   hl,player_y_6583]
	lea	unknown_658C,a2                	| [$3336: ld   ix,unknown_658C]
	move.b	(a0),d0                         	| [$333a: ld   a,(hl)]
	cmp.b	#0x40,d0                         	| [$333b: cp   $40]
	jne	l_3344                             	| [$333d: jr   nz,$3344]
	jbsr	l_3369                            	| [$333f: call $3369]
	jra	l_335b                             	| [$3342: jr   $335B]
l_3344:
	lea	unknown_6588,a2                	| [$3344: ld   ix,unknown_6588]
	cmp.b	#0xE0,d0                         	| [$3348: cp   $E0]
	jne	l_3351                             	| [$334a: jr   nz,$3351]
	jbsr	l_3369                            	| [$334c: call $3369]
	jra	l_335b                             	| [$334f: jr   $335B]
l_3351:
	lea	unknown_6590,a2                	| [$3351: ld   ix,unknown_6590]
	cmp.b	#0xC8,d0                         	| [$3355: cp   $C8]
	beq.b	0f
	rts                                    	| [$3357: ret  nz]
0:
	jbsr	l_3369                            	| [$3358: call $3369]
l_335b:
	move.b	#0x30,d1                        	| [$335b: ld   b,$30]
l_335d:
	movem.w	d1/d2,-(sp)                    	| [$335d: push bc]
	jbsr	l_08f4                            	| [$335e: call $08F4]

	movem.w	(sp)+,d1/d2                    	| [$3361: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_335d                             	| [$3362: djnz $335D]
	clr.b	d0                               	| [$3364: xor  a]
	move.b	d0,player_death_flag_6025       	| [$3365: ld   (player_death_flag_6025),a]
	rts                                    	| [$3368: ret]
l_3369:
	move.b	(0x02,a2),d0                    	| [$3369: ld   a,(ix+$02)]
	cmp.b	#0xD8,d0                         	| [$336c: cp   $D8]
	bcs.b	0f
	rts                                    	| [$336e: ret  nc]
0:
	cmp.b	#0x18,d0                         	| [$336f: cp   $18]
	bcc.b	0f
	rts                                    	| [$3371: ret  c]
0:
	move.w	(sp)+,d0                        	| [$3372: pop  af]
	rts                                    	| [$3373: ret]
l_3374:
										| [$3374: xor  a]
										| [$3375: ld   ($A003),a]
	move.b	holds_barrow_61C7,d0            	| [$3378: ld   a,(holds_barrow_61C7)]
	                         	| [$337b: cp   $00]
	bne.b	0f
	jbsr	l_1f25                            	| [$337d: call z,$1F25]
0:
	move.b	unknown_6159,d0                 	| [$3380: ld   a,(unknown_6159)]
	                         	| [$3383: cp   $00]
	jeq	l_3393                             	| [$3385: jr   z,$3393]
	move.b	unknown_659F,d0                 	| [$3387: ld   a,(unknown_659F)]
	addq.b	#1,d0                           	| [$338a: inc  a]
	move.b	d0,unknown_659F                 	| [$338b: ld   (unknown_659F),a]
	jbsr	l_1683                            	| [$338e: call $1683]
	jra	l_3374                             	| [$3391: jr   $3374]
l_3393:
	move.b	guard_1_in_elevator_603B,d0     	| [$3393: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$3396: cp   $01]
	jne	l_33a2                             	| [$3398: jr   nz,$33A2]
	move.b	#0x01,d0                        	| [$339a: ld   a,$01]
	move.b	d0,unknown_61EB                 	| [$339c: ld   (unknown_61EB),a]
	move.b	d0,unknown_603A                 	| [$339f: ld   (unknown_603A),a]
l_33a2:
	move.b	guard_2_in_elevator_607B,d0     	| [$33a2: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$33a5: cp   $01]
	beq.b	0f
	rts                                    	| [$33a7: ret  nz]
0:
	move.b	#0x01,d0                        	| [$33a8: ld   a,$01]
	move.b	d0,unknown_61EC                 	| [$33aa: ld   (unknown_61EC),a]
	move.b	d0,unknown_607A                 	| [$33ad: ld   (unknown_607A),a]
	rts                                    	| [$33b0: ret]
l_33b1:
	lea	unknown_6019,a2                	| [$33b1: ld   ix,unknown_6019]
	lea	player_x_6582,a0               	| [$33b5: ld   hl,player_x_6582]
	lea	wagon_data_658A,a3             	| [$33b8: ld   iy,wagon_data_658A]
	move.w	#0x0004,d3                      	| [$33bc: ld   de,$0004] 4
	jbsr	l_33d1                            	| [$33bf: call $33D1]
	addq.w	#1,a2                           	| [$33c2: inc  ix]
	add.w	d3,a3                            	| [$33c4: add  iy,de]
	jbsr	l_33d1                            	| [$33c6: call $33D1]
	addq.w	#1,a2                           	| [$33c9: inc  ix]
	add.w	d3,a3                            	| [$33cb: add  iy,de]
	jbsr	l_33d1                            	| [$33cd: call $33D1]
	rts                                    	| [$33d0: ret]
l_33d1:
	move.b	(0x03,a2),d0                    	| [$33d1: ld   a,(ix+$03)]
												| [$33d4: cp   $00]
	bne.b	0f
	rts                                    	| [$33d6: ret  z]
0:
	move.b	(a0),d0                         	| [$33d7: ld   a,(hl)]
	move.b	d0,(a3)                    	| [$33d8: ld   (iy+$00),a]
	move.b	player_screen_600D,d0           	| [$33db: ld   a,(player_screen_600D)]
	subq.b	#1,d0                           	| [$33de: dec  a]
	move.b	d0,(a2)                    	| [$33df: ld   (ix+$00),a]
	rts                                    	| [$33e2: ret]
l_33e3:
	move.b	unknown_627D,d0                 	| [$33e3: ld   a,(unknown_627D)]
	move.w	#0x9318,d6
	jbsr	osd_w_videoram                       	| [$33e6: ld   ($9318),a]
 	cmp.b	#0xE0,d0                         	| [$33e9: cp   $E0]
	jeq	l_33ee                             	| [$33eb: jr   z,$33EE]
	subq.b	#1,d0                           	| [$33ed: dec  a]
l_33ee:
	move.w	#0x9318,d6
	jbsr	osd_w_videoram                       	| [$33ee: ld   ($9319),a]
	move.b	#0x02,d0                        	| [$33f1: ld   a,$02]
	move.b	d0,player_screen_600D           	| [$33f3: ld   (player_screen_600D),a]
	move.b	#0x53,d0                        	| [$33f6: ld   a,$53]

	move.l	a0,-(sp)                        	| [$33f8: push hl]
	movem.w	d3/d4,-(sp)                    	| [$33f9: push de]
	movem.w	d1/d2,-(sp)                    	| [$33fa: push bc]
	move.w	#0x93B6,d6                      	| [$33fb: ld   hl,$93B6]
	move.w	#-0x20,d3                      	| [$33fe: ld   de,$FFE0]
	move.b	#0x06,d1                        	| [$3401: ld   b,$06]
l_3403:
	jbsr	osd_w_videoram                         	| [$3403: ld   (hl),a]
	subq.b	#1,d0                           	| [$3404: dec  a]
	move.w	d0,-(sp)                        	| [$3405: push af]

	move.w	d6,-(sp)                        	| [$3406: push hl]
	                           	| [$3407: ld   a,h]
	add.w	#0x0800,d6                         	| [$3408: add  a,$08]
	                           	| [$340a: ld   h,a]
	move.b	#0x1F,d0                        	| [$340b: ld   a,$1F]
	jbsr	osd_w_colorram                          	| [$340d: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$340e: pop  hl]
	move.w	(sp)+,d0                        	| [$340f: pop  af]
	add.w	d3,d6                            	| [$3410: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3403                             	| [$3411: djnz $3403]

	movem.w	(sp)+,d1/d2                    	| [$3413: pop  bc]
	movem.w	(sp)+,d3/d4                    	| [$3414: pop  de]
	move.l	(sp)+,a0                        	| [$3415: pop  hl]
	rts                                    	| [$3416: ret]	
	
* < D0: tile code
* < D6: screen address
* < D7: tile attribute
draw_wheelbarrow_tiles_3417:
	* check code in case screen MSB address is null
	move.w	d1,-(sp)                    	| [$3417: push bc]
	                           	| [$3418: ld   b,a]
	move.w	d6,d1                           	| [$3419: ld   a,h]
	lsr.w	#8,d6
	                         	| [$341a: cp   $00]
	                           	| [$341c: ld   a,b]

	movem.w	(sp)+,d1                    	| [$341d: pop  bc]
	bne.b	0f
	* probably never happens...
	rts                                    	| [$341e: ret  z]
0:
	move.w	d0,-(sp)                        	| [$341f: push af]
* read screen tile
	jbsr	osd_r_videoram                         	| [$3420: ld   a,(hl)]
	* bag top
	cmp.b	#0xD0,d0                         	| [$3421: cp   $D0]
	movem.w	(sp)+,d0                        	| [$3425: pop  af]
	jeq	l_342c                             	| [$3423: jr   z,$342B]
	jbsr	l_3441                            	| [$3426: call $3441]
											| [$3429: jr   $342C]			
											| [$342b: pop  af]
l_342c:
	addq.w	#1,d6                           	| [$342c: inc  hl]
	addq.b	#1,d0                           	| [$342d: inc  a]
	jbsr	l_3441                            	| [$342e: call $3441]
	                    	| [$3431: push de]
	                     	| [$3432: ld   de,$001F] 31
	add.w	#0x1F,d6                            	| [$3435: add  hl,de]
	                    	| [$3436: pop  de]
	addq.b	#1,d0                           	| [$3437: inc  a]
	jbsr	l_3441                            	| [$3438: call $3441]
	addq.w	#1,d6                           	| [$343b: inc  hl]
	addq.b	#1,d0                           	| [$343c: inc  a]
	jbsr	l_3441                            	| [$343d: call $3441]
	rts                                    	| [$3440: ret]
l_3441:
	jbsr	osd_w_videoram                         	| [$3441: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$3442: push hl]
	move.w	d0,-(sp)                        	| [$3443: push af]
	                          	| [$3444: ld   a,h]
	add.w	#0x0800,d6                         	| [$3445: add  a,$08]
	                           	| [$3447: ld   h,a]
	exg	d0,d7                             	| [$3448: ex   af,af']
	jbsr	osd_w_colorram                         	| [$3449: ld   (hl),a]
	exg	d0,d7                              	| [$344a: ex   af,af']
	move.w	(sp)+,d0                        	| [$344b: pop  af]
	move.w	(sp)+,d6                        	| [$344c: pop  hl]
	rts                                    	| [$344d: ret]

l_344e:
	move.b	unknown_615E,d0                 	| [$344e: ld   a,(unknown_615E)]
	cmp.b	#0x01,d0                         	| [$3451: cp   $01]
	beq.b	0f
	rts                                    	| [$3453: ret  nz]
0:
	lea	guard_1_struct_6594,a2         	| [$3454: ld   ix,guard_1_struct_6594]
	jbsr	l_346d                            	| [$3458: call $346D]
	cmp.b	#0x01,d0                         	| [$345b: cp   $01]
	bne.b	0f
	jbsr	l_2241                            	| [$345d: call z,$2241]
0:
	lea	guard_2_struct_6598,a2         	| [$3460: ld   ix,guard_2_struct_6598]
	jbsr	l_346d                            	| [$3464: call $346D]
	cmp.b	#0x01,d0                         	| [$3467: cp   $01]
	bne.b	0f
	jbsr	l_227c                            	| [$3469: call z,$227C]
0:
	rts                                    	| [$346c: ret]

l_346d:
	lea	unknown_659C,a3                	| [$346d: ld   iy,unknown_659C]
	move.b	(0x02,a3),d0                    	| [$3471: ld   a,(iy+$02)]
	cmp.b	(0x02,a2),d0                     	| [$3474: cp   (ix+$02)]
	jeq	l_347f                             	| [$3477: jr   z,$347F]
	addq.b	#1,d0                           	| [$3479: inc  a]
	cmp.b	(0x02,a2),d0                     	| [$347a: cp   (ix+$02)]
	jne	l_349e                             	| [$347d: jr   nz,$349E]
l_347f:
	move.b	(0x03,a3),d0                    	| [$347f: ld   a,(iy+$03)]
	addq.b	#2,d0                           	| [$3482: inc  a] * 2
	cmp.b	(0x03,a2),d0                     	| [$3484: cp   (ix+$03)]
	jeq	l_34a1                             	| [$3487: jr   z,$34A1]
	subq.b	#1,d0                           	| [$3489: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$348a: cp   (ix+$03)]
	jeq	l_34a1                             	| [$348d: jr   z,$34A1]
	subq.b	#1,d0                           	| [$348f: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$3490: cp   (ix+$03)]
	jeq	l_34a1                             	| [$3493: jr   z,$34A1]
	subq.b	#1,d0                           	| [$3495: dec  a]
	cmp.b	(0x03,a2),d0                     	| [$3496: cp   (ix+$03)]
	jeq	l_34a1                             	| [$3499: jr   z,$34A1]
	subq.b	#1,d0                           	| [$349b: dec  a]
	jeq	l_34a1                             	| [$349c: jr   z,$34A1]
l_349e:
	clr.b	d0                               	| [$349e: ld   a,$00]
	rts                                    	| [$34a0: ret]
l_34a1:
	move.b	#0x01,d0                        	| [$34a1: ld   a,$01]
	rts                                    	| [$34a3: ret]


l_34cf:
* random cpu delay loop on vertical position????
*	move.b	vertical_beam_pos_A000,d0       	| [$34cf: ld   a,(vertical_beam_pos_A000)]
*	and.b	#0x3F,d0                         	| [$34d2: and  $3F]
*	move.b	d0,d1                           	| [$34d4: ld   b,a]
*l_34d5:
*	nop                                    	| [$34d5: nop]
*	subq.b	#1,d1                           	| [...]
*	jne	l_34d5                             	| [$34d6: djnz $34D5]
* * extra life test depending on dip switch: 30000 or 40000
	jbsr	osd_read_dipswitches              	| [$34d8: ld   a,(dip_switch_B000)]
	and.b	#0x40,d0                         	| [$34db: and  $40]
	cmp.b	#0x40,d0                         	| [$34dd: cp   $40]
	jeq	l_34e5                             	| [$34e1: jr   z,$34E5]
	move.b	#0x04,d0                        	| [$34e3: ld   a,$04]
	bra.b	0f
l_34e5:
	move.b	#0x03,d0                        	| [$34df: ld   a,$03]
0:
	move.b	d0,d1                           	| [$34e5: ld   b,a]
	move.b	current_player_617C,d0          	| [$34e6: ld   a,(current_player_617C)]
	cmp.b	#0x01,d0                         	| [$34e9: cp   $01]
	jne	l_34f3                             	| [$34ee: jr   nz,$34F3]
	move.b	score_ten_thousands_player_2_617B,d0                 	| [$34f0: ld   a,(score_ten_thousands_player_2_617B)]
	bra.b	0f
l_34f3:
	move.b	score_ten_thousands_player_1_6178,d0     	| [$34eb: ld   a,(score_ten_thousands_player_1_6178)]
0:
	cmp.b	d1,d0                            	| [$34f3: cp   b]
	jcc	l_34fb                             	| [$34f4: jr   nc,$34FB]
	clr.b	d0                               	| [$34f6: xor  a]
	move.b	d0,extra_life_awarded_6286	| [$34f7: ld   (extra_life_awarded_6286),a]
	rts                                    	| [$34fa: ret]
l_34fb:
	move.b	extra_life_awarded_6286,d0	| [$34fb: ld   a,(extra_life_awarded_6286)]
	                         	| [$34fe: cp   $00]
	beq.b	0f                               	| [$3500: ret  nz] [...]
	rts                                    	| [$3500: ret  nz]
0:
	move.b	lives_6056,d0                   	| [$3501: ld   a,(lives_6056)]
	addq.b	#1,d0                           	| [$3504: inc  a]
	move.b	d0,lives_6056                   	| [$3505: ld   (lives_6056),a]
	move.b	#0x01,d0                        	| [$3508: ld   a,$01]
	move.b	d0,extra_life_awarded_6286	| [$350a: ld   (extra_life_awarded_6286),a]
	rts                                    	| [$350d: ret]


l_350e:
	bsr		read_rom                         	| [$350e: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$350f: cp   $E0]
	jne	l_3536                             	| [$3511: jr   nz,$3536]
	move.b	player_screen_600D,d0           	| [$3513: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$3516: cp   b]
	jeq	l_3536                             	| [$3517: jr   z,$3536]
	move.b	d1,d0                           	| [$3519: ld   a,b]
	lea		unknown_6165,a4            	| [$351c: ld   bc,unknown_6165] None
	cmp.b	#0x02,d0                         	| [$351a: cp   $02]
	jeq	l_3526                             	| [$351f: jr   z,$3526]
											| [$3521: cp   $03] useless
	lea		unknown_6166,a4            	| [$3523: ld   bc,unknown_6166] None
l_3526:
	move.b	(a4),d0                         	| [$3526: ld   a,(bc)]
	cmp.b	#0x10,d0                         	| [$3527: cp   $10]
	bcc.b	0f
	rts                                    	| [$3529: ret  c]
0:
	exg	d0,d7                              	| [$352a: ex   af,af']
	tst.b	d0                         	| [$352b: cp   $00]
	jne	l_3532                             	| [$352d: jr   nz,$3532]
	move.b	(a4),d0                         	| [$352f: ld   a,(bc)]
	subq.b	#1,d0                           	| [$3530: dec  a]
	move.b	d0,(a4)                         	| [$3531: ld   (bc),a]
l_3532:
	move.b	(a1),d0                         	| [$3532: ld   a,(de)]
	subq.b	#1,d0                           	| [$3533: dec  a]
	move.b	d0,(a1)                         	| [$3534: ld   (de),a]
	rts                                    	| [$3535: ret]
l_3536:
	clr.b	d0                               	| [$3536: xor  a]
	move.b	d0,(a2)                    	| [$3537: ld   (ix+$00),a]
	move.b	d0,(a3)                    	| [$353a: ld   (iy+$00),a]
	rts                                    	| [$353d: ret]

decrease_timer_353e:
	lea	timer_high_prec_61E7,a0                	| [$353e: ld   hl,timer_high_prec_61E7]
	move.b	(a0),d0                         	| [$3541: ld   a,(hl)]
	moveq	#1,d7
	sbcd	d7,d0                        	| [$3542: sub  $01 + daa]
	move.b	d0,(a0)+                         	| [$3545: ld   (hl),a]
												| [$3546: push af]
												| [$3547: inc  hl]
												| [$3548: pop  af]
	* update "visible" part if carry set
	move.b	(a0),d0                         	| [$3549: ld   a,(hl)]
	clr.w	d7
	sbcd.b	d7,d0                        	| [$354a: sbc  a,$00]

	move.b	d0,(a0)                         	| [$354d: ld   (hl),a]
	rts                                    	| [$354e: ret]
	
set_bags_coordinates_354f:
	lea	bags_coordinates_609C,a1       	| [$354f: ld   de,bags_coordinates_609C]
	lea	game_mem+0x5C54,a0                      	| [$3552: ld   hl,$5C54]
	move.w	#0x3A,d1                        	| [$3555: ld   bc,$003A] 58
	jbsr	ldir                              	| [$3558: ldir]
	rts                                    	| [$355a: ret]


set_bags_coordinates_355b:
	lea	bags_coordinates_609C,a1       	| [$355b: ld   de,bags_coordinates_609C]
0:
	lea	game_mem+0x5AE8(pc),a0                      	| [$355e: ld   hl,$5AE8]
	move.b	#0x003A,d1                        	| [$3561: ld   bc,$003A] 58
	jbra	ldir                              	| [$3564: ldir]
 	rts                                    	| [$3566: ret]


set_bags_coordinates_3567:
	lea	unknown_617F,a1                	| [$3567: ld   de,unknown_617F]
	bra.b	0b

l_3567:
	lea	unknown_617F,a1                	| [$3567: ld   de,unknown_617F]
	lea	game_mem+0x5AE8,a0                      	| [$356a: ld   hl,$5AE8]
	move.w	#0x003A,d1                        	| [$356d: ld   bc,$003A] 58
	jbsr	ldir                              	| [$3570: ldir]
	rts                                    	| [$3572: ret]


* check if tile can be walked into
is_background_tile_3573:
	cmp.b	#0xE0,d0                            	|blank,d0| [$3573: cp   $E0| blank]
	bne.b	0f
	rts                                    	| [$3575: ret  z]
0:
	cmp.b	#0x4B,d0                            	|pillar,d0| [$3576: cp   $4B| pillar, etc...]
	bne.b	0f
	rts                                    	| [$3578: ret  z]
0:
	cmp.b	#0x4A,d0                         	| [$3579: cp   $4A]
	bne.b	0f
	rts                                    	| [$357b: ret  z]
0:
	cmp.b	#0x49,d0                         	| [$357c: cp   $49]
	bne.b	0f
	rts                                    	| [$357e: ret  z]
0:
	cmp.b	#0xE4,d0                         	| [$357f: cp   $E4]
	bne.b	0f
	rts                                    	| [$3581: ret  z]
0:
	cmp.b	#0xE6,d0                         	| [$3582: cp   $E6]
	rts 

l_3585:

	                        	| [$3585: push hl]
	movem.	d6,-(sp)                    	| [$3586: push bc]
												| [$3587: ld   bc,$FFE0] 65504
												| [$3587: ld   bc,$FFE0] 65504
	sub.w	#0x20,d6                            	| [$358a: add  hl,bc]
	                               	| [$358b: xor  a]
	cmp.w	d3,d6					| sbc  hl,de

	movem.w	(sp)+,d6                    	| [$358e: pop  bc]
	                       	| [$358f: pop  hl]
	rts                                    	| [$3590: ret]
l_3591:
	move.b	unknown_617D,d0                 	| [$3591: ld   a,(unknown_617D)]
	cmp.b	#0x01,d0                         	| [$3594: cp   $01]
	bne.b	0f
	rts                                    	| [$3596: ret  z]
0:
	move.b	#0x01,d0                        	| [$3597: ld   a,$01]
	move.b	d0,unknown_6053                 	| [$3599: ld   (unknown_6053),a]
	move.b	d0,unknown_628C                 	| [$359c: ld   (unknown_628C),a]
	jbsr	l_2a2c                            	| [$359f: call $2A2C]
	* write "PLAYER 1"
	lea	game_mem+0x575A,a1                      	| [$35a2: ld   de,$575A]
	move.w	#0x9274,d6                      	| [$35a5: ld   hl,$9274]
	jbsr	display_text_30F9                 	| [$35a8: call display_text_30F9]
	* write "CREDIT"
	lea	game_mem+0x5689,a1                      	| [$35ab: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$35ae: ld   hl,$919F]
	jbsr	display_text_30F9                 	| [$35b1: call display_text_30F9]
	move.b	current_player_617C,d0          	| [$35b4: ld   a,(current_player_617C)]
	addq.b	#1,d0                           	| [$35b7: inc  a]
	move.w	#0x9194,d6                       	| [$35b8: ld   ($9194),a]
	jbsr	osd_w_videoram
	move.b	#0x08,d0                        	| [$35bb: ld   a,$08]
	move.w	#0x987F,d6                      	| [$35bd: ld   hl,$987F]
	jbsr	write_attribute_on_line_5605      	| [$35c0: call write_attribute_on_line_5605]
	clr.b	d0                               	| [$35c3: ld   a,$00]
	move.w	#0x985F,d6                       	| [$35c5: ld   ($985F),a]
	jbsr	osd_w_colorram
	move.b	#0x05,d0                        	| [$35c8: ld   a,$05]
	move.w	#0x9841,d6                      	| [$35ca: ld   hl,$9841]
	jbsr	write_attribute_on_line_5605      	| [$35cd: call write_attribute_on_line_5605]
	move.b	#0x02,d0                        	| [$35d0: ld   a,$02]
	move.w	#0x9840,d6                      	| [$35d2: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605      	| [$35d5: call write_attribute_on_line_5605]
	move.w	#0x9293,d6                      	| [$35d8: ld   hl,$9293]
	lea	game_mem+3638,a1                      	| [$35db: ld   de,$3638]
	move.b	#0x1F,d0                        	| [$35de: ld   a,$1F]
	exg	d0,d7                              	| [$35e0: ex   af,af']
	jbsr	write_text_55f0                   	| [$35e1: call write_text_55f0]
	move.w	#0x9295,d6                      	| [$35e4: ld   hl,$9295]
	lea	game_mem+0x3643,a1                      	| [$35e7: ld   de,$3643]
	move.b	#0x1F,d0                        	| [$35ea: ld   a,$1F]
	exg	d0,d7                              	| [$35ec: ex   af,af']
	jbsr	write_text_55f0                   	| [$35ed: call write_text_55f0]
	move.b	#0x8E,d0                        	| [$35f0: ld   a,$8E]
	move.w	#0x9174,d6                       	| [$35f2: ld   ($9174),a]
	jbsr	osd_w_videoram
	move.b	#0x8B,d0                        	| [$35f5: ld   a,$8B]
	move.w	#0x9294,d6                       	| [$35f7: ld   ($9294),a]
	jbsr	osd_w_videoram
	move.b	#0x1F,d0                        	| [$35fa: ld   a,$1F]
	move.w	#0x9974,d6                       	| [$35fc: ld   ($9974),a]
	jbsr	osd_w_colorram
	move.w	#0x9A94,d6                       	| [$35ff: ld   ($9A94),a]
	jbsr	osd_w_colorram
	jbsr	write_credits_and_lives_39be                            	| [$3602: call $39BE]
	clr.b	d0                               	| [$3605: ld   a,$00]
	move.w	#0x9803,d6                       	| [$3607: ld   ($9803),a]
	jbsr	osd_w_colorram
 	move.w	#0x9807,d6                       	| [$360a: ld   ($9807),a]
	jbsr	osd_w_colorram
	move.w	#0x980B,d6                       	| [$360d: ld   ($980B),a]
	jbsr	osd_w_colorram
	move.w	#0x980F,d6                       	| [$3610: ld   ($980F),a]
	jbsr	osd_w_colorram
	move.w	#0x9813,d6                      	| [$3613: ld   ($9813),a]
	jbsr	osd_w_colorram
	move.w	#0x9817,d6                       	| [$3616: ld   ($9817),a]
	jbsr	osd_w_colorram
	move.w	#0x981B,d6                       	| [$3619: ld   ($981B),a]
	jbsr	osd_w_colorram
	move.w	#0x981F,d6                       	| [$361c: ld   ($981F),a]
	jbsr	osd_w_colorram
	                        	| [$361f: ld   b,$06]
							
											| [$3621: ld   hl,$0000] 0
							
											| [$3624: dec  hl]
										| [$3625: ld   a,(io_read_shit_B800)]
											| [$3628: ld   a,h]
											| [$3629: cp   $00]
										| [$362b: jr   nz,$3624]
											| [...]
										| [$362d: djnz $3621]
	clr.b	d0                               	| [$362f: ld   a,$00]
	move.b	d0,unknown_6053                 	| [$3631: ld   (unknown_6053),a]
	move.b	d0,unknown_628C                 	| [$3634: ld   (unknown_628C),a]
	rts                                    	| [$3637: ret]


 * routine to perform several guard moves, sometimes at screen boundary
 * no more info
l_364e:
	move.b	#0x60,d1                        	| [$364e: ld   b,$60]
l_3650:
	movem.w	d1/d2,-(sp)                    	| [$3650: push bc]
	jbsr	guard_1_movement_116F             	| [$3651: call guard_1_movement_116F]

	movem.w	(sp)+,d1/d2                    	| [$3654: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3650                             	| [$3655: djnz $3650]
	rts                                    	| [$3657: ret]
l_3658:
	move.b	#0x60,d1                        	| [$3658: ld   b,$60]
l_365a:
	movem.w	d1/d2,-(sp)                    	| [$365a: push bc]
	jbsr	guard_2_movement_119B             	| [$365b: call guard_2_movement_119B]

	movem.w	(sp)+,d1/d2                    	| [$365e: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_365a                             	| [$365f: djnz $365A]
	rts                                    	| [$3661: ret]
	
* shows title, guard chases bagman, bagman fights back
play_intro_3700:
	clr.b	d0                               	| [$3700: ld   a,$00]
	**move.b	d0,0xA003                       	| [$3702: ld   ($A003),a]
	jbsr	clear_screen_2a00                            	| [$3705: call $2A00]
	move.b	#0x3F,d0                        	| [$3708: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$370a: call $29EC]
	jbsr	display_player_ids_and_credit_1dec                            	| [$370d: call $1DEC]
	move.b	#0x01,d0                        	| [$3710: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$3712: ld   (player_screen_600D),a]
	**move.b	d0,0xA003                       	| [$3715: ld   ($A003),a]
	move.b	d0,screen_index_param_6098      	| [$3718: ld   (screen_index_param_6098),a]
	move.b	d0,guard_1_screen_6099          	| [$371b: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$371e: ld   (guard_2_screen_609A),a]
	clr.b	d0                               	| [$3721: xor  a]
	move.b	d0,unknown_6008                 	| [$3722: ld   (unknown_6008),a]
	move.b	d0,unknown_6037                 	| [$3725: ld   (unknown_6037),a]
	move.b	d0,fatal_fall_height_reached_604E                 	| [$3728: ld   (unknown_604E),a]
	move.b	d0,unknown_6077                 	| [$372b: ld   (unknown_6077),a]
	move.b	d0,elevator_y_current_screen_6587	| [$372e: ld   (elevator_y_current_screen_6587),a]
	move.b	d0,guard_2_x_659A               	| [$3731: ld   (guard_2_x_659A),a]
	move.b	d0,guard_2_y_659B               	| [$3734: ld   (guard_2_y_659B),a]
	move.b	d0,unknown_6159                 	| [$3737: ld   (unknown_6159),a]
	move.b	d0,has_pick_61CF                	| [$373a: ld   (has_pick_61CF),a]
	clr.w	pickaxe_timer_duration_61E0                 	| [$373d: ld   (pickaxe_timer_duration_61E0),a]
	                 	| [$3740: ld   (unknown_61E1),a]
	move.b	#0x01,d0                        	| [$3743: ld   a,$01]
	move.b	d0,unknown_61ED                 	| [$3745: ld   (unknown_61ED),a]
	jbsr	compute_guard_speed_from_dipsw_2C4D	| [$3748: call compute_guard_speed_from_dipsw_2C4D]

	* draw the line the characters are going to walk on
	move.w	#0x901A,d6                      	| [$374b: ld   hl,$901A]
	move.w	#0x0020,d3                      	| [$374e: ld   de,$0020] 32
	move.b	#0xF0,d0                        	| [$3751: ld   a,$F0]
	move.b	#0x20,d1                        	| [$3753: ld   b,$20]
l_3755:
	jbsr	osd_w_videoram                         	| [$3755: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$3756: push hl]
	move.w	d0,-(sp)                        	| [$3757: push af]
	                           	| [$3758: ld   a,h]
	add.w	#0x0800,d6                         	| [$3759: add  a,$08]
	                           	| [$375b: ld   h,a]
	move.b	#0x04,d0                        	| [$375c: ld   a,$04]
	jbsr	osd_w_colorram                         	| [$375e: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$375f: pop  af]
	move.w	(sp)+,d6                        	| [$3760: pop  hl]
	add.w	d3,d6                         	| [$3761: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3755                             	| [$3762: djnz $3755]
	jbsr	l_38d7                            	| [$3764: call $38D7]
	move.b	#0x01,d0                        	| [$3767: ld   a,$01]
	move.b	d0,gameplay_allowed_6054        	| [$3769: ld   (gameplay_allowed_6054),a]
	lea	player_struct_6580,a1          	| [$376c: ld   de,player_struct_6580]
	lea	game_mem+0x38EE,a0                      	| [$376f: ld   hl,$38EE]
	move.w	#0x04,d1                        	| [$3772: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3775: ldir]
	lea	unknown_659C,a1                	| [$3777: ld   de,unknown_659C]
	lea	game_mem+0x38F2,a0                      	| [$377a: ld   hl,$38F2]
	move.w	#0x04,d1                        	| [$377d: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3780: ldir]
	move.b	is_intermission_6274,d0                 	| [$3782: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$3785: cp   $01]
	* don't draw title & logo if intermission
	* (but same lousy animation!)
	jeq	l_3800                             	| [$3787: jp   z,$3800]
	* draw top of V=A logo
	lea	game_mem+0x4C00,a1                      	| [$378a: ld   de,$4C00]
	move.w	#0x9286,d6                      	| [$378d: ld   hl,$9286]
	* color 6, 2nd tile bank
	move.b	#0x16,d0                        	| [$3790: ld   a,$16]
	exg	d0,d7                              	| [$3792: ex   af,af']
	jbsr	write_text_55f0                            	| [$3793: call $55F0]
	* draw middle part of V=A logo
	lea	game_mem+0x4C0B,a1                      	| [$3796: ld   de,$4C0B]
	move.w	#0x9287,d6                      	| [$3799: ld   hl,$9287]
	move.b	#0x16,d0                        	| [$379c: ld   a,$16]
	exg	d0,d7                              	| [$379e: ex   af,af']
	jbsr	write_text_55f0                            	| [$379f: call $55F0]
	* draw bottom part of V=A logo
	lea	game_mem+0x4C16,a1                      	| [$37a2: ld   de,$4C16]
	move.w	#0x9288,d6                      	| [$37a5: ld   hl,$9288]
	move.b	#0x16,d0                        	| [$37a8: ld   a,$16]
	exg	d0,d7                              	| [$37aa: ex   af,af']
	jbsr	write_text_55f0                            	| [$37ab: call $55F0]
	* presents
	lea	game_mem+0x4C21,a1                      	| [$37ae: ld   de,$4C21]
	move.w	#0x926B,d6                      	| [$37b1: ld   hl,$926B]
	move.b	#0x13,d0                        	| [$37b4: ld   a,$13]
	exg	d0,d7                              	| [$37b6: ex   af,af']
	jbsr	write_text_55f0                            	| [$37b7: call $55F0]
	jbsr	osd_read_dipswitches            	| [$37ba: ld   a,(dip_switch_B000)]
	* language french or english
	and.b	#0x20,d0                         	| [$37bd: and  $20]
	cmp.b	#0x20,d0                         	| [$37bf: cp   $20]
	jne	l_37cd                             	| [$37c1: jr   nz,$37CD]
	* english: change last "E" of "PRESENTE" by "S"
	move.b	#0xE1,d0                        	| [$37c3: ld   a,$E1]
	move.b	d0,0x918B                       	| [$37c5: ld   ($918B),a]
	move.b	#0x13,d0                        	| [$37c8: ld   a,$13]
	move.b	d0,0x998B                       	| [$37ca: ld   ($998B),a]
l_37cd:
	* "BAGMAN title" (c) 1982
	lea	game_mem+0x4C2A,a1                      	| [$37cd: ld   de,$4C2A]
	move.w	#0x938E,d6                      	| [$37d0: ld   hl,$938E]
	move.b	#0x17,d0                        	| [$37d3: ld   a,$17]
	exg	d0,d7                              	| [$37d5: ex   af,af']
	jbsr	write_text_55f0                            	| [$37d6: call $55F0]
	lea	game_mem+0x4C45,a1                      	| [$37d9: ld   de,$4C45]
	move.w	#0x938F,d6                      	| [$37dc: ld   hl,$938F]
	move.b	#0x17,d0                        	| [$37df: ld   a,$17]
	exg	d0,d7                              	| [$37e1: ex   af,af']
	jbsr	write_text_55f0                            	| [$37e2: call $55F0]
	lea	game_mem+0x4C60,a1                      	| [$37e5: ld   de,$4C60]
	move.w	#0x9390,d6                      	| [$37e8: ld   hl,$9390]
	move.b	#0x17,d0                        	| [$37eb: ld   a,$17]
	exg	d0,d7                              	| [$37ed: ex   af,af']
	jbsr	write_text_55f0                            	| [$37ee: call $55F0]
	lea	game_mem+0x4C7B,a1                      	| [$37f1: ld   de,$4C7B]
	move.w	#0x9252,d6                      	| [$37f4: ld   hl,$9252]
	move.b	#0x12,d0                        	| [$37f7: ld   a,$12]
	exg	d0,d7                              	| [$37f9: ex   af,af']
	jbsr	write_text_55f0                            	| [$37fa: call $55F0]
*im   1
	jbsr	game_tick_0038                            	| [$37ff: rst  $38]
l_3800:
	move.b	player_input_6026,d0            	| [$3800: ld   a,(player_input_6026)]
	or.b	#0x08,d0                          	| [$3803: or   $08]
	jbsr	osd_enable_vblank_interrupt			| [    jbsr	osd_enable_vblank_interrupt]
	move.b	d0,player_input_6026            	| [$3806: ld   (player_input_6026),a]
	* give barrow to player
	move.b	#0x01,d0                        	| [$3809: ld   a,$01]
	move.b	d0,holds_barrow_61C7                 	| [$380b: ld   (holds_barrow_61C7),a]
	jbsr	l_38d7                            	| [$380e: call $38D7]
	move.b	is_intermission_6274,d0                 	| [$3811: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$3814: cp   $01]
	jeq	l_3820                             	| [$3816: jr   z,$3820]
	move.b	#0x01,d0                        	| [$3818: ld   a,$01]
	move.b	d0,0xA001                       	| [$381a: ld   ($A001),a]
	move.b	d0,0xA002                       	| [$381d: ld   ($A002),a]
l_3820:
	move.b	player_x_6582,d0                	| [$3820: ld   a,(player_x_6582)]
	cmp.b	#0x20,d0                         	| [$3823: cp   $20]
	jne	l_3800                             	| [$3825: jr   nz,$3800]
l_3827:
	move.b	player_input_6026,d0            	| [$3827: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$382a: or   $10]
	move.b	d0,player_input_6026            	| [$382c: ld   (player_input_6026),a]
	jbsr	l_38d7                            	| [$382f: call $38D7]
	move.b	player_x_6582,d0                	| [$3832: ld   a,(player_x_6582)]
	cmp.b	#0x20,d0                         	| [$3835: cp   $20]
	jne	l_3827                             	| [$3837: jr   nz,$3827]
	lea	guard_1_struct_6594,a1         	| [$3839: ld   de,guard_1_struct_6594]
	lea	game_mem+0x38F6,a0                      	| [$383c: ld   hl,$38F6]
	moveq	#0x04,d1                        	| [$383f: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3842: ldir]
l_3844:
	move.b	player_input_6026,d0            	| [$3844: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$3847: or   $10]
	move.b	d0,player_input_6026            	| [$3849: ld   (player_input_6026),a]
	move.b	#0x80,d0                        	| [$384c: ld   a,$80]
	move.b	d0,guard_2_direction_6027       	| [$384e: ld   (guard_2_direction_6027),a]
	jbsr	l_38d7                            	| [$3851: call $38D7]
	move.b	player_x_6582,d0                	| [$3854: ld   a,(player_x_6582)]
	cmp.b	#0xF0,d0                         	| [$3857: cp   $F0]
	jne	l_3844                             	| [$3859: jr   nz,$3844]
l_385b:
	jbsr	l_38d7                            	| [$385b: call $38D7]
	move.b	guard_1_x_6596,d0               	| [$385e: ld   a,(guard_1_x_6596)]
	cmp.b	#0xD0,d0                         	| [$3861: cp   $D0]
	jne	l_385b                             	| [$3863: jr   nz,$385B]
	clr.b	d0                               	| [$3865: ld   a,$00]
	move.b	d0,holds_barrow_61C7                 	| [$3867: ld   (holds_barrow_61C7),a]
	move.b	#0x01,d0                        	| [$386a: ld   a,$01]
	move.b	d0,has_pick_61CF                	| [$386c: ld   (has_pick_61CF),a]
	move.b	#0x37,d0                        	| [$386f: ld   a,$37]
	move.b	d0,unknown_659C                 	| [$3871: ld   (unknown_659C),a]
l_3874:
	move.b	player_input_6026,d0            	| [$3874: ld   a,(player_input_6026)]
	or.b	#0x08,d0                          	| [$3877: or   $08]
	move.b	d0,player_input_6026            	| [$3879: ld   (player_input_6026),a]
	move.b	#0x40,d0                        	| [$387c: ld   a,$40]
	move.b	d0,guard_2_direction_6027       	| [$387e: ld   (guard_2_direction_6027),a]
	jbsr	l_38d7                            	| [$3881: call $38D7]
	move.b	player_x_6582,d0                	| [$3884: ld   a,(player_x_6582)]
	cmp.b	#0x10,d0                         	| [$3887: cp   $10]
	jcs	l_38c4                             	| [$3889: jr   c,$38C4]
	move.b	is_intermission_6274,d0                 	| [$388b: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$388e: cp   $01]
	jeq	l_3899                             	| [$3890: jr   z,$3899]
	move.b	0x9248,d0                       	| [$3892: ld   a,($9248)]
	cmp.b	#0xF6,d0                         	| [$3895: cp   $F6]
	jne	l_38c4                             	| [$3897: jr   nz,$38C4]
l_3899:
	move.b	player_x_6582,d0                	| [$3899: ld   a,(player_x_6582)]
	cmp.b	#0x03,d0                         	| [$389c: cp   $03]
	lea	guard_1_struct_6594,a2         	| [$389e: ld   ix,guard_1_struct_6594]
	lea	unknown_659C,a3                	| [$38a2: ld   iy,unknown_659C]
	clr.b	d2                               	| [$38a6: ld   c,$00]
	move.b	#0x06,d1                        	| [$38a8: ld   b,$06]
	jbsr	l_2ad5                            	| [$38aa: call $2AD5]
	cmp.b	#0x01,d0                         	| [$38ad: cp   $01]
	jne	l_3874                             	| [$38af: jr   nz,$3874]
	jbsr	l_2241                            	| [$38b1: call $2241]
	move.b	#0x03,d1                        	| [$38b4: ld   b,$03]
l_38b6:
	lea	game_mem+0x5000,a0                      	| [$38b6: ld   hl,$5000]
l_38b9:
	subq.w	#1,a0                           	| [$38b9: dec  hl]
	jbsr	l_38d7                            	| [$38ba: call $38D7]
	move.b	d5,d0                           	| [$38bd: ld   a,h]
											| [$38be: cp   $00]
	jne	l_38b9                             	| [$38c0: jr   nz,$38B9]
	subq.b	#1,d1                           	| [...]
	jne	l_38b6                             	| [$38c2: djnz $38B6]
l_38c4:
	clr.b	d0                               	| [$38c4: ld   a,$00]
	jra	l_5e69                             	| [$38c6: jp   $5E69]
l_38c9:
	move.b	#0x01,d1                        	| [$38c9: ld   b,$01]
	lea	player_struct_6580,a0          	| [$38cb: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$38ce: ld   a,$00]
	move.b	d0,gameplay_allowed_6054        	| [$38d0: ld   (gameplay_allowed_6054),a]
	jbsr	l_29f1                            	| [$38d3: call $29F1]
	rts                                    	| [$38d6: ret]

l_38d7:
	move.b	number_of_credits_6000,d0       	| [$38d7: ld   a,(number_of_credits_6000)]
												| [$38da: cp   $00]
	bne.b	0f
	rts                                    	| [$38dc: ret  z]
0:
	move.b	is_intermission_6274,d0                 	| [$38dd: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$38e0: cp   $01]
	bne.b	0f
	rts                                    	| [$38e2: ret  z]
0:
	clr.b	d0                               	| [$38e3: ld   a,$00]
	move.b	d0,unknown_61ED                 	| [$38e5: ld   (unknown_61ED),a]
												| [$38e8: ld   a,(watchdog_reset_B800)]
	move.l	(sp)+,a0                        	| [$38eb: pop  hl]
	jra	l_38c4                             	| [$38ec: jr   $38C4]


write_credits_and_lives_39be:
	move.b	number_of_credits_6000,d0       	| [$39be: ld   a,(number_of_credits_6000)]
	and.b	#0x0F,d0                         	| [$39c1: and  $0F]
	move.w	#0x909F,d6                       	| [$39c3: ld   ($909F),a]
	jbsr	osd_w_videoram
	move.b	number_of_credits_6000,d0       	| [$39c6: ld   a,(number_of_credits_6000)]
	ror.b	#4,d0                            	| [$39c9: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$39d1: and  $0F]
	move.w	#0x90BF,d6                       	| [$39d3: ld   ($90BF),a]
	jbsr	osd_w_videoram
	move.b	#0xE0,d0                        	| [$39d6: ld   a,$E0]
	move.b	#0x07,d1                        	| [$39d8: ld   b,$07]
	move.w	#0x939F,d6                      	| [$39da: ld   hl,$939F]
	jbsr	write_text_29bc                   	| [$39dd: call write_text_29bc]
	move.b	lives_6056,d0                   	| [$39e0: ld   a,(lives_6056)]
	                         	| [$39e3: cp   $00]
	bne.b	0f                               	| [$39e5: ret  z] [...]
	rts                                    	| [$39e5: ret  z]
0:
	move.w	#0x939F,d6                      	| [$39e6: ld   hl,$939F]
	move.b	d0,d1                           	| [$39e9: ld   b,a]
	move.b	#0xCA,d0                        	| [$39ea: ld   a,$CA]
	jbsr	write_text_29bc                   	| [$39ec: call write_text_29bc]
	rts                                    	| [$39ef: ret]
	
	
l_39f6:
	move.b	d2,d0                           	| [$39f6: ld   a,c]
	lea	unknown_61E5,a0                	| [$39f7: ld   hl,unknown_61E5]
	add.b	(a0),d0                          	| [$39fa: add  a,(hl)]
	move.b	d0,(a0)                         	| [$39fb: ld   (hl),a]
	rts                                    	| [$39fc: ret]

read_player_controls_39fd:
	move.b	player_input_6026,d0            	| [$39fd: ld   a,(player_input_6026)]
	move.b	d0,player_move_direction_6050   	| [$3a00: ld   (player_move_direction_6050),a]
	clr.b	d0                               	| [$3a03: xor  a]
* probably play walk sound
*	move.b	d0,0xA007                       	| [$3a04: ld   ($A007),a]
*          ^^^^^^ TODO: review absolute 16-bit address write
*	move.b	#0x07,d0                        	| [$3a07: ld   a,$07]
*out  ($08),a
*	move.b	#0x38,d0                        	| [$3a0b: ld   a,$38]
*out  ($09),a
*	move.b	#0x0E,d0                        	| [$3a0f: ld   a,$0E]
*out  ($08),a
*in   a,($0C)
	not.b	d0                               	| [$3a15: cpl]
	jbsr	l_3a3f                            	| [$3a16: call $3A3F]
	jbsr	l_3a54                            	| [$3a19: call $3A54]
	move.b	d0,player_input_6026            	| [$3a1c: ld   (player_input_6026),a]
	move.b	unknown_6051,d0                 	| [$3a1f: ld   a,(unknown_6051)]
	move.b	d0,unknown_6052                 	| [$3a22: ld   (unknown_6052),a]
	move.b	#0x0F,d0                        	| [$3a25: ld   a,$0F]
*out  ($08),a
*in   a,($0C)
	not.b	d0                               	| [$3a2b: cpl]
	jbsr	l_3a3f                            	| [$3a2c: call $3A3F]
	move.b	d0,unknown_6051                 	| [$3a2f: ld   (unknown_6051),a]
	jbsr	osd_read_dipswitches              	| [$3a32: ld   a,(dip_switch_B000)]
	not.b	d0                               	| [$3a35: cpl]
	move.b	d0,unknown_6163                 	| [$3a36: ld   (unknown_6163),a]
	move.b	#0x01,d0                        	| [$3a39: ld   a,$01]
*	move.b	d0,0xA007                       	| [$3a3b: ld   ($A007),a]
	rts                                    	| [$3a3e: ret]
l_3a3f:
	move.w	d0,-(sp)                        	| [$3a3f: push af]
	move.b	unknown_61ED,d0                 	| [$3a40: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$3a43: cp   $01]
	jeq	l_3a50                             	| [$3a45: jr   z,$3A50]
	move.b	unknown_61F2,d0                 	| [$3a47: ld   a,(unknown_61F2)]
	cmp.b	#0x01,d0                         	| [$3a4a: cp   $01]
	jeq	l_3a50                             	| [$3a4c: jr   z,$3A50]
	move.w	(sp)+,d0                        	| [$3a4e: pop  af]
	rts                                    	| [$3a4f: ret]
l_3a50:
	move.w	(sp)+,d0                        	| [$3a50: pop  af]
	and.b	#0x07,d0                         	| [$3a51: and  $07]
	rts                                    	| [$3a53: ret]
l_3a54:
	move.b	d0,d1                           	| [$3a54: ld   b,a]
	jbsr	osd_read_dipswitches              	| [$3a55: ld   a,(dip_switch_B000)]
	not.b	d0                               	| [$3a58: cpl]
	rol.b	#1,d0                            	| [$3a59: rlc  a]
	and.b	#0x01,d0                         	| [$3a5b: and  $01]
	move.b	d0,d2                           	| [$3a5d: ld   c,a]
	move.b	current_player_617C,d0          	| [$3a5e: ld   a,(current_player_617C)]
	and.b	d2,d0                            	| [$3a61: and  c]
	move.b	d0,unknown_61FD                 	| [$3a62: ld   (unknown_61FD),a]
	cmp.b	#0x01,d0                         	| [$3a65: cp   $01]
	jeq	l_3a6b                             	| [$3a67: jr   z,$3A6B]
	move.b	d1,d0                           	| [$3a69: ld   a,b]
	rts                                    	| [$3a6a: ret]

l_3a6b:
	move.b	unknown_6051,d0                 	| [$3a6b: ld   a,(unknown_6051)]
	and.b	#0xF8,d0                         	| [$3a6e: and  $F8]
	move.b	d0,d2                           	| [$3a70: ld   c,a]
	move.b	d1,d0                           	| [$3a71: ld   a,b]
	and.b	#0x07,d0                         	| [$3a72: and  $07]
	or.b	d2,d0                             	| [$3a74: or   c]
	rts                                    	| [$3a75: ret]
	

l_3b00:
	jbsr	check_remaining_bags_3BBC         	| [$3b00: call check_remaining_bags_3BBC]
	move.b	d2,d0                           	| [$3b03: ld   a,c]
	cmp.b	#0x00,d0                         	| [$3b04: cp   $00]
	bne.b	0f
	rts                                    	| [$3b06: ret  z]
0:
* level completed
	lea		holds_barrow_61C7,a4       	| [$3b07: ld   bc,holds_barrow_61C7] None
	bsr		exx
	lea	barrow_start_screen_address_61C4,a3                	| [$3b0b: ld   iy,barrow_start_screen_address_61C4]
	move.b	#0x3A,d0                        	| [$3b0f: ld   a,$3A]
	move.b	d0,(0x04,a3)                    	| [$3b11: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$3b14: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$3b16: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$3b19: ld   a,$EC]
	move.b	d0,unknown_61CA                 	| [$3b1b: ld   (unknown_61CA),a]
	move.b	(0x01,a3),d4                    	| [$3b1e: ld   d,(iy+$01)]
	move.b	(0x00,a3),d3                    	| [$3b21: ld   e,(iy+$00)]
	jbsr	l_2176                            	| [$3b24: call $2176]
	lea	game_mem+0x3F1B,a0                      	| [$3b27: ld   hl,$3F1B]
	jbsr	l_2018                            	| [$3b2a: call $2018]
* add one life for level completed
	move.b	lives_6056,d0                   	| [$3b2d: ld   a,(lives_6056)]
	addq.b	#1,d0                           	| [$3b30: inc  a]
	move.b	d0,lives_6056                   	| [$3b31: ld   (lives_6056),a]
l_3b34:
	move.b	player_input_6026,d0            	| [$3b34: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$3b37: or   $10]
	move.b	d0,player_input_6026            	| [$3b39: ld   (player_input_6026),a]
	clr.b	d0                               	| [$3b3c: xor  a]
	move.b	d0,guard_1_x_6596               	| [$3b3d: ld   (guard_1_x_6596),a]
	move.b	d0,guard_2_x_659A               	| [$3b40: ld   (guard_2_x_659A),a]
	move.b	#0x01,d0                        	| [$3b43: ld   a,$01]
										| [$3b45: ld   (interrupt_control_A000),a]
	move.b	d0,unknown_61F2                 	| [$3b48: ld   (unknown_61F2),a]
	jbsr	osd_enable_vblank_interrupt	|     jbsr	osd_enable_vblank_interrupt
	jbsr	l_1653                            	| [$3b4c: call $1653]
	move.b	player_x_6582,d0                	| [$3b4f: ld   a,(player_x_6582)]
	cmp.b	#0xF0,d0                         	| [$3b52: cp   $F0]
	jne	l_3b34                             	| [$3b54: jr   nz,$3B34]
	clr.b	d0                               	| [$3b56: xor  a]
	move.b	d0,unknown_61F2                 	| [$3b57: ld   (unknown_61F2),a]
	move.b	d0,holds_barrow_61C7            	| [$3b5a: ld   (holds_barrow_61C7),a]
	jbsr	osd_disable_vblank_interrupt    | jbsr	osd_disable_vblank_interrupt
	move.b	#0x40,d1                        	| [$3b5e: ld   b,$40]
	lea	player_struct_6580,a0          	| [$3b60: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$3b63: ld   a,$00]
l_3b65:
	move.b	d0,(a0)+                         	| [$3b65: ld   (hl),a]
	                           	| [$3b66: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_3b65                             	| [$3b67: djnz $3B65]
	lea		game_mem+0x5200,a0                      	| [$3b69: ld   hl,$5200]
	move.l	a0,unknown_pointer_6140                 	| [$3b6c: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$3b6f: xor  a]
	move.b	d0,unknown_6142                 	| [$3b70: ld   (unknown_6142),a]
	move.b	#0x01,d0                        	| [$3b73: ld   a,$01]
	move.b	d0,is_intermission_6274         	| [$3b75: ld   (is_intermission_6274),a]
	jbsr	play_intro_3700                   	| [$3b78: call play_intro_3700]
	clr.b	d0                               	| [$3b7b: xor  a]
	move.b	d0,is_intermission_6274         	| [$3b7c: ld   (is_intermission_6274),a]
	addq.b	#1,d0                           	| [$3b7f: inc  a]
	move.b	d0,gameplay_allowed_6054        	| [$3b80: ld   (gameplay_allowed_6054),a]
	jbsr	set_bags_coordinates_354f         	| [$3b83: call set_bags_coordinates_354f]
	* restart next level ?
	lea		stack_top_67F0,sp       | [ld   sp,stack_top_67F0]
	jra	l_122b                             	| [$3b89: jp   $122B]


l_38fa:
	jbsr	l_3907                            	| [$38fa: call $3907]
	jbsr	l_3924                            	| [$38fd: call $3924]
	jbsr	l_3941                            	| [$3900: call $3941]
	jbsr	l_395e                            	| [$3903: call $395E]
	rts                                    	| [$3906: ret]
l_3907:
	move.b	player_input_6026,d0            	| [$3907: ld   a,(player_input_6026)]
	and.b	#0x01,d0                         	| [$390a: and  $01]
	move.b	d0,d1                           	| [$390c: ld   b,a]
	move.b	player_move_direction_6050,d0   	| [$390d: ld   a,(player_move_direction_6050)]
	and.b	#0x01,d0                         	| [$3910: and  $01]
	cmp.b	d1,d0                            	| [$3912: cp   b]
	bne.b	0f                               	| [$3913: ret  z] [...]
	rts                                    	| [$3913: ret  z]
0:
	move.b	player_move_direction_6050,d0   	| [$3914: ld   a,(player_move_direction_6050)]
	and.b	#0x01,d0                         	| [$3917: and  $01]
	cmp.b	#0x01,d0                         	| [$3919: cp   $01]
	beq.b	0f                               	| [$391b: ret  nz] [...]
	rts                                    	| [$391b: ret  nz]
0:
	move.b	#0x01,d0                        	| [$391c: ld   a,$01]
	move.b	#0x01,d2                        	| [$391e: ld   c,$01]
	jbsr	l_397b                            	| [$3920: call $397B]
	rts                                    	| [$3923: ret]
l_3924:
	move.b	player_input_6026,d0            	| [$3924: ld   a,(player_input_6026)]
	and.b	#0x02,d0                         	| [$3927: and  $02]
	move.b	d0,d1                           	| [$3929: ld   b,a]
	move.b	player_move_direction_6050,d0   	| [$392a: ld   a,(player_move_direction_6050)]
	and.b	#0x02,d0                         	| [$392d: and  $02]
	cmp.b	d1,d0                            	| [$392f: cp   b]
	bne.b	0f                               	| [$3930: ret  z] [...]
	rts                                    	| [$3930: ret  z]
0:
	move.b	player_move_direction_6050,d0   	| [$3931: ld   a,(player_move_direction_6050)]
	and.b	#0x02,d0                         	| [$3934: and  $02]
	cmp.b	#0x02,d0                         	| [$3936: cp   $02]
	beq.b	0f                               	| [$3938: ret  nz] [...]
	rts                                    	| [$3938: ret  nz]
0:
	move.b	#0x02,d0                        	| [$3939: ld   a,$02]
	move.b	#0x02,d2                        	| [$393b: ld   c,$02]
	jbsr	l_397b                            	| [$393d: call $397B]
	rts                                    	| [$3940: ret]
l_3941:
	move.b	unknown_6051,d0                 	| [$3941: ld   a,(unknown_6051)]
	and.b	#0x01,d0                         	| [$3944: and  $01]
	move.b	d0,d1                           	| [$3946: ld   b,a]
	move.b	unknown_6052,d0                 	| [$3947: ld   a,(unknown_6052)]
	and.b	#0x01,d0                         	| [$394a: and  $01]
	cmp.b	d1,d0                            	| [$394c: cp   b]
	bne.b	0f                               	| [$394d: ret  z] [...]
	rts                                    	| [$394d: ret  z]
0:
	move.b	unknown_6052,d0                 	| [$394e: ld   a,(unknown_6052)]
	and.b	#0x01,d0                         	| [$3951: and  $01]
	cmp.b	#0x01,d0                         	| [$3953: cp   $01]
	beq.b	0f                               	| [$3955: ret  nz] [...]
	rts                                    	| [$3955: ret  nz]
0:
	move.b	#0x06,d0                        	| [$3956: ld   a,$06]
	move.b	#0x05,d2                        	| [$3958: ld   c,$05]
	jbsr	l_397b                            	| [$395a: call $397B]
	rts                                    	| [$395d: ret]
l_395e:
	move.b	unknown_6051,d0                 	| [$395e: ld   a,(unknown_6051)]
	and.b	#0x02,d0                         	| [$3961: and  $02]
	move.b	d0,d1                           	| [$3963: ld   b,a]
	move.b	unknown_6052,d0                 	| [$3964: ld   a,(unknown_6052)]
	and.b	#0x02,d0                         	| [$3967: and  $02]
	cmp.b	d1,d0                            	| [$3969: cp   b]
	bne.b	0f                               	| [$396a: ret  z] [...]
	rts                                    	| [$396a: ret  z]
0:
	move.b	unknown_6052,d0                 	| [$396b: ld   a,(unknown_6052)]
	and.b	#0x02,d0                         	| [$396e: and  $02]
	cmp.b	#0x02,d0                         	| [$3970: cp   $02]
	beq.b	0f                               	| [$3972: ret  nz] [...]
	rts                                    	| [$3972: ret  nz]
0:
	move.b	#0x0E,d0                        	| [$3973: ld   a,$0E]
	move.b	#0x0A,d2                        	| [$3975: ld   c,$0A]
	jbsr	l_397b                            	| [$3977: call $397B]
	rts                                    	| [$397a: ret]
l_397b:
	move.w	d0,-(sp)                        	| [$397b: push af]
	jbsr	l_39f6                            	| [$397c: call $39F6]
	move.w	(sp)+,d0                        	| [$397f: pop  af]
	move.b	d0,d1                           	| [$3980: ld   b,a]
	move.b	unknown_6163,d0                 	| [$3981: ld   a,(unknown_6163)]
	and.b	#0x04,d0                         	| [$3984: and  $04]
	cmp.b	#0x04,d0                         	| [$3986: cp   $04]
	jeq	l_398c                             	| [$3989: jr   z,$398C]
	move.b	d1,d0                           	| [$3988: ld   a,b]
	add.b	d0,d0                            	| [$398b: add  a,a]
	bra.b	0f
l_398c:
	move.b	d1,d0                           	| [$3988: ld   a,b]
0:
	lea	unknown_61E4,a0                	| [$398c: ld   hl,unknown_61E4]
	add.b	(a0),d0                          	| [$398f: add  a,(hl)]
	move.b	d0,(a0)                         	| [$3990: ld   (hl),a]
	cmp.b	#0x02,d0                         	| [$3991: cp   $02]
	bcs.b	0f
	jbsr	l_3997                            	| [$3993: call nc,$3997]
0:
	rts                                    	| [$3996: ret]
l_3997:
	lea	unknown_61E4,a0                	| [$3997: ld   hl,unknown_61E4]
	move.b	(a0),d0                         	| [$399a: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$399b: cp   $02]
	bcc.b	0f                               	| [$399d: ret  c] [...]
	rts                                    	| [$399d: ret  c]
0:
	move.b	number_of_credits_6000,d0       	| [$399e: ld   a,(number_of_credits_6000)]
	cmp.b	#0x90,d0                         	| [$39a1: cp   $90]
	bne.b	0f                               	| [$39a3: ret  z] [...]
	rts                                    	| [$39a3: ret  z]
0:
	moveq	#1,d7
	abcd	d7,d0                        	| [$39a4: add  a,$01 + daa]

	move.b	d0,number_of_credits_6000       	| [$39a7: ld   (number_of_credits_6000),a]
	lea	unknown_61E4,a0                	| [$39aa: ld   hl,unknown_61E4]
	subq.b	#2,(a0)                         	| [$39ad: dec  (hl)] * 2
	lea		game_mem+0x5B68,a0                      	| [$39af: ld   hl,$5B68]
	move.l	a0,unknown_pointer_6140         	| [$39b2: ld   (unknown_pointer_6140),hl]
	clr.b	d0                               	| [$39b5: xor  a]
	move.b	d0,unknown_6142                 	| [$39b6: ld   (unknown_6142),a]
	jbsr	l_39be                            	| [$39b9: call $39BE]
	jra	l_3997                             	| [$39bc: jr   $3997]
l_39be:
	move.b	number_of_credits_6000,d0       	| [$39be: ld   a,(number_of_credits_6000)]
	and.b	#0x0F,d0                         	| [$39c1: and  $0F]
	move.w	#0x909F,d6                       	| [$39c3: ld   ($909F),a]
	jbsr	osd_w_videoram
	move.b	number_of_credits_6000,d0       	| [$39c6: ld   a,(number_of_credits_6000)]
	ror.b	#4,d0                            	| [$39c9: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$39d1: and  $0F]
	move.w	#0x90BF,d6                       	| [$39d3: ld   ($90BF),a]
	jbsr	osd_w_videoram
	move.b	#0xE0,d0                        	| [$39d6: ld   a,$E0]
	move.b	#0x07,d1                        	| [$39d8: ld   b,$07]
	move.w	#0x939F,d6                      	| [$39da: ld   hl,$939F]
	jbsr	write_text_29bc                   	| [$39dd: call write_text_29bc]
	move.b	lives_6056,d0                   	| [$39e0: ld   a,(lives_6056)]
	                         	| [$39e3: cp   $00]
	bne.b	0f                               	| [$39e5: ret  z] [...]
	rts                                    	| [$39e5: ret  z]
0:
	move.w	#0x939F,d6                      	| [$39e6: ld   hl,$939F]
	move.b	d0,d1                           	| [$39e9: ld   b,a]
	move.b	#0xCA,d0                        	| [$39ea: ld   a,$CA]
	jbsr	write_text_29bc                   	| [$39ec: call write_text_29bc]
	rts                                    	| [$39ef: ret]
	* unreachd!
	move.b	#0x01,d1                        	| [$39f0: ld   bc,$0101] 257
	move.b	#0x01,d2                        	| [$39f0: ld   bc,$0101] 257
	nop                                    	| [$39f3: nop]
	move.b	#0x79,d1                        	| [$39f4: ld   bc,$7900] 30976
	move.b	#0x00,d2                        	| [$39f4: ld   bc,$7900] 30976
	lea	unknown_61E5,a0                	| [$39f7: ld   hl,unknown_61E5]
	add.b	(a0),d0                          	| [$39fa: add  a,(hl)]
	move.b	d0,(a0)                         	| [$39fb: ld   (hl),a]
	rts                                    	| [$39fc: ret]


* < return c=0 if still bags, c=1 otherwise (level completed)
check_remaining_bags_3BBC:
	clr.b	d2                               	| [$3b8c: ld   c,$00]
	lea	bags_coordinates_609C,a3       	| [$3b8e: ld   iy,bags_coordinates_609C]
	move.b	#0x36,d1                        	| [$3b92: ld   b,$36]
l_3b94:
	move.b	(a3),d0                    	| [$3b94: ld   a,(iy+$00)]
	                         	| [$3b97: cp   $00]
	beq.b	0f
	rts                                    	| [$3b99: ret  nz]
0:
	addq.w	#1,a3                           	| [$3b9a: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_3b94                             	| [$3b9c: djnz $3B94]
	jra	l_5e60                             	| [$3b9e: jp   $5E60]

l_3ba1:
	lea	unknown_61F4,a0                	| [$3ba1: ld   hl,unknown_61F4]
	move.b	(a0),d0                         	| [$3ba4: ld   a,(hl)]
	move.b	d0,d1                           	| [$3ba5: ld   b,a]
	move.b	time_61E8,d0                    	| [$3ba6: ld   a,(time_61E8)]
	cmp.b	d1,d0                            	| [$3ba9: cp   b]
	bne.b	0f                               	| [$3baa: ret  z] [...]
	rts                                    	| [$3baa: ret  z]
0:
	cmp.b	#0x05,d0                         	| [$3bab: cp   $05]
	bcs.b	0f                               	| [$3bad: ret  nc] [...]
	rts                                    	| [$3bad: ret  nc]
0:
	lea	game_mem+0x5B94,a0                      	| [$3bae: ld   hl,$5B94]
	move.l	a0,unknown_pointer_6140         	| [$3bb1: ld   (unknown_pointer_6140),hl]
	move.b	d0,unknown_61F4                 	| [$3bb4: ld   (unknown_61F4),a]
	clr.b	d0                               	| [$3bb7: xor  a]
	move.b	d0,unknown_6142                 	| [$3bb8: ld   (unknown_6142),a]
	rts                                    	| [$3bbb: ret]
l_3bbc:
	move.b	player_screen_600D,d0           	| [$3bbc: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$3bbf: ld   (screen_index_param_6098),a]
	lea	unknown_6161,a3                	| [$3bc2: ld   iy,unknown_6161]
	lea	unknown_6584,a2                	| [$3bc6: ld   ix,unknown_6584]
	jbsr	compute_logical_address_from_xy_558c	| [$3bca: call compute_logical_address_from_xy_558c]
	move.b	player_screen_600D,d0           	| [$3bcd: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$3bd0: cp   $01]
	bne.b	0f                               	| [$3bd2: ret  z] [...]
	rts                                    	| [$3bd2: ret  z]
0:
	move.b	(0x03,a2),d0                    	| [$3bd3: ld   a,(ix+$03)]
	cmp.b	#0x11,d0                         	| [$3bd6: cp   $11]
	bcc.b	0f                               	| [$3bd8: ret  c] [...]
	rts                                    	| [$3bd8: ret  c]
0:
	move.b	player_screen_600D,d0           	| [$3bd9: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$3bdc: cp   $02]
	jne	l_3bed                             	| [$3bde: jr   nz,$3BED]
											| [$3be0: ld   de,$4BDE]
											| [$3be3: xor  a]
	add.w	#0x4BDE,d6			| adc  hl,de
	move.w	#0x9162,d3                      	| [$3be6: ld   de,$9162]
	move.b	#0x0F,d1                        	| [$3be9: ld   b,$0F]
	jra	l_3bf8                             	| [$3beb: jr   $3BF8]
l_3bed:
	move.l	#0x47DE,d3                      	| [$3bed: ld   de,$47DE]
	                               	| [$3bf0: xor  a]
	add.w	d3,d6					| [adc  hl,de]
	move.w	#0x9302,d3                      	| [$3bf3: ld   de,$9302]
	move.b	#0x17,d1                        	| [$3bf6: ld   b,$17]
l_3bf8:
	move.b	#0xFB,d0                        	| [$3bf8: ld   a,$FB]

	                        	| [$3bfa: push hl]
	                               	| [$3bfb: xor  a]
	cmp.w	d3,d6		| [sbc  hl,de]
	                        	| [$3bfe: pop  hl]
	jeq	l_3c0a                             	| [$3bff: jr   z,$3C0A]
											| [$3c01: ld   a,$FB]
	jbsr	l_3c2c                            	| [$3c03: call $3C2C]
	addq.w	#1,d3                           	| [$3c06: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_3bf8                             	| [$3c07: djnz $3BF8]
	rts                                    	| [$3c09: ret]
l_3c0a:
	move.b	(0x03,a2),d0                    	| [$3c0a: ld   a,(ix+$03)]
	and.b	#0x07,d0                         	| [$3c0d: and  $07]
	move.b	d0,d1                           	| [$3c0f: ld   b,a]
	move.b	#0xF3,d0                        	| [$3c10: ld   a,$F3]
	add.b	d1,d0                            	| [$3c12: add  a,b]
	jbsr	l_3c2c                            	| [$3c13: call $3C2C]
	move.b	#0x03,d1                        	| [$3c16: ld   b,$03]
l_3c18:
	addq.w	#1,a1                           	| [$3c18: inc  de]
	movem.w	d1/d2,-(sp)                    	| [$3c19: push bc]
	move.l	a1,d6
	sub.l	#game_mem,d6
	jbsr	osd_r_videoram                         	| [$3c1a: ld   a,(de)]
	move.w	#0x08,d1                        	| [$3c1b: ld   bc,$0008] 8
											| [$3c1b: ld   bc,$0008] 8
	lea	game_mem+0x3C3F,a0                      	| [$3c1e: ld   hl,$3C3F]
	jbsr	cpir                              	| [$3c21: cpir]
	bne.b	0f
	move.b	#0xF3,d0                        	| [$3c23: ld   a,$F3]
	jbsr	l_3c2c                            	| [$3c25: call z,$3C2C]
0:
	move.b	#0xF3,d0                        	| [$3c23: ld   a,$F3]

	movem.w	(sp)+,d1/d2                    	| [$3c28: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	l_3c18                             	| [$3c29: djnz $3C18]
	rts                                    	| [$3c2b: ret]
l_3c2c:
	jbsr	osd_w_videoram                         	| [$3c2c: ld   (de),a]
	movem.w	d1/d2,-(sp)                    	| [$3c2d: push bc]
	move.b	d0,d1                           	| [$3c2e: ld   b,a]
	jbsr	osd_r_videoram                         	| [$3c2f: ld   a,(de)]
	cmp.b	d1,d0                            	| [$3c30: cp   b]
	move.b	d1,d0                           	| [$3c31: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$3c32: pop  bc]
	jne	l_3c2c                             	| [$3c33: jr   nz,$3C2C]
	                        	| [$3c35: push de]
												| [$3c36: ld   a,d]
												| [$3c37: add  a,$08]
												| [$3c39: ld   d,a]
	move.b	#0x20,d0                        	| [$3c3a: ld   a,$20]
	add.w	#0x800,d6
	jbsr	osd_w_colorram                         	| [$3c3c: ld   (de),a]
	
	                        	| [$3c3d: pop  de]
	rts                                    	| [$3c3e: ret]

* probably to swap memory

l_3c47:
	move.w	guard_logical_address_6091,unknown_61FF             	| [$3c47: ld   hl,(guard_logical_address_6091)]
	                 	| [$3c4a: ld   (unknown_61FF),hl]
	move.l	guard_struct_pointer_6093,unknown_pointer_6201     	| [$3c4d: ld   hl,(guard_struct_pointer_6093)]
	                 	| [$3c50: ld   (unknown_pointer_6201),hl]
	move.w	guard_direction_pointer_6095,unknown_6203             	| [$3c53: ld   hl,(guard_direction_pointer_6095)]
	               	| [$3c56: ld   (unknown_6203),hl]
	move.b	unknown_600B,unknown_6205                 	| [$3c59: ld   a,(unknown_600B)]
	                	| [$3c5c: ld   (unknown_6205),a]
	move.b	screen_index_param_6098,unknown_61F9      	| [$3c5f: ld   a,(screen_index_param_6098)]
	               	| [$3c62: ld   (unknown_61F9),a]
	rts                                    	| [$3c65: ret]

l_3c66:
	move.w	unknown_61FF,guard_logical_address_6091             	| [$3c66: ld   hl,(unknown_61FF)]
	                 	| [$3c69: ld   (guard_logical_address_6091),hl]
	move.l	unknown_pointer_6201,guard_struct_pointer_6093             	| [$3c6c: ld   hl,(unknown_pointer_6201)]
	         	| [$3c6f: ld   (guard_struct_pointer_6093),hl]
	move.w	unknown_6203,guard_direction_pointer_6095             	| [$3c72: ld   hl,(unknown_6203)]
	                 	| [$3c75: ld   (guard_direction_pointer_6095),hl]
	move.b	unknown_6205,unknown_600B                 	| [$3c78: ld   a,(unknown_6205)]
	                 	| [$3c7b: ld   (unknown_600B),a]
	move.b	unknown_61F9,screen_index_param_6098                 	| [$3c7e: ld   a,(unknown_61F9)]
	      	| [$3c81: ld   (screen_index_param_6098),a]
	rts                                    	| [$3c84: ret]


test_non_blocking_tiles_3c85:
	move.w	d0,-(sp)                        	| [$3c85: push af]
	movem.w	d3/d4,-(sp)                    	| [$3c86: push de]

	move.l	a0,-(sp)                        	| [$3c87: push hl]
	* convert D6 to real address
	and.l	#0xFFFF,d6
	lea		game_mem,a0
	add.l	d6,a0
	
	clr.b	d1                               	| [$3c88: ld   b,$00]
	jbsr	l_3caa                            	| [$3c8a: call $3CAA]
	jne	l_3ca6                             	| [$3c8d: jr   nz,$3CA6]
	addq.w	#1,a0                           	| [$3c8f: inc  hl]
	jbsr	l_3caa                            	| [$3c90: call $3CAA]
	jne	l_3ca6                             	| [$3c93: jr   nz,$3CA6]
	move.w	#0x001F,d3                      	| [$3c95: ld   de,$001F] 31
	add.w	d3,a0                            	| [$3c98: add  hl,de]
	jbsr	l_3caa                            	| [$3c99: call $3CAA]
	jne	l_3ca6                             	| [$3c9c: jr   nz,$3CA6]
	addq.w	#1,a0                           	| [$3c9e: inc  hl]
	jbsr	l_3caa                            	| [$3c9f: call $3CAA]
	jne	l_3ca6                             	| [$3ca2: jr   nz,$3CA6]
	move.b	#0x01,d1                        	| [$3ca4: ld   b,$01]
l_3ca6:
	move.l	(sp)+,a0                        	| [$3ca6: pop  hl]
	movem.w	(sp)+,d3/d4                    	| [$3ca7: pop  de]
	move.w	(sp)+,d0                        	| [$3ca8: pop  af]
	rts                                    	| [$3ca9: ret]

l_3caa:
	move.b	(a0),d0                         	| [$3caa: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$3cab: cp   $E0]
	bne.b	0f
	rts                                    	| [$3cad: ret  z]
0:
	cmp.b	#0x49,d0                         	| [$3cae: cp   $49]
	bne.b	0f
	rts                                    	| [$3cb0: ret  z]
0:
	cmp.b	#0x4A,d0                         	| [$3cb1: cp   $4A]
	bne.b	0f
	rts                                    	| [$3cb3: ret  z]
0:
	cmp.b	#0x4B,d0                         	| [$3cb4: cp   $4B]
	rts                                    	| [$3cb6: ret]
	
l_3cb7:
	clr.b	d0                               	| [$3cb7: xor  a]
	move.b	d0,(0x00,a3)                    	| [$3cb8: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$3cbb: ld   (iy+$01),a]
	move.l	(sp)+,a0                        	| [$3cbe: pop  hl]
	rts             
	
l_3cd4:
	jbsr	update_guard_2_screen_address_from_xy_5575	| [$3cd4: call update_guard_2_screen_address_from_xy_5575]
	jbsr	l_3d7a                            	| [$3cd7: call $3D7A]
	jeq	l_3cee                             	| [$3cda: jr   z,$3CEE]
	clr.b	d0                               	| [$3cdc: xor  a]
	move.b	d0,unknown_6077                 	| [$3cdd: ld   (unknown_6077),a]
	move.b	unknown_6209,d0                 	| [$3ce0: ld   a,(unknown_6209)]
	cmp.b	#0x01,d0                         	| [$3ce3: cp   $01]
	jne	l_3cee                             	| [$3ce5: jr   nz,$3CEE]
	jbsr	l_227c                            	| [$3ce7: call $227C]
	clr.b	d0                               	| [$3cea: xor  a]
	move.b	d0,unknown_6209                 	| [$3ceb: ld   (unknown_6209),a]
l_3cee:
	lea	unknown_608F,a2                	| [$3cee: ld   ix,unknown_608F]
	lea	unknown_6157,a3                	| [$3cf2: ld   iy,unknown_6157]
	lea	guard_2_struct_6598,a0         	| [$3cf6: ld   hl,guard_2_struct_6598]
	move.l	a0,guard_struct_pointer_6215                 	| [$3cf9: ld   (guard_struct_pointer_6215),hl]
	move.w	guard_2_logical_address_6078,d6	| [$3cfc: ld   hl,(guard_2_logical_address_6078)]
	lea	guard_2_in_elevator_607B,a1    	| [$3cff: ld   de,guard_2_in_elevator_607B]
	move.b	guard_2_screen_609A,d0          	| [$3d02: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$3d05: ld   (screen_index_param_6098),a]
	lea		unknown_6212,a4            	| [$3d08: ld   bc,unknown_6212] None
	jbsr	l_3d49                            	| [$3d0b: call $3D49]
	jbsr	update_guard_1_screen_address_from_xy_5568	| [$3d0e: call update_guard_1_screen_address_from_xy_5568]
	jbsr	l_3d7a                            	| [$3d11: call $3D7A]
	jeq	l_3d28                             	| [$3d14: jr   z,$3D28]
	clr.b	d0                               	| [$3d16: xor  a]
	move.b	d0,unknown_6037                 	| [$3d17: ld   (unknown_6037),a]
	move.b	unknown_6208,d0                 	| [$3d1a: ld   a,(unknown_6208)]
	cmp.b	#0x01,d0                         	| [$3d1d: cp   $01]
	jne	l_3d28                             	| [$3d1f: jr   nz,$3D28]
	jbsr	l_2241                            	| [$3d21: call $2241]
	clr.b	d0                               	| [$3d24: xor  a]
	move.b	d0,unknown_6208                 	| [$3d25: ld   (unknown_6208),a]
l_3d28:
	lea	unknown_604F,a2                	| [$3d28: ld   ix,unknown_604F]
	lea	unknown_6156,a3                	| [$3d2c: ld   iy,unknown_6156]
	lea	guard_1_struct_6594,a0         	| [$3d30: ld   hl,guard_1_struct_6594]
	move.l	a0,guard_struct_pointer_6215                 	| [$3d33: ld   (guard_struct_pointer_6215),hl]
	move.w	guard_1_logical_address_6038,d6	| [$3d36: ld   hl,(guard_1_logical_address_6038)]
	lea	guard_1_in_elevator_603B,a1    	| [$3d39: ld   de,guard_1_in_elevator_603B]
	move.b	guard_1_screen_6099,d0          	| [$3d3c: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$3d3f: ld   (screen_index_param_6098),a]
	lea		unknown_6211,a4            	| [$3d42: ld   bc,unknown_6211] None
	jbsr	l_3d49                            	| [$3d45: call $3D49]
	rts                                    	| [$3d48: ret]

l_3d49:
	move.b	(0x00,a2),d0                    	| [$3d49: ld   a,(ix+$00)]
	cmp.b	#0x12,d0                         	| [$3d4c: cp   $12]
	jcs	l_3d5e                             	| [$3d4e: jr   c,$3D5E]
	jbsr	l_3d7a                            	| [$3d50: call $3D7A]
	jne	l_3db8                             	| [$3d53: jr   nz,$3DB8]
	move.b	(a1),d0                         	| [$3d55: ld   a,(de)]
	cmp.b	#0x01,d0                         	| [$3d56: cp   $01]
	jeq	l_3db8                             	| [$3d58: jr   z,$3DB8]
	move.b	#0x01,d0                        	| [$3d5a: ld   a,$01]
	move.b	d0,(a4)                         	| [$3d5c: ld   (bc),a]
	rts                                    	| [$3d5d: ret]
l_3d5e:
	move.b	(a4),d0                         	| [$3d5e: ld   a,(bc)]
	cmp.b	#0x01,d0                         	| [$3d5f: cp   $01]
	jeq	l_3dbe                             	| [$3d61: jr   z,$3DBE]
	clr.b	d0                               	| [$3d63: xor  a]
	rts                                    	| [$3d64: ret]
l_3d65:
	jbsr	read_rom                        	| [$3d65: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$3d66: push hl]
	movem.w	d1/d2,-(sp)                    	| [$3d67: push bc]
	move.w	#0x02,d1                        	| [$3d68: ld   bc,$0002] 2
	lea	game_mem+0x3D78,a0                      	| [$3d6b: ld   hl,$3D78]
	jbsr	cpir                              	| [$3d6e: cpir]

	movem.w	(sp)+,d1/d2                    	| [$3d70: pop  bc]
	movem.l	(sp)+,a0                        	| [$3d71: pop  hl]
	bne.b	0f
	rts                                    	| [$3d72: ret  z]
0:
	clr.b	d0                               	| [$3d73: xor  a]
	move.b	d0,unknown_6008                 	| [$3d74: ld   (unknown_6008),a]
	rts                                    	| [$3d77: ret]

l_3d7a:
	move.b	(a0),d0                         	| [$3d7a: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$3d7b: push hl]
	movem.w	d1/d2,-(sp)                    	| [$3d7c: push bc]
	move.w	#0x0030,d1                        	| [$3d7d: ld   bc,$0030] 48
	lea	game_mem+0x3D88,a0                      	| [$3d80: ld   hl,$3D88]
	jbsr	cpir                              	| [$3d83: cpir]

	movem.w	(sp)+,d1/d2                    	| [$3d85: pop  bc]
	movem.l	(sp)+,a0                        	| [$3d86: pop  hl]
	rts                                    	| [$3d87: ret]

l_3db8:
	move.l	guard_struct_pointer_6215,a0             	| [$3db8: ld   hl,(guard_struct_pointer_6215)]
	move.b	#0x22,d0                        	| [$3dbb: ld   a,$22]
	move.b	d0,(a0)                         	| [$3dbd: ld   (hl),a]
* < A4: can be 0 or pointing on ram
l_3dbe:
	move.l	a4,d0
	beq.b	0f
	clr.b	d0                               	| [$3dbe: xor  a]
	move.b	d0,(a4)                         	| [$3dbf: ld   (bc),a]
0:
	move.b	#0x01,d0                        	| [$3dc0: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$3dc2: ld   (iy+$00),a]
	exg	a1,a0                              	| [$3dc5: ex   de,hl]
	move.w	#0x0004,d3                      	| [$3dc6: ld   de,$0004] 4
	clr.b	d0                               	| [$3dc9: xor  a]
	sub.w	d3,a0								| [sbc  hl,de]
	move.b	d0,(a0)                         	| [$3dcc: ld   (hl),a]
	                      	| [$3dcd: ld   hl,$0437]
	* initialize pointer in ROM
	move.w	#0x437,unknown_6154                 	| [$3dd0: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$3dd3: xor  a]
	move.b	d0,unknown_61F5                 	| [$3dd4: ld   (unknown_61F5),a]
	move.b	screen_index_param_6098,d0      	| [$3dd7: ld   a,(screen_index_param_6098)]
	move.b	d0,d1                           	| [$3dda: ld   b,a]
	move.b	player_screen_600D,d0           	| [$3ddb: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$3dde: cp   b]
	beq.b	0f
	rts                                    	| [$3ddf: ret  nz]
0:
	lea	game_mem+0x3F4B,a0                      	| [$3de0: ld   hl,$3F4B]
	jbsr	l_2018                            	| [$3de3: call $2018]
	clr.b	d0                               	| [$3de6: xor  a]
	move.b	d0,unknown_6153                 	| [$3de7: ld   (unknown_6153),a]
	rts                                    	| [$3dea: ret]

 * test if can pick bag
can_pick_bag_3DEB:
	move.l	a2,-(sp)                        	| [$3deb: push ix]
	move.l	unknown_pointer_6140,a2             	| [$3ded: ld   ix,(unknown_pointer_6140)]
	move.b	(0x03,a2),d0                    	| [$3df1: ld   a,(ix+$03)]
	move.l	(sp)+,a2                        	| [$3df4: pop  ix]
	cmp.b	#0xFF,d0                         	| [$3df6: cp   $FF]
	rts                                    	| [$3df8: ret]

l_3df9:
	            	| [$3df9: ld   a,(io_read_shit_B800)]
	lea	player_struct_6580,a2          	| [$3dfc: ld   ix,player_struct_6580]
	lea	unknown_65A8,a3                	| [$3e00: ld   iy,unknown_65A8]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e04: call copy_4_bytes_ix_iy_1001]
	lea	unknown_6584,a2                	| [$3e07: ld   ix,unknown_6584]
	lea	unknown_65A4,a3                	| [$3e0b: ld   iy,unknown_65A4]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e0f: call copy_4_bytes_ix_iy_1001]
	lea	unknown_6588,a2                	| [$3e12: ld   ix,unknown_6588]
	lea	unknown_65AC,a3                	| [$3e16: ld   iy,unknown_65AC]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e1a: call copy_4_bytes_ix_iy_1001]
	lea	unknown_658C,a2                	| [$3e1d: ld   ix,unknown_658C]
	lea	unknown_65B0,a3                	| [$3e21: ld   iy,unknown_65B0]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e25: call copy_4_bytes_ix_iy_1001]
	lea	unknown_6590,a2                	| [$3e28: ld   ix,unknown_6590]
	lea	unknown_65B4,a3                	| [$3e2c: ld   iy,unknown_65B4]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e30: call copy_4_bytes_ix_iy_1001]
	lea	unknown_659C,a2                	| [$3e33: ld   ix,unknown_659C]
	lea	sprite_shadow_ram_65A0,a3                	| [$3e37: ld   iy,sprite_shadow_ram_65A0]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$3e3b: call copy_4_bytes_ix_iy_1001]
	clr.b	d0                               	| [$3e3e: xor  a]
	move.w	#0x985F,d6                       	| [$3e3f: ld   ($985F),a]
	jbsr	osd_w_colorram

	jbsr	osd_read_dipswitches              	| [$3e42: ld   a,(dip_switch_B000)]
	not.b	d0                               	| [$3e45: cpl]
	and.b	#0x80,d0                         	| [$3e46: and  $80]
	rol.b	#1,d0                            	| [$3e48: rlc  a]
	move.b	#0x01,d1                        	| [$3e4a: ld   b,$01]
	                         	| [$3e4c: cp   $00]
	jeq	l_3e57                             	| [$3e4e: jr   z,$3E57]
	move.b	d0,d1                           	| [$3e50: ld   b,a]
	move.b	current_player_617C,d0          	| [$3e51: ld   a,(current_player_617C)]
	not.b	d0                               	| [$3e54: cpl]
	and.b	d1,d0                            	| [$3e55: and  b]
	move.b	d0,d1                           	| [$3e56: ld   b,a]
l_3e57:
	move.b	d1,d2                           	| [$3e57: ld   c,b]
	move.b	#0x08,d1                        	| [$3e58: ld   b,$08]
	move.w	#0x0004,d3                      	| [$3e5a: ld   de,$0004] 4
	lea	unknown_65A3,a0                	| [$3e5d: ld   hl,unknown_65A3]
l_3e60:
	move.b	(a0),d0                         	| [$3e60: ld   a,(hl)]
	                         	| [$3e61: cp   $00]
	jeq	l_3e67                             	| [$3e63: jr   z,$3E67]
	add.b	d2,d0                            	| [$3e65: add  a,c]
	move.b	d0,(a0)                         	| [$3e66: ld   (hl),a]
l_3e67:
	add.w	d3,a0                            	| [$3e67: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3e60                             	| [$3e68: djnz $3E60]
	lea	unknown_65AF,a0                	| [$3e6a: ld   hl,unknown_65AF]
	move.b	#0x03,d1                        	| [$3e6d: ld   b,$03]
l_3e6f:
	subq.b	#1,(a0)                         	| [$3e6f: dec  (hl)]
	add.w	d3,a0                            	| [$3e70: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3e6f                             	| [$3e71: djnz $3E6F]
	move.b	d2,d0                           	| [$3e73: ld   a,c]
	                         	| [$3e74: cp   $00]
	jne	l_3e8e                             	| [$3e76: jr   nz,$3E8E]
	move.b	player_screen_600D,d0           	| [$3e78: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$3e7b: cp   $01]
	jeq	l_3e8e                             	| [$3e7d: jr   z,$3E8E]
	move.b	unknown_61ED,d0                 	| [$3e7f: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$3e82: cp   $01]
	jeq	l_3e8e                             	| [$3e84: jr   z,$3E8E]
	move.b	unknown_65A6,d0                 	| [$3e86: ld   a,(unknown_65A6)]
	addq.b	#2,d0                           	| [$3e89: inc  a] * 2
	move.b	d0,unknown_65A6                 	| [$3e8b: ld   (unknown_65A6),a]
l_3e8e:
	rts                                    	| [$3e8e: ret]

 * internal actual add to score routine
 * score is stored from 6176 to 6178 for player 1
 * 6179 to 617B for player 2
l_5500:
	move.b	unknown_61ED,d0                 	| [$5500: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$5503: cp   $01]
	bne.b	0f
	rts                                    	| [$5505: ret  z]
0:
	move.b	current_player_617C,d0          	| [$5506: ld   a,(current_player_617C)]
	                         	| [$5509: cp   $00]
	jne	l_5531                             	| [$550b: jp   nz,$5531]
	lea	player_1_score_6176,a2                	| [$550e: ld   ix,player_1_score_6176]
l_5512:
	clr.b	d0                               	| [$5512: xor  a]
	move.b	d6,d0                           	| [$5513: ld   a,l]
	move.b	d0,d1                           	| [$5514: ld   b,a]
	move.b	(0x00,a2),d0                    	| [$5515: ld   a,(ix+$00)]
	abcd	d1,d0                            	| [$5518: add  a,b + daa]
	move.b	d0,(0x00,a2)                    	| [$551a: ld   (ix+$00),a]
	move.w	d6,d0                           	| [$551d: ld   a,h]
	lsr.w	#8,d0
	move.b	d0,d1                           	| [$551e: ld   b,a]
	move.b	(0x01,a2),d0                    	| [$551f: ld   a,(ix+$01)]
	abcd	d1,d0 								| [ adc  a,b+daa ]
	move.b	d0,(0x01,a2)                    	| [$5524: ld   (ix+$01),a]
	move.b	(0x02,a2),d0                    	| [$5527: ld   a,(ix+$02)]
	moveq	#0,d7
	abcd	d7,d0				| [adc  a,$00 + daa]
	move.b	d0,(0x02,a2)                    	| [$552d: ld   (ix+$02),a]
	rts                                    	| [$5530: ret]


l_5531:
	lea	player_2_score_6179,a2                	| [$5531: ld   ix,player_2_score_6179]
	jra	l_5512                             	| [$5535: jr   $5512]

* < in:	 ix:	 player "structure"
* <             iy:	 guard "structure"
guard_collision_5537:
	move.b	(0x02,a3),d0                    	| [$5537: ld   a,(iy+$02)]  guard x
	move.b	d0,d1                           	| [$553a: ld   b,a]
	move.b	(0x02,a2),d0                    	| [$553b: ld   a,(ix+$02)]  player x
	jbsr	within_bounds_554E                	| [$553e: call within_bounds_554E]
	move.b	(0x03,a3),d0                    	| [$5541: ld   a,(iy+$03)] guard y
	move.b	d0,d1                           	| [$5544: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$5545: ld   a,(ix+$03)]  player y
	jbsr	within_bounds_554E                	| [$5548: call within_bounds_554E]
	move.b	#0x01,d0                        	| [$554b: ld   a,$01] set flag to 1: collision with guard
	rts                                    	| [$554d: ret]

* check if a+11 > b and a-8 < b (kind of square collision if applied to both x and y)
* in:	 a,b: values to compare
* out:	 if both conditions are OK, returns, else pops the stack and exits from 5537
within_bounds_554E:
	move.b	d0,d2                           	| [$554e: ld   c,a]
	add.b	#0x0B,d0                         	| [$554f: add  a,$0B]
	cmp.b	d1,d0                            	| [$5551: cp   b]
	jcs	l_555b                             	| [$5552: jr   c,$555B]
	move.b	d2,d0                           	| [$5554: ld   a,c]
	sub.b	#0x08,d0                         	| [$5555: sub  $08]
	cmp.b	d1,d0                            	| [$5557: cp   b]
	jcc	l_555b                             	| [$5558: jr   nc,$555B]
	rts                                    	| [$555a: ret]
* okay:	return from guard_collision_5537 directly (pop)
l_555b:
	move.w	(sp)+,d0                        	| [$555b: pop  af]
	clr.b	d0                               	| [$555c: xor  a]
	rts                                    	| [$555d: ret]


* the screen addresses are global for all 3 screens
* those are the addresses the game uses for collisions with walls and ladders
* the display address is probably different and somewhere else but related
* (clipping those routines cause havoc to character display)

update_player_screen_address_from_xy_555E:
	lea	player_struct_6580,a2          	| [$555e: ld   ix,player_struct_6580]
	lea	player_logical_address_6009,a3  	| [$5562: ld   iy,player_logical_address_6009]
	jra	l_5582                             	| [$5566: jr   $5582]

update_guard_1_screen_address_from_xy_5568:
	lea	guard_1_struct_6594,a2         	| [$5568: ld   ix,guard_1_struct_6594]
	lea	guard_1_logical_address_6038,a3 	| [$556c: ld   iy,guard_1_logical_address_6038]
	move.b	guard_1_screen_6099,d0          	| [$5570: ld   a,(guard_1_screen_6099)]
	jra	l_5585                             	| [$5573: jr   $5585]

update_guard_2_screen_address_from_xy_5575:
	lea	guard_2_struct_6598,a2         	| [$5575: ld   ix,guard_2_struct_6598]
	lea	guard_2_logical_address_6078,a3 	| [$5579: ld   iy,guard_2_logical_address_6078]
	move.b	guard_2_screen_609A,d0          	| [$557d: ld   a,(guard_2_screen_609A)]
	jra	l_5585                             	| [$5580: jr   $5585]

l_5582:
	move.b	player_screen_600D,d0           	| [$5582: ld   a,(player_screen_600D)]
l_5585:
	move.b	d0,screen_index_param_6098      	| [$5585: ld   (screen_index_param_6098),a]
	jbra	compute_logical_address_from_xy_558c	| [$5588: call compute_logical_address_from_xy_558c]
	                                    	| [$558b: ret]

* compute logical address from x,y:	rounded by 8
* < ix: character structure
* < iy: where to update
* > D6 logical address
compute_logical_address_from_xy_558c:
	jbsr	l_55ac                            	| [$558c: call $55AC]
	jbsr	l_559a                            	| [$558f: call $559A]
	* store as big endian now (was little!)
	lsl.w	#8,d5
	move.b	d6,d5
	move.w	d5,d6
	STORE_DX_BE_WORD_AY	d6,a3               | [$5592: ld   (iy+$00),l]
											| [$5595: ld   (iy+$01),h]

	rts                                    	| [$5598: ret]


l_559a:
	* align X coord
	move.b	(0x03,a2),d0                    	| [$559a: ld   a,(ix+$03)]  character y value
	add.b	#0x10,d0                         	| [$559d: add  a,$10]
	lsr.b	#3,d0                            	| [$559f: srl  a] * 3
	add.b	d6,d0                            	| [$55a5: add  a,l]
	move.b	d0,d6                           	| [$55a6: ld   l,a]
	move.b	d5,d0                           	| [$55a7: ld   a,h]
	clr		d7
	addx.b  d7,d0
	move.b	d0,d5                           	| [$55aa: ld   h,a]
	rts                                    	| [$55ab: ret]

l_55ac:
	move.b	(0x02,a2),d0                    	| [$55ac: ld   a,(ix+$02)]  character x value
	addq.b	#0x07,d0                        	| [$55af: add  a,$07]
	not.b	d0                               	| [$55b1: cpl]
	lsr.b	#1,d0                            	| [$55b2: srl  a]
	jra	l_5bcd                             	| [$55b4: jp   $5BCD]

 * multiply $20 * a and add it to $4000
l_55b8:
	move.b	d0,d1                           	| [$55b8: ld   b,a]
	move.w	#0x0020,d3                      	| [$55b9: ld   de,$0020] 32
	lea	game_mem+0x4000,a0                      	| [$55bc: ld   hl,$4000]
l_55bf:
	add.w	d3,a0                            	| [$55bf: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_55bf                             	| [$55c0: djnz $55BF]

l_55c2:
	move.b	screen_index_param_6098,d0      	| [$55c2: ld   a,(screen_index_param_6098)]
	cmp.b	#0x01,d0                         	| [$55c5: cp   $01]
	bne.b	0f                               	| [$55c7: ret  z] [...]
	rts                                    	| [$55c7: ret  z]
0:
	cmp.b	#0x02,d0                         	| [$55c8: cp   $02]
	jne	l_55d1                             	| [$55ca: jr   nz,$55D1]
	                           	| [$55cc: ld   a,h]
	add.w	#0x0400,a0                        	| [$55cd: add  a,$04]  screen 2:	add $400
	                           	| [$55cf: ld   h,a]
	rts                                    	| [$55d0: ret]
l_55d1:
	cmp.b	#0x03,d0                         	| [$55d1: cp   $03]  screen 3:	 add $800
	beq.b	0f                               	| [$55d3: ret  nz] [...]
	rts                                    	| [$55d3: ret  nz]
0:
	                           	| [$55d4: ld   a,h]
	add.w	#0x0800,a0                         	| [$55d5: add  a,$08]
	                           	| [$55d7: ld   h,a]
	rts                                    	| [$55d8: ret]

* display ASCII text on line until code 0x3F is reached
* < a1: pointer on text
* < d6: start address of screen

display_text_55d9:
	move.w	#-0x20,d1                        	| [$55d9: ld   bc,$FFE0] 65504
												| [$55d9: ld   bc,$FFE0] 65504
	move.b	(a1),d0                         	| [$55dc: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55dd: cp   $3F]
	bne.b	0f
	rts                                    	| [$55df: ret  z]
0:
	* subtract 0x30, now numbers are in tiles 0-9, letters follow with
	* a gap in between
	sub.b	#0x30,d0                         	| [$55e0: sub  $30]
	jbsr	osd_w_videoram                         	| [$55e2: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$55e3: push hl]
												| [$55e4: ld   a,h]
	add.w	#0x0800,d6                         	| [$55e5: add  a,$08]
										| [$55e7: ld   h,a]
	* bank 0, lower end of tiles and color table 0
	clr.b	d0                               	| [$55e8: ld   a,$00]
	jbsr	osd_w_colorram                         	| [$55ea: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$55eb: pop  hl]
	addq.w	#1,a1                           	| [$55ec: inc  de]
	add.w	d1,d6                            	| [$55ed: add  hl,bc]
	jra	display_text_55d9                             	| [$55ee: jr   $55D9]

* write text
* < A1: text
* < D6: screen address
* < D7: attribute
write_text_55f0:
	move.w	#-0x20,d1                        	| [$55f0: ld   bc,$FFE0] 65504
										| [$55f0: ld   bc,$FFE0] 65504
	move.b	(a1),d0                         	| [$55f3: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55f4: cp   $3F]
	bne.b	0f
	rts                                    	| [$55f6: ret  z]
0:
	jbsr	osd_w_videoram                         	| [$55f7: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$55f8: push hl]
	add.w	#0x0800,d6                           	| [$55f9: ld   a,h]
	                           	| [$55fc: ld   h,a]
	exg	d0,d7                              	| [$55fd: ex   af,af']
	jbsr	osd_w_colorram                         	| [$55fe: ld   (hl),a]
	exg	d0,d7                              	| [$55ff: ex   af,af']
	move.w	(sp)+,d6                        	| [$5600: pop  hl]
	addq.w	#1,a1                           	| [$5601: inc  de]
	add.w	d1,d6                            	| [$5602: add  hl,bc]
	jra	write_text_55f0                             	| [$5603: jr   $55F0]
	
write_attribute_on_line_5605:
	move.w	#0x0020,d3                      	| [$5605: ld   de,$0020] 32
	move.b	#0x1C,d1                        	| [$5608: ld   b,$1C]
l_560a:
	jbsr	osd_w_colorram                         	| [$560a: ld   (hl),a]
	add.w	d3,d6                            	| [$560b: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_560a                             	| [$560c: djnz $560A]
	rts                                    	| [$560e: ret]
	
write_scores_and_time_560f:
	lea	player_1_score_6176,a2                	| [$560f: ld   ix,player_1_score_6176]
	move.w	#0x92E1,d6                      	| [$5613: ld   hl,$92E1]
	jbsr	write_numeric_value_563C                            	| [$5616: call $563C]
	lea	player_2_score_6179,a2                	| [$5619: ld   ix,player_2_score_6179]
	move.w	#0x9061,d6                      	| [$561d: ld   hl,$9061]
	jbsr	write_numeric_value_563C                            	| [$5620: call $563C]
	lea	time_61E8,a2                   	| [$5623: ld   ix,time_61E8]
	move.w	#0x9201,d6                      	| [$5627: ld   hl,$9201]
	move.b	#0x01,d1                        	| [$562a: ld   b,$01]
	jbsr	l_5641                            	| [$562c: call $5641]
	lea	unknown_61E9,a2                	| [$562f: ld   ix,unknown_61E9]
	move.w	#0x91C1,d6                     	| [$5633: ld   hl,$91C1]
	move.b	#0x01,d1                        	| [$5636: ld   b,$01]
	jbsr	l_5641                            	| [$5638: call $5641]
	rts                                    	| [$563b: ret]

write_numeric_value_563C:
	move.b	#0x03,d1                        	| [$563c: ld   b,$03]
	move.w	#0x0020,d3                      	| [$563e: ld   de,$0020] 32
l_5641:
	move.b	(a2),d0                    	| [$5641: ld   a,(ix+$00)]
	jbsr	write_digit_564d                            	| [$5644: call $564D]
	addq.w	#1,a2                           	| [$5647: inc  ix]
	add.w	d3,d6                            	| [$5649: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5641                             	| [$564a: djnz $5641]
	rts                                    	| [$564c: ret]
write_digit_564d:
	move.w	d0,-(sp)                        	| [$564d: push af]
	and.b	#0x0F,d0                         	| [$564e: and  $0F]
	jbsr	osd_w_videoram                         	| [$5650: ld   (hl),a]
	add.w	d3,a0                            	| [$5651: add  hl,de]
	move.w	(sp)+,d0                        	| [$5652: pop  af]
	ror.b	#4,d0                            	| [$5653: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$565b: and  $0F]
	jbsr	osd_w_videoram                         	| [$565d: ld   (hl),a]
	rts                                    	| [$565e: ret]

l_5bcd:
	lsr.b	#2,d0                            	| [$5bcd: srl  a]
                            	| [$5bcf: srl  a]
	                         	| [$5bd1: cp   $00]
	jeq	l_55c2                             	| [$5bd3: jp   z,$55C2]
	jra	l_55b8                             	| [$5bd6: jp   $55B8]


 * in:	 d6 contains 16 bit hex value of the points to add
 * $100 for 100 points, $500 for 500 etc...
add_to_score_5C90:
	move.b	gameplay_allowed_6054,d0        	| [$5c90: ld   a,(gameplay_allowed_6054)]
	                         	| [$5c93: cp   $00]
	bne.b	0f
	rts                                    	| [$5c95: ret  z]
0:
	jbsr	l_5500                            	| [$5c96: call $5500]
	rts                                    	| [$5c99: ret]

l_5c9a:
	jra	l_5e46                             	| [$5c9a: jp   $5E46]

l_5ca0:
	lea	game_mem+0x5D44,a2                      	| [$5ca0: ld   ix,$5D44]
	lea	player_struct_6580,a3          	| [$5ca4: ld   iy,player_struct_6580]
	move.w	#0x0004,d3                      	| [$5ca8: ld   de,$0004] 4
	move.b	unknown_6288,d0                 	| [$5cab: ld   a,(unknown_6288)]
	                         	| [$5cae: cp   $00]
	bne.b	0f
	jbsr	l_5d2a                            	| [$5cb0: call z,$5D2A]
0:
	move.b	unknown_6288,d0                 	| [$5cb3: ld   a,(unknown_6288)]
l_5cb6:
	                         	| [$5cb6: cp   $00]
	jeq	l_5cbf                             	| [$5cb8: jr   z,$5CBF]
	add.w	d3,a2                            	| [$5cba: add  ix,de]
	subq.b	#1,d0                           	| [$5cbc: dec  a]
	jra	l_5cb6                             	| [$5cbd: jr   $5CB6]
l_5cbf:
	move.b	(0x03,a2),d0                    	| [$5cbf: ld   a,(ix+$03)]
	cmp.b	#0xFF,d0                         	| [$5cc2: cp   $FF]
	jeq	l_5d02                             	| [$5cc4: jr   z,$5D02]
	cmp.b	#0xFE,d0                         	| [$5cc6: cp   $FE]
	jeq	l_5d1c                             	| [$5cc8: jp   z,$5D1C]
	move.b	d0,d1                           	| [$5ccb: ld   b,a]
	move.b	player_input_6026,d0            	| [$5ccc: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5ccf: and  $07]
	or.b	d1,d0                             	| [$5cd1: or   b]
	move.b	d0,player_input_6026            	| [$5cd2: ld   (player_input_6026),a]
	move.b	(0x02,a3),d0                    	| [$5cd5: ld   a,(iy+$02)]
	cmp.b	(0x00,a2),d0                     	| [$5cd8: cp   (ix+$00)]
	beq.b	0f                               	| [$5cdb: ret  nz] [...]
	rts                                    	| [$5cdb: ret  nz]
0:
	move.b	(0x03,a3),d0                    	| [$5cdc: ld   a,(iy+$03)]
	cmp.b	(0x01,a2),d0                     	| [$5cdf: cp   (ix+$01)]
	beq.b	0f                               	| [$5ce2: ret  nz] [...]
	rts                                    	| [$5ce2: ret  nz]
0:
	move.b	player_screen_600D,d0           	| [$5ce3: ld   a,(player_screen_600D)]
	cmp.b	(0x02,a2),d0                     	| [$5ce6: cp   (ix+$02)]
	beq.b	0f                               	| [$5ce9: ret  nz] [...]
	rts                                    	| [$5ce9: ret  nz]
0:
l_5cea:
	move.b	unknown_6288,d0                 	| [$5cea: ld   a,(unknown_6288)]
	addq.b	#1,d0                           	| [$5ced: inc  a]
	move.b	d0,unknown_6288                 	| [$5cee: ld   (unknown_6288),a]
	move.b	player_input_6026,d0            	| [$5cf1: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$5cf4: and  $80]
	cmp.b	#0x80,d0                         	| [$5cf6: cp   $80]
	bne.b	0f                               	| [$5cf8: ret  z] [...]
	rts                                    	| [$5cf8: ret  z]
0:
	move.b	player_input_6026,d0            	| [$5cf9: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5cfc: and  $07]
	move.b	d0,player_input_6026            	| [$5cfe: ld   (player_input_6026),a]
	rts                                    	| [$5d01: ret]

l_5d02:
	move.b	#0x10,d0                        	| [$5d02: ld   a,$10]
	move.b	d0,guard_1_y_6597               	| [$5d04: ld   (guard_1_y_6597),a]
	move.b	d0,guard_2_y_659B               	| [$5d07: ld   (guard_2_y_659B),a]
	move.b	#0xD0,d0                        	| [$5d0a: ld   a,$D0]
	move.b	d0,guard_1_x_6596               	| [$5d0c: ld   (guard_1_x_6596),a]
	move.b	#0xE0,d0                        	| [$5d0f: ld   a,$E0]
	jra	l_5e38                             	| [$5d11: jp   $5E38]
l_5d14:
	move.b	elevator_y_current_screen_6587,d0	| [$5d14: ld   a,(elevator_y_current_screen_6587)]
	cmp.b	#0x11,d0                         	| [$5d17: cp   $11]  max height for elevator
	beq.b	0f                               	| [$5d19: ret  nz] [...]
	rts                                    	| [$5d19: ret  nz]
0:
	jra	l_5cea                             	| [$5d1a: jr   $5CEA]
l_5d1c:
	move.b	wagon_data_658A,d0              	| [$5d1c: ld   a,(wagon_data_658A)]
	cmp.b	#0x7F,d0                         	| [$5d1f: cp   $7F]
	beq.b	0f                               	| [$5d21: ret  nz] [...]
	rts                                    	| [$5d21: ret  nz]
0:
	move.b	unknown_6019,d0                 	| [$5d22: ld   a,(unknown_6019)]
	cmp.b	#0x01,d0                         	| [$5d25: cp   $01]
	beq.b	0f                               	| [$5d27: ret  nz] [...]
	rts                                    	| [$5d27: ret  nz]
0:
	jra	l_5cea                             	| [$5d28: jr   $5CEA]
l_5d2a:
	move.w	#0x91C2,d6                      	| [$5d2a: ld   hl,$91C2]
	move.w	d6,barrow_start_screen_address_61C4	| [$5d2d: ld   (barrow_start_screen_address_61C4),hl]
	move.w	d6,unknown_screen_address_61FA  	| [$5d30: ld   (unknown_screen_address_61FA),hl]
	move.b	#0x01,d0                        	| [$5d33: ld   a,$01]
	move.b	d0,unknown_61C6                 	| [$5d35: ld   (unknown_61C6),a]
	move.b	d0,unknown_61FC                 	| [$5d38: ld   (unknown_61FC),a]
	move.b	#0x03,d0                        	| [$5d3b: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$5d3d: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$5d40: ld   (guard_2_screen_609A),a]
	rts                                    	| [$5d43: ret]


l_5e38:
	move.b	d0,guard_2_x_659A               	| [$5e38: ld   (guard_2_x_659A),a]
 * make guards start at 3rd screen
	move.b	#0x03,d0                        	| [$5e3b: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$5e3d: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$5e40: ld   (guard_2_screen_609A),a]
	jra	l_5d14                             	| [$5e43: jp   $5D14]
l_5e46:
	move.b	gameplay_allowed_6054,d0        	| [$5e46: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$5e49: cp   $01]
	bne.b	0f                               	| [$5e4b: ret  z] [...]
	rts                                    	| [$5e4b: ret  z]
0:
	move.b	player_input_6026,d0            	| [$5e4c: ld   a,(player_input_6026)]
	and.b	#0x07,d0                         	| [$5e4f: and  $07]
	move.b	d0,player_input_6026            	| [$5e51: ld   (player_input_6026),a]
	jra	l_5ca0                             	| [$5e54: jp   $5CA0]


l_5e60:
	move.b	#0x0A,d0                        	| [$5e60: ld   a,$0A]
	move.b	d0,unknown_627D                 	| [$5e62: ld   (unknown_627D),a]
	move.b	#0x01,d2                        	| [$5e65: ld   c,$01]
	rts                                    	| [$5e67: ret]

l_5e69:
	move.b	d0,unknown_61ED                 	| [$5e69: ld   (unknown_61ED),a]
	move.b	#0x0A,d0                        	| [$5e6c: ld   a,$0A]
	move.b	d0,unknown_627D                 	| [$5e6e: ld   (unknown_627D),a]
	jra	l_38c9                             	| [$5e71: jp   $38C9]
direction_table_5970:
	dc.b	0x80,0x40,0x20,0x10
