* bagman (le bagnard)
*
* Z80
* disassembled by JOTD in 2010 (never too late for a good job!!)
*
 * 554C:	 0 no guard collision
* 131B 00 C3 27 13 no timer death
* wp 6025,1,w :	 watchpoints

*  guard sees right:	$80, left $40, up $10, down $20

* todo:	 find the "guard stuck" monitoring routine that resets guard at the third screen:	block the guards at 3rd screen to see!
* gameplay_allowed_6054:	if 0, cannot do anything. pressing start sets to 1:	 unimportant for the game
* elevator_y_current_screen_6587:
* elevator_dir_current_screen_6010:	 direction shared by both elevators:	1 up, 0 down
* elevator_not_moving_6012:	 0 moving:	 characters cannot move, 1 not moving
* the elevator direction and elevator floor timer are shared by both elevators
* the master being the one of the current screen or the one from screen 2
* if player is on screen 1
* elevator not in player screen does not move until in player screen!!!
* this explains the strange elevator behavior. This is deliberate and allows
* for instance to fetch the bags of screen 2 while using the elevator from
* screen 3. By timing it wisely, one can avoid the "go down bug"
* also explains that the guards never wait for an elevator when not in player
* screen:	 they could wait forever since it's not moving!!!!

*  1A0B:	 A.I. for branch with player/guard screen different

* xy <-> logical address conversions (Python proto code)
*def xy2addr(x,y,current_screen):
*     rval = 0x4062 + 0x400 * current_screen + y/8 + ((0xE0-x)/8)*0x20
*     return rval
*def addr2xy(addr):
*     b = addr - 0x4000
*     current_screen = 0
*     while b < 0x400:
*	b-=0x400
*	current_screen+=1
*     b -= 0x62
*     y = (b % 0x20) * 8
*     x = 0xE0 - b / 4
*     return [x,y,current_screen]

*tables:
*2CD3:	guard elevator waiting point table
*5974:	guard path branch address table
*5A10:	guard screen 1 => screen 2 (3 bytes/entry)
*5A3D:	guard screen 2 => screen 1 (3 bytes/entry)
*5A76:	guard screen 2 => screen 3 (3 bytes/entry)
*5AAF:	guard screen 3 => screen 2 (there's a buggy/useless value in this table)
*address is a grid with a 8x8 resolution

 * guard move clocks:	 5A4
 * player move clocks 4E4

  * debug part 1A20

*  from MAME drover
* memory map:
*
* 0000-5fff ROM
* 6000-67ff RAM
* 9000-93ff Video RAM
* 9800-9bff Color RAM
* 9800-981f Sprites (hidden portion of color RAM)
* 9c00-9fff ? (filled with 3f, not used otherwise)
* c000-ffff ROM (Super Bagman only)
*
* memory mapped ports:
*
* read:
* a000      PAL16r6 output. (RD4 line)
* a800      ? (read only in one place, not used) (RD5 line)
* b000      DSW (RD6 line)
* b800      watchdog reset (RD7 line)
*
* write:
* a000      interrupt enable
* a001      horizontal flip
* a002      vertical flip
* a003      video enable, not available on earlier hardware revision(s)
* a004      coin counter
* a007      ? /SCS line in the schems connected to AY8910 pin A4 or AA (schems are unreadable)
*
* a800-a805 these lines control the state machine driving TMS5110 (only bit 0 matters)
*           a800,a801,a802 - speech roms BIT select (000 bit 7, 001 bit 4, 010 bit 2)
*           a803 - 0 keeps the state machine in reset state; 1 starts speech
*           a804 - connected to speech rom 11 (QS) chip enable
*           a805 - connected to speech rom 12 (QT) chip enable
* b000      ?
* b800      ?

    .global bagman_irq
    .global bagman_reset

	*.include	"bagman.inc"
	.ifdef	__amiga__
	.include "bagman_ram.68k"
	.align	2
	.endif


	.macro CLEAR_XC_FLAG
	moveq	#0,d7
	roxl.b	#1,d7
	.endm
	.macro SET_XC_FLAG
	st	d7
	roxl.b	#1,d7
	.endm

* < D6: ROM offset
read_rom:
	.ifndef		RELEASE
	cmp.w	#0x6000,d6
	bcc.b	rr_error
	.endif
	
	* .w is okay as D6 can't go over 7FFF
	lea		game_mem,a0
	move.b	(a0,d6.w),d0
	
	rts
	
rr_error:
	jbsr	assert_failed_blitz
	illegal
	
* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpir:
    subq.w    #1,d1
0:
    cmp.b    (a0)+,d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

* < all registers d1-d4/a0-a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 72
exx:
    lea     regscopy+36,a6
    * save current regs in region 1
    movem.l d1-d4/a0-a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+36,a6
    movem.l (a6),d1-d4/a0-a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0-a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0-a4
    movem.l d1-d4/a0-a4,(a6)
    movem.l (a7)+,d1-d4/a0-a4
    rts

* < A0: source (HL)
* < D1: length to search
* > D0.B value searched for (A)
* > Z flag if found
cpdr:
    subq.w    #1,d1
0:
    subq.w  #1,a0
    cmp.b    (1,a0),d0
    beq.b    1f
    dbf        d1,0b
    clr.w    d1
    * not found: unset Z
    cmp.b   #1,d1
1:
    rts

*---------------

assert_failed_blitz:
	jbra		osd_break
	
bagman_irq:
	
	
bagman_reset:
	* default: 1 update/irq call
	* we need 60 updates / second so on amiga PAL
	* we need to set this variable to 2 once out of 5 calls
	move.b	#1,vb_ticks_count

	jra	l_1200                             	| [$0000: jp   $1200]


game_tick_0038:
	move.w	d0,-(sp)                        	| [$0038: push af]
	movem.w	d1/d2,-(sp)                    	| [$0039: push bc]
	movem.w	d3/d4,-(sp)                    	| [$003a: push de]
	move.l	a1,-(sp)                        	| [$003a: push de]
	move.l	a0,-(sp)                        	| [$003b: push hl]
	move.l	a2,-(sp)                        	| [$003c: push ix]
	move.l	a3,-(sp)                        	| [$003e: push iy]
	jbsr	exx                               	| [$0040: exx]
	movem.w	d1/d2,-(sp)                    	| [$0041: push bc]
	movem.w	d3/d4,-(sp)                    	| [$0042: push de]
	move.l	a1,-(sp)                        	| [$0042: push de]
	move.l	a0,-(sp)                        	| [$0043: push hl]
	exg	d0,d7                              	| [$0044: ex   af,af']
	move.w	d0,-(sp)                        	| [$0045: push af]
	
	jbsr	l_3c47                            	| [$0046: call $3C47]
										| [$0049: xor  a]
    jbsr	osd_disable_vblank_interrupt  	| [$004a: ld   (interrupt_control_A000),a]

	jbsr	l_3123                            	| [$004e: call $3123]
	jbsr	l_38fa                            	| [$0051: call $38FA]
	move.b	unknown_6142,d0                 	| [$0054: ld   a,(unknown_6142)]
	addq.b	#1,d0                           	| [$0057: inc  a]
l_0058:
	move.b	d0,unknown_6142                 	| [$0058: ld   (unknown_6142),a]
	move.b	is_intermission_6274,d0         	| [$005b: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$005e: cp   $01]
	jeq	l_0067                             	| [$0060: jr   z,$0067]
	move.b	unknown_61ED,d0                 	| [$0062: ld   a,(unknown_61ED)]
	                         	| [$0065: cp   $00]
l_0067:
	*bne.b	0f
	* AY-8192 handling
	*jbsr	l_0f7f                            	| [$0067: call z,$0F7F]
*0:
	move.b	unknown_626F,d0                 	| [$006a: ld   a,(unknown_626F)]
	cmp.b	#0x01,d0                         	| [$006d: cp   $01]
	jeq	l_0394                             	| [$006f: jp   z,$0394]
	move.b	unknown_6210,d0                 	| [$0072: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$0075: cp   $01]
	jne	l_009b                             	| [$0077: jr   nz,$009B]
	move.b	gameplay_allowed_6054,d0        	| [$0079: ld   a,(gameplay_allowed_6054)]
	                         	| [$007c: cp   $00]
	jeq	l_009b                             	| [$007e: jr   z,$009B]
	move.b	unknown_61F2,d0                 	| [$0080: ld   a,(unknown_61F2)]
	cmp.b	#0x01,d0                         	| [$0083: cp   $01]
	jeq	l_009b                             	| [$0085: jr   z,$009B]
	move.b	unknown_61ED,d0                 	| [$0087: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$008a: cp   $01]
	jeq	l_009b                             	| [$008c: jr   z,$009B]
	move.b	player_x_6582,d0                	| [$008e: ld   a,(player_x_6582)]
	cmp.b	#0xE9,d0                         	| [$0091: cp   $E9]
	jcc	l_0394                             	| [$0093: jp   nc,$0394]
	cmp.b	#0x0F,d0                         	| [$0096: cp   $0F]
	jcs	l_0394                             	| [$0098: jp   c,$0394]
l_009b:
										| [$009b: ld   a,(watchdog_reset_B800)] watchdog
	move.w	#0x9800,d6                      	| [$009e: ld   de,$9800]
	lea	unknown_65A0,a0                	| [$00a1: ld   hl,unknown_65A0]
	move.w	#0x1F,d1                        	| [$00a4: ld   bc,$0020] 32
0:
	move.b	(a0)+,d0                              	| [$00a7: ldir]
	jbsr	osd_w_colorram
	dbf		D1,0b
	jbsr	l_34a4                            	| [$00a9: call $34A4]
	jbsr	l_353e                            	| [$00ac: call $353E]
	addq.b	#1,unknown_6143                 	| [$00af: ld   a,(unknown_6143)]
												| [$00b2: inc  a]
												| [$00b3: ld   (unknown_6143),a]
	* speed management disabled                        	| [$00b6: call $10D1]
	addq.b	#1,unknown_626D                 	| [$00b9: ld   a,(unknown_626D)]
												| [$00bc: inc  a]
												| [$00bd: ld   (unknown_626D),a]
	lea	previous_guard_1_struct_65B8,a3	| [$00c0: ld   iy,previous_guard_1_struct_65B8]

	move.b	player_screen_600D,d1           	| [$00c4: ld   a,(player_screen_600D)]
												| [$00c7: ld   b,a]
	move.b	guard_1_screen_6099,d0          	| [$00c8: ld   a,(guard_1_screen_6099)]
	cmp.b	d1,d0                            	| [$00cb: cp   b]
	jeq	l_00d3                             	| [$00cc: jr   z,$00D3]  same screen:	 skip

 * not the same screen between player and guard 1
	jbsr	set_previous_guard_y_255_10CB     	| [$00ce: call set_previous_guard_y_255_10CB]
	jra	l_00de                             	| [$00d1: jr   $00DE]
 * same screen guard 1 / player
l_00d3:
	lea	guard_1_struct_6594,a2         	| [$00d3: ld   ix,guard_1_struct_6594]
	lea	previous_guard_1_struct_65B8,a3	| [$00d7: ld   iy,previous_guard_1_struct_65B8]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$00db: call copy_4_bytes_ix_iy_1001]

l_00de:
	lea	previous_guard_2_struct_65BC,a3	| [$00de: ld   iy,previous_guard_2_struct_65BC]
	move.b	player_screen_600D,d0           	| [$00e2: ld   a,(player_screen_600D)]
	move.b	d0,d1                           	| [$00e5: ld   b,a]
	move.b	guard_2_screen_609A,d0          	| [$00e6: ld   a,(guard_2_screen_609A)]
	cmp.b	d1,d0                            	| [$00e9: cp   b]
	jeq	l_00f1                             	| [$00ea: jr   z,$00F1]  same screen:	 skip

	jbsr	set_previous_guard_y_255_10CB     	| [$00ec: call set_previous_guard_y_255_10CB]
	jra	l_00fc                             	| [$00ef: jr   $00FC]
 * same screen guard 2 / player
l_00f1:
	lea	guard_2_struct_6598,a2         	| [$00f1: ld   ix,guard_2_struct_6598]
	lea	previous_guard_2_struct_65BC,a3	| [$00f5: ld   iy,previous_guard_2_struct_65BC]
	jbsr	copy_4_bytes_ix_iy_1001           	| [$00f9: call copy_4_bytes_ix_iy_1001]

l_00fc:
	move.b	unknown_6053,d0                 	| [$00fc: ld   a,(unknown_6053)]
	cmp.b	#0x01,d0                         	| [$00ff: cp   $01]
	jeq	l_0380                             	| [$0101: jp   z,$0380]
	jbsr	l_0472                            	| [$0104: call $0472]
	move.b	unknown_6151,d0                 	| [$0107: ld   a,(unknown_6151)]
	cmp.b	#0x01,d0                         	| [$010a: cp   $01]
	jeq	l_0380                             	| [$010c: jp   z,$0380]
	jbsr	l_5c9a                            	| [$010f: call $5C9A]
	           	| [$0112: ld   a,(watchdog_reset_B800)]
	jbsr	l_03f4                            	| [$0115: call $03F4]
	jbsr	l_2c96                            	| [$0118: call $2C96]
	jbsr	l_344e                            	| [$011b: call $344E]
	jbsr	l_3cd4                            	| [$011e: call $3CD4]
	           	| [$0121: ld   a,(watchdog_reset_B800)]
	move.b	unknown_6271,d0                 	| [$0124: ld   a,(unknown_6271)]
	move.b	d0,unknown_6272                 	| [$0127: ld   (unknown_6272),a]
	* probably protection, check copyright just in case someones tampers
	* with the "VALADON" bit
	move.b	#0x41,d0                       	| [$012a: ld   a,($570C)] ALADON AUTOMATION !!!!
	move.b	d0,unknown_6271                 	| [$012d: ld   (unknown_6271),a]
	jbsr	l_07fb                            	| [$0130: call $07FB]
	move.b	unknown_602C,d0                 	| [$0133: ld   a,(unknown_602C)]
	cmp.b	#0x01,d0                         	| [$0136: cp   $01]
	jeq	l_0140                             	| [$0138: jr   z,$0140]
	jbsr	player_grip_handle_test_0784      	| [$013a: call player_grip_handle_test_0784]
	           	| [$013d: ld   a,(watchdog_reset_B800)]
l_0140:
	jbsr	l_07d5                            	| [$0140: call $07D5]
	clr.b	d0                               	| [$0143: xor  a]
	move.b	d0,unknown_602C                 	| [$0144: ld   (unknown_602C),a]
	lea	unknown_6156,a3                	| [$0147: ld   iy,unknown_6156]
	lea	guard_1_struct_6594,a2         	| [$014b: ld   ix,guard_1_struct_6594]
	lea	unknown_6148,a1                	| [$014f: ld   de,unknown_6148]
	jbsr	l_0403                            	| [$0152: call $0403]
	lea	unknown_6157,a3                	| [$0155: ld   iy,unknown_6157]
	lea	guard_2_struct_6598,a2         	| [$0159: ld   ix,guard_2_struct_6598]
	lea	unknown_6149,a1                	| [$015d: ld   de,unknown_6149]
	jbsr	l_0403                            	| [$0160: call $0403]
	move.w	guard_1_screen_address_6038,a0	| [$0163: ld   hl,(guard_1_screen_address_6038)]
	lea	unknown_61EB,a2                	| [$0166: ld   ix,unknown_61EB]
	lea	unknown_603A,a3                	| [$016a: ld   iy,unknown_603A]
	move.b	(0x00,a2),d0                    	| [$016e: ld   a,(ix+$00)]
	and.b	(0x01,a2),d0                     	| [$0171: and  (ix+$01)]
	exg	d0,d7                              	| [$0174: ex   af,af']
	lea	guard_1_y_6597,a1              	| [$0175: ld   de,guard_1_y_6597]
	move.b	guard_1_screen_6099,d0          	| [$0178: ld   a,(guard_1_screen_6099)]
	move.b	d0,d1                           	| [$017b: ld   b,a]
	move.b	unknown_61EB,d0                 	| [$017c: ld   a,(unknown_61EB)]
	                         	| [$017f: cp   $00]
	beq.b	0f
	jbsr	l_350e                            	| [$0181: call nz,$350E]
0:
	move.w	guard_2_screen_address_6078,d6	| [$0184: ld   hl,(guard_2_screen_address_6078)]
	lea	unknown_61EC,a2                	| [$0187: ld   ix,unknown_61EC]
	lea	unknown_607A,a3                	| [$018b: ld   iy,unknown_607A]
	lea	guard_2_y_659B,a1              	| [$018f: ld   de,guard_2_y_659B]
	clr.b	d0                               	| [$0192: ld   a,$00]
	exg	d0,d7                              	| [$0194: ex   af,af']
	move.b	guard_2_screen_609A,d0          	| [$0195: ld   a,(guard_2_screen_609A)]
	move.b	d0,d1                           	| [$0198: ld   b,a]
	move.b	unknown_61EC,d0                 	| [$0199: ld   a,(unknown_61EC)]
												| [$019c: cp   $00]
	beq.b	0f
	jbsr	l_350e                            	| [$019e: call nz,$350E]
0:
	jbsr	l_03b1                            	| [$01a1: call $03B1]
	           	| [$01a4: ld   a,(watchdog_reset_B800)]
	move.b	unknown_61ED,d0                 	| [$01a7: ld   a,(unknown_61ED)]
	                         	| [$01aa: cp   $00]
	bne.b	0f
	jbsr	l_1683                            	| [$01ac: call z,$1683]
0:
	jbsr	l_109d                            	| [$01af: call $109D]
	           	| [$01b2: ld   a,(watchdog_reset_B800)]
	jbsr	wagon_player_collision_1D84       	| [$01b5: call wagon_player_collision_1D84]
	jbsr	l_0684                            	| [$01b8: call $0684]
	jbsr	l_31f4                            	| [$01bb: call $31F4]
	jbsr	l_06d5                            	| [$01be: call $06D5]
	           	| [$01c1: ld   a,(watchdog_reset_B800)]
	jbsr	compute_wagon_start_values_08b0                            	| [$01c4: call $08B0]
	jbsr	l_0830                            	| [$01c7: call $0830]
	           	| [$01ca: ld   a,(watchdog_reset_B800)]
	jbsr	l_10ff                            	| [$01cd: call $10FF]
	move.b	unknown_61ED,d0                 	| [$01d0: ld   a,(unknown_61ED)]
	                         	| [$01d3: cp   $00]
	bne.b	0f
	jbsr	l_08f4                            	| [$01d5: call z,$08F4]
0:
	           	| [$01d8: ld   a,(watchdog_reset_B800)]
	jbsr	handle_pick_hold_timer_113c                            	| [$01db: call $113C]
	move.b	player_y_6583,d0                	| [$01de: ld   a,(player_y_6583)]
	move.w	d0,-(sp)                        	| [$01e1: push af]
	subq.b	#1,d0                           	| [$01e2: dec  a]
	move.b	d0,player_y_6583                	| [$01e3: ld   (player_y_6583),a]
	jbsr	update_player_screen_address_from_xy_555E	| [$01e6: call update_player_screen_address_from_xy_555E]
	move.w	(sp)+,d0                        	| [$01e9: pop  af]
	move.b	d0,player_y_6583                	| [$01ea: ld   (player_y_6583),a]
	move.b	holds_barrow_61C7,d0                 	| [$01ed: ld   a,(holds_barrow_61C7)]
												| [$01f0: cp   $00]
	bne.b	0f
	jbsr	l_0dc7                            	| [$01f2: call z,$0DC7]
0:
	move.b	fatal_fall_height_reached_604E,d0	| [$01f5: ld   a,(fatal_fall_height_reached_604E)]
	                         	| [$01f8: cp   $00]
	jne	l_021e                             	| [$01fa: jr   nz,$021E]
	jbsr	update_player_screen_address_from_xy_555E	| [$01fc: call update_player_screen_address_from_xy_555E]
	jbsr	l_3d65                            	| [$01ff: call $3D65]
	move.b	unknown_6014,d0                 	| [$0202: ld   a,(unknown_6014)]
	cmp.b	#0x01,d0                         	| [$0205: cp   $01]
	jne	l_0210                             	| [$0207: jr   nz,$0210]
	move.b	elevator_not_moving_6012,d0     	| [$0209: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$020c: cp   $01]
	jne	l_021e                             	| [$020e: jr   nz,$021E]
l_0210:
	lea	unknown_6047,a3                	| [$0210: ld   iy,unknown_6047]
	lea	player_struct_6580,a2          	| [$0214: ld   ix,player_struct_6580]
	jbsr	player_movement_0B6D              	| [$0218: call player_movement_0B6D]
	           	| [$021b: ld   a,(watchdog_reset_B800)]
l_021e:
	jbsr	l_1010                            	| [$021e: call $1010]
	jbsr	l_104b                            	| [$0221: call $104B]
	move.b	#0x01,d0                        	| [$0224: ld   a,$01]
	move.b	d0,unknown_628A                 	| [$0226: ld   (unknown_628A),a]
	move.b	player_screen_600D,d0           	| [$0229: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$022c: ld   (screen_index_param_6098),a]
	lea	unknown_6014,a0                	| [$022f: ld   hl,unknown_6014]
	lea	player_struct_6580,a2          	| [$0232: ld   ix,player_struct_6580]
	jbsr	l_0a27                            	| [$0236: call $0A27]
	           	| [$0239: ld   a,(watchdog_reset_B800)]
	move.b	unknown_61F2,d0                 	| [$023c: ld   a,(unknown_61F2)]
	                         	| [$023f: cp   $00]
	jne	l_0263                             	| [$0241: jr   nz,$0263]
	move.b	player_screen_600D,d0           	| [$0243: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$0246: ld   (screen_index_param_6098),a]
	lea	unknown_6008,a0                	| [$0249: ld   hl,unknown_6008]
	lea	fall_height_604D,a3            	| [$024c: ld   iy,fall_height_604D]
	lea	player_struct_6580,a2          	| [$0250: ld   ix,player_struct_6580]
	move.b	unknown_6014,d0                 	| [$0254: ld   a,(unknown_6014)]
	move.b	d0,d2                           	| [$0257: ld   c,a]
	move.b	unknown_6013,d0                 	| [$0258: ld   a,(unknown_6013)]
	move.b	#0x19,d1                        	| [$025b: ld   b,$19]
	jbsr	l_0b2e                            	| [$025d: call $0B2E]
	           	| [$0260: ld   a,(watchdog_reset_B800)]
l_0263:
	move.b	player_screen_600D,d0           	| [$0263: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$0266: ld   (screen_index_param_6098),a]
	lea	player_struct_6580,a2          	| [$0269: ld   ix,player_struct_6580]
	lea	unknown_6014,a3                	| [$026d: ld   iy,unknown_6014]
	jbsr	l_0a66                            	| [$0271: call $0A66]
	lea	player_struct_6580,a2          	| [$0274: ld   ix,player_struct_6580]
	lea	unknown_6014,a0                	| [$0278: ld   hl,unknown_6014]
	jbsr	l_09a0                            	| [$027b: call $09A0]
	move.b	unknown_6156,d0                 	| [$027e: ld   a,(unknown_6156)]
	                         	| [$0281: cp   $00]
	jne	l_02ba                             	| [$0283: jr   nz,$02BA]
	move.b	unknown_6211,d0                 	| [$0285: ld   a,(unknown_6211)]
	                         	| [$0288: cp   $00]
	jne	l_029d                             	| [$028a: jr   nz,$029D]
	move.b	guard_1_in_elevator_603B,d0     	| [$028c: ld   a,(guard_1_in_elevator_603B)]
	cmp.b	#0x01,d0                         	| [$028f: cp   $01]
	jne	l_029a                             	| [$0291: jr   nz,$029A]
	move.b	elevator_not_moving_6012,d0     	| [$0293: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$0296: cp   $01]
	jne	l_029d                             	| [$0298: jr   nz,$029D]
 * routine actually moving the guards
*  theres some other routine monitoring the guard movements
*  if they don't move, then reset them to the center up of the neighbor screen
*  did not locate this routine yet but this is not really important

l_029a:
	jbsr	guard_1_movement_116F             	| [$029a: call guard_1_movement_116F]
l_029d:
	lea		unknown_6057,a3    		           	| [$029d: ld   iy,unknown_6057]
	move.l	a3,unknown_pointer_6093                 	| [$02a1: ld   (unknown_pointer_6093),iy]
	move.w	guard_1_screen_address_6038,stored_screen_address_6044	| [$02a5: ld   hl,(guard_1_screen_address_6038)]
	              	| [$02a8: ld   (stored_screen_address_6044),hl]
	lea	guard_1_ladder_frame_6035,a0   	| [$02ab: ld   hl,guard_1_ladder_frame_6035]
	lea	guard_2_direction_6027,a3      	| [$02ae: ld   iy,guard_2_direction_6027]
	move.b	unknown_6037,d0                 	| [$02b2: ld   a,(unknown_6037)]
	cmp.b	#0x01,d0                         	| [$02b5: cp   $01]
	beq.b	0f
	jbsr	guard_ladder_movement_04AD        	| [$02b7: call nz,guard_ladder_movement_04AD]
0:
l_02ba:
	move.b	unknown_6157,d0                 	| [$02ba: ld   a,(unknown_6157)]
	                         	| [$02bd: cp   $00]
	jne	l_02fc                             	| [$02bf: jr   nz,$02FC]
	move.b	unknown_6212,d0                 	| [$02c1: ld   a,(unknown_6212)]
	                         	| [$02c4: cp   $00]
	jne	l_02d9                             	| [$02c6: jr   nz,$02D9]
	move.b	guard_2_in_elevator_607B,d0     	| [$02c8: ld   a,(guard_2_in_elevator_607B)]
	cmp.b	#0x01,d0                         	| [$02cb: cp   $01]
	jne	l_02d6                             	| [$02cd: jr   nz,$02D6]
	move.b	elevator_not_moving_6012,d0     	| [$02cf: ld   a,(elevator_not_moving_6012)]
	cmp.b	#0x01,d0                         	| [$02d2: cp   $01]
	jne	l_02d9                             	| [$02d4: jr   nz,$02D9]
l_02d6:
	jbsr	guard_2_movement_119B             	| [$02d6: call guard_2_movement_119B]
l_02d9:
	move.w	guard_2_screen_address_6078,stored_screen_address_6044	| [$02d9: ld   hl,(guard_2_screen_address_6078)]
	                 	| [$02dc: ld   (stored_screen_address_6044),hl]
	lea	unknown_6097,a3                	| [$02df: ld   iy,unknown_6097]
	move.l	a3,unknown_pointer_6093                 	| [$02e3: ld   (unknown_pointer_6093),iy]
	move.w	guard_2_screen_address_6078,stored_screen_address_6044	| [$02e7: ld   hl,(guard_2_screen_address_6078)]
	                 	| [$02ea: ld   (stored_screen_address_6044),hl]
	lea	guard_2_ladder_frame_6075,a0   	| [$02ed: ld   hl,guard_2_ladder_frame_6075]
	lea	guard_1_direction_6067,a3      	| [$02f0: ld   iy,guard_1_direction_6067]
	move.b	unknown_6077,d0                 	| [$02f4: ld   a,(unknown_6077)]
	cmp.b	#0x01,d0                         	| [$02f7: cp   $01]
	beq.b	0f
	jbsr	guard_ladder_movement_04AD        	| [$02f9: call nz,guard_ladder_movement_04AD]
0:
l_02fc:
	move.b	guard_2_screen_609A,d0          	| [$02fc: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$02ff: ld   (screen_index_param_6098),a]
	lea	guard_2_in_elevator_607B,a0    	| [$0302: ld   hl,guard_2_in_elevator_607B]
	lea	guard_2_struct_6598,a2         	| [$0305: ld   ix,guard_2_struct_6598]
	jbsr	l_0a27                            	| [$0309: call $0A27]
	           	| [$030c: ld   a,(watchdog_reset_B800)]
	move.b	unknown_6097,d0                 	| [$030f: ld   a,(unknown_6097)]
	addq.b	#1,d0                           	| [$0312: inc  a]
	move.b	d0,unknown_6097                 	| [$0313: ld   (unknown_6097),a]
	lea	unknown_608F,a3                	| [$0316: ld   iy,unknown_608F]
	lea	unknown_6077,a0                	| [$031a: ld   hl,unknown_6077]
	lea	guard_2_struct_6598,a2         	| [$031d: ld   ix,guard_2_struct_6598]
	move.b	unknown_61EC,d0                 	| [$0321: ld   a,(unknown_61EC)]
	cmp.b	#0x01,d0                         	| [$0324: cp   $01]
	jeq	l_033a                             	| [$0326: jr   z,$033A]
	move.b	guard_2_screen_609A,d0          	| [$0328: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$032b: ld   (screen_index_param_6098),a]
	move.b	guard_2_in_elevator_607B,d0     	| [$032e: ld   a,(guard_2_in_elevator_607B)]
	move.b	d0,d2                           	| [$0331: ld   c,a]
	move.b	unknown_607A,d0                 	| [$0332: ld   a,(unknown_607A)]
	move.b	#0x26,d1                        	| [$0335: ld   b,$26]
	jbsr	l_0b2e                            	| [$0337: call $0B2E]
l_033a:
	move.b	guard_1_screen_6099,d0          	| [$033a: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$033d: ld   (screen_index_param_6098),a]
	lea	guard_1_in_elevator_603B,a0    	| [$0340: ld   hl,guard_1_in_elevator_603B]
	lea	guard_1_struct_6594,a2         	| [$0343: ld   ix,guard_1_struct_6594]
	jbsr	l_0a27                            	| [$0347: call $0A27]
	move.b	unknown_6057,d0                 	| [$034a: ld   a,(unknown_6057)]
	addq.b	#1,d0                           	| [$034d: inc  a]
	move.b	d0,unknown_6057                 	| [$034e: ld   (unknown_6057),a]
	lea	unknown_604F,a3                	| [$0351: ld   iy,unknown_604F]
	lea	unknown_6037,a0                	| [$0355: ld   hl,unknown_6037]
	lea	guard_1_struct_6594,a2         	| [$0358: ld   ix,guard_1_struct_6594]
	move.b	unknown_61EB,d0                 	| [$035c: ld   a,(unknown_61EB)]
	cmp.b	#0x01,d0                         	| [$035f: cp   $01]
	jeq	l_0375                             	| [$0361: jr   z,$0375]
	move.b	guard_1_screen_6099,d0          	| [$0363: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$0366: ld   (screen_index_param_6098),a]
	move.b	guard_1_in_elevator_603B,d0     	| [$0369: ld   a,(guard_1_in_elevator_603B)]
	move.b	d0,d2                           	| [$036c: ld   c,a]
	move.b	unknown_603A,d0                 	| [$036d: ld   a,(unknown_603A)]
	move.b	#0x26,d1                        	| [$0370: ld   b,$26]
	jbsr	l_0b2e                            	| [$0372: call $0B2E]
l_0375:
	move.b	#0x01,d0                        	| [$0375: ld   a,$01]
	move.b	d0,unknown_627F                 	| [$0377: ld   (unknown_627F),a]
	jbsr	l_18c7                            	| [$037a: call $18C7]
	           	| [$037d: ld   a,(watchdog_reset_B800)]
l_0380:
	jbsr	l_3df9                            	| [$0380: call $3DF9]
	move.b	unknown_61F1,d0                 	| [$0383: ld   a,(unknown_61F1)]
	                         	| [$0386: cp   $00]
	bne.b	0f
	jbsr	l_0ebc                            	| [$0388: call z,$0EBC]
0:
	jbsr	l_39be                            	| [$038b: call $39BE]
	jbsr	l_560f                            	| [$038e: call $560F]
	jbsr	l_39fd                            	| [$0391: call $39FD]
l_0394:
	jbsr	l_3c66                            	| [$0394: call $3C66]
	           	| [$0397: ld   a,(watchdog_reset_B800)]
												| [$039a: ld   a,$01]
												| [$039c: ld   (timer_random_shit_A000),a]

	move.w	(sp)+,d0                        	| [$03a1: pop  af]
	exg	d0,d7                              	| [$03a2: ex   af,af']
	move.l	(sp)+,a0                        	| [$03a3: pop  hl]
	move.l	(sp)+,a1                        	| [$03a4: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$03a4: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$03a5: pop  bc]
	jbsr	exx                               	| [$03a6: exx]
	move.l	(sp)+,a3                        	| [$03a7: pop  iy]
	move.l	(sp)+,a2                        	| [$03a9: pop  ix]
	move.l	(sp)+,a0                        	| [$03ab: pop  hl]
	move.l	(sp)+,a1                        	| [$03ac: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$03ac: pop  de]

	movem.w	(sp)+,d1/d2                    	| [$03ad: pop  bc]
	move.w	(sp)+,d0                        	| [$03ae: pop  af]

	jbsr		osd_enable_vblank_interrupt		| [im 1]
	rts                                    	| [$03b0: ret]

l_0403:
	move.b	(a3),d0                    	| [$0403: ld   a,(iy+$00)]
	                        	| [$0406: cp   $00]
	bne.b	0f
	rts                                    	| [$0408: ret  z]
0:
	lea		game_mem,a0
	add.w	unknown_6154,a0             	| [$0409: ld   hl,(unknown_6154)]
	move.b	unknown_6153,d0                 	| [$040c: ld   a,(unknown_6153)]
	cmp.b	#0x07,d0                         	| [$040f: cp   $07]
	jne	l_0424                             	| [$0411: jr   nz,$0424]
	* reads a table starting at $437 in ROM
	move.b	(a0),d0                         	| [$0413: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0414: cp   $FF]
	jeq	l_042c                             	| [$0416: jr   z,$042C]
	move.b	d0,(0x00,a2)                    	| [$0418: ld   (ix+$00),a]
											| [$041b: inc  hl]
	sub.l	#game_mem-1,a0
	move.w	a0,unknown_6154                 	| [$041c: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$041f: xor  a]
	move.b	d0,unknown_6153                 	| [$0420: ld   (unknown_6153),a]
	rts                                    	| [$0423: ret]
l_0424:
	move.b	unknown_6153,d0                 	| [$0424: ld   a,(unknown_6153)]
	addq.b	#1,d0                           	| [$0427: inc  a]
	move.b	d0,unknown_6153                 	| [$0428: ld   (unknown_6153),a]
	rts                                    	| [$042b: ret]
l_042c:
	move.b	#0x31,d0                        	| [$042c: ld   a,$31]
	move.b	d0,(0x00,a2)                    	| [$042e: ld   (ix+$00),a]
	clr.b	d0                               	| [$0431: xor  a]
	move.b	d0,(0x00,a3)                    	| [$0432: ld   (iy+$00),a]
	move.b	d0,(a1)                         	| [$0435: ld   (de),a]
	rts                                    	| [$0436: ret]

 * in ix guard structure
 * structure is as follows: (same struct for player)
 * offset 0:	sprite frame gfx index (ex: 27/A7:	climbing)
 * offset 1:	?
 * offset 2:	x
 * offset 3:	y

guard_ladder_movement_04AD:
	move.b	(0x00,a3),d0                    	| [$04ad: ld   a,(iy+$00)]
	and.b	#0x10,d0                         	| [$04b0: and  $10]
	cmp.b	#0x10,d0                         	| [$04b2: cp   $10]
	jeq	l_04cb                             	| [$04b4: jr   z,$04CB]
	move.b	(0x00,a3),d0                    	| [$04b6: ld   a,(iy+$00)]
	and.b	#0x20,d0                         	| [$04b9: and  $20]
	cmp.b	#0x20,d0                         	| [$04bb: cp   $20]
	beq.b	0f
	rts                                    	| [$04bd: ret  nz]
0:
 * down

	move.l	a0,-(sp)                        	| [$04be: push hl]
	move.w	unknown_6044(pc),a0             	| [$04bf: ld   hl,(unknown_6044)]
	move.b	(a0),d0                         	| [$04c2: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$04c3: cp   $FF]
	move.l	(sp)+,a0                        	| [$04c5: pop  hl]
	beq.b	0f
	rts                                    	| [$04c6: ret  nz]
0:
	clr.b	d1                               	| [$04c7: ld   b,$00]
	jra	l_04d7                             	| [$04c9: jr   $04D7]
 * up
l_04cb:

	move.l	a0,-(sp)                        	| [$04cb: push hl]
	move.w	unknown_6044(pc),a0             	| [$04cc: ld   hl,(unknown_6044)]
	subq.b	#1,a0                           	| [$04cf: dec  hl]
	move.b	(a0),d0                         	| [$04d0: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$04d1: cp   $FF]
	move.l	(sp)+,a0                        	| [$04d3: pop  hl]
	beq.b	0f
	rts                                    	| [$04d4: ret  nz]
0:
	move.b	#0x80,d1                        	| [$04d5: ld   b,$80]
l_04d7:
	move.b	(a0),d0                         	| [$04d7: ld   a,(hl)]
	cmp.b	#0x0B,d0                         	| [$04d8: cp   $0B]
	jne	l_04e1                             	| [$04da: jr   nz,$04E1]
	move.b	#0x01,d0                        	| [$04dc: ld   a,$01]
	move.b	d0,(a0)                         	| [$04de: ld   (hl),a]
	jra	l_04e3                             	| [$04df: jr   $04E3]
l_04e1:
	addq.b	#1,d0                           	| [$04e1: inc  a]
	move.b	d0,(a0)                         	| [$04e2: ld   (hl),a]
l_04e3:
	move.b	(a0),d0                         	| [$04e3: ld   a,(hl)]

 * move timer. 01 -> 0B for the guard climbing up/down
 * note: difficulty/score does not affect up/down moves
	cmp.b	#0x01,d0                         	| [$04e4: cp   $01]
	bne.b	0f
	rts                                    	| [$04e6: ret  z]
0:
	cmp.b	#0x03,d0                         	| [$04e7: cp   $03]
	bne.b	0f
	rts                                    	| [$04e9: ret  z]
0:
	cmp.b	#0x05,d0                         	| [$04ea: cp   $05]
	bne.b	0f
	rts                                    	| [$04ec: ret  z]
0:
	cmp.b	#0x08,d0                         	| [$04ed: cp   $08]
	bne.b	0f
	rts                                    	| [$04ef: ret  z]
0:
	cmp.b	#0x0A,d0                         	| [$04f0: cp   $0A]
	bne.b	0f
	jbsr	l_0523                            	| [$04f2: call z,$0523]
0:
	cmp.b	#0x02,d0                         	| [$04f5: cp   $02]
	bne.b	0f
	jbsr	l_0523                            	| [$04f7: call z,$0523]
0:
	cmp.b	#0x04,d0                         	| [$04fa: cp   $04]
	bne.b	0f
	jbsr	l_0523                            	| [$04fc: call z,$0523]
0:
	cmp.b	#0x07,d0                         	| [$04ff: cp   $07]
	bne.b	0f
	jbsr	l_0523                            	| [$0501: call z,$0523]
0:
	cmp.b	#0x09,d0                         	| [$0504: cp   $09]
	bne.b	0f
	jbsr	l_0523                            	| [$0506: call z,$0523]
0:
	cmp.b	#0x06,d0                         	| [$0509: cp   $06]
	jne	l_0516                             	| [$050b: jr   nz,$0516]
	move.b	#0x27,d0                        	| [$050d: ld   a,$27]
	move.b	d0,(0x00,a2)                    	| [$050f: ld   (ix+$00),a]  change sprite frame
	jbsr	l_0523                            	| [$0512: call $0523]
	rts                                    	| [$0515: ret]
l_0516:
	cmp.b	#0x0B,d0                         	| [$0516: cp   $0B]
	jne	l_0522                             	| [$0518: jr   nz,$0522]
	move.b	#0xA7,d0                        	| [$051a: ld   a,$A7]
	move.b	d0,(0x00,a2)                    	| [$051c: ld   (ix+$00),a]  change sprite frame
	jbsr	l_0523                            	| [$051f: call $0523]
l_0522:
	rts                                    	| [$0522: ret]

l_0523:
	move.w	d0,-(sp)                        	| [$0523: push af]
	movem.w	d1/d2,-(sp)                    	| [$0524: push bc]
	move.b	unknown_61F5,d0                 	| [$0525: ld   a,(unknown_61F5)]
	                         	| [$0528: cp   $00]
	jne	l_0540                             	| [$052a: jr   nz,$0540]
	move.b	has_pick_61CF,d0                	| [$052c: ld   a,(has_pick_61CF)]
	                         	| [$052f: cp   $00]
	jne	l_0540                             	| [$0531: jr   nz,$0540]
	move.b	unknown_61F3,d0                 	| [$0533: ld   a,(unknown_61F3)]
	                         	| [$0536: cp   $00]
	jne	l_0540                             	| [$0538: jr   nz,$0540]
	lea	l_3F15(pc),a0                      	| [$053a: ld   hl,$3F15]
	jbsr	l_2018                            	| [$053d: call $2018]
l_0540:

	movem.w	(sp)+,d1/d2                    	| [$0540: pop  bc]
	move.w	(sp),d0                        	| [$0541: pop  af]
	                        	| [$0542: push af]
	move.b	d1,d0                           	| [$0543: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0544: cp   $80]
	jne	l_055c                             	| [$0546: jr   nz,$055C]
	move.b	(0x03,a2),d0                    	| [$0548: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$054b: dec  a]
	move.b	d0,(0x03,a2)                    	| [$054c: ld   (ix+$03),a]
	clr.b	d0                               	| [$054f: xor  a]
	move.w	unknown_pointer_6093(pc),a3     	| [$0550: ld   iy,(unknown_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0554: ld   (iy+$00),a]
	jbsr	l_0f72                            	| [$0557: call $0F72]
	move.w	(sp)+,d0                        	| [$055a: pop  af]
	rts                                    	| [$055b: ret]
l_055c:
	move.b	(0x03,a2),d0                    	| [$055c: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$055f: inc  a]
	move.b	d0,(0x03,a2)                    	| [$0560: ld   (ix+$03),a]
	clr.b	d0                               	| [$0563: xor  a]
	move.w	unknown_pointer_6093(pc),a3     	| [$0564: ld   iy,(unknown_pointer_6093)]
	move.b	d0,(0x00,a3)                    	| [$0568: ld   (iy+$00),a]
	jbsr	l_0f72                            	| [$056b: call $0F72]
	move.w	(sp)+,d0                        	| [$056e: pop  af]
	rts                                    	| [$056f: ret]


player_grip_handle_test_0784:
	jbsr	update_player_screen_address_from_xy_555E	| [$0784: call update_player_screen_address_from_xy_555E]
	move.w	player_screen_address_6009,d6	| [$0787: ld   hl,(player_screen_address_6009)]
	subq.b	#3,d6                           	| [$078a: dec  hl] * 3
	jbsr	osd_r_videoram                         	| [$078d: ld   a,(hl)] check what's above player head on screen
	cmp.b	#0xDC,d0                         	| [$078e: cp   $DC]
	jeq	l_0795                             	| [$0790: jr   z,$0795]
	cmp.b	#0x0B,d0                         	| [$0792: cp   $0B]
	beq.b	0f
	rts                                    	| [$0794: ret  nz]
0:
 * handle detected ($DC or $OB)
l_0795:
	move.b	player_gripping_handle_602A,d0  	| [$0795: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0798: cp   $01]
	bne.b	0f
	rts                                    	| [$079a: ret  z]
0:
	move.b	#0x01,d0                        	| [$079b: ld   a,$01]
	lea	unknown_601E,a0                	| [$079d: ld   hl,unknown_601E]
	move.b	#0x00,d1                        	| [$07a0: ld   bc,$0003] 3
	move.b	#0x03,d2                        	| [$07a0: ld   bc,$0003] 3
	jbsr	cpdr                              	| [$07a3: cpdr]
	bne.b	0f
	rts                                    	| [$07a5: ret  z]
0:
	move.b	player_input_6026,d0            	| [$07a6: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$07a9: and  $80]
	cmp.b	#0x80,d0                         	| [$07ab: cp   $80]
	beq.b	0f
	rts                                    	| [$07ad: ret  nz]
0:
 * "fire" pressed while below the handle
	move.b	gameplay_allowed_6054,d0        	| [$07ae: ld   a,(gameplay_allowed_6054)]
									| [$07b1: cp   $00]
	jeq	player_grips_handle_07BD           	| [$07b3: jr   z,player_grips_handle_07BD]
	move.b	player_move_direction_6050,d0   	| [$07b5: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$07b8: and  $80]
	cmp.b	#0x80,d0                         	| [$07ba: cp   $80]
	bne.b	0f
	rts                                    	| [$07bc: ret  z]
0:

	move.b	#0x01,d0                        	| [$07bd: ld   a,$01]
	move.b	d0,player_controls_frozen_6028  	| [$07bf: ld   (player_controls_frozen_6028),a]
	move.b	d0,player_gripping_handle_602A  	| [$07c2: ld   (player_gripping_handle_602A),a]
	subq.b	#1,d0                           	| [$07c5: dec  a]
	move.b	d0,unknown_602B                 	| [$07c6: ld   (unknown_602B),a]
	move.b	#0x01,d0                        	| [$07c9: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$07cb: ld   (unknown_6275),a]
	lea	game_mem+0x3EFD,a0                      	| [$07ce: ld   hl,$3EFD]
	jbsr	l_2018                            	| [$07d1: call $2018]
	rts                                    	| [$07d4: ret]
l_07d5:
	move.b	player_gripping_handle_602A,d0  	| [$07d5: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$07d8: cp   $01]
	beq.b	0f
	rts                                    	| [$07da: ret  nz]
0:
	lea	l_07F6(pc),a1                      	| [$07db: ld   de,$07F6]
	moveq	#0,d0
	move.b	unknown_602B,d0                 	| [$07de: ld   a,(unknown_602B)]
	cmp.b	#0x05,d0                         	| [$07e1: cp   $05]
	bne.b	0f
	rts                                    	| [$07e3: ret  z]
0:
												| [$07e4: add  a,e]
												| [$07e5: ld   e,a]
												| [$07e6: ld   a,d]
												| [adc 0,a]
												
												| [$07e9: ld   d,a]
	move.b	(a1,d0.w),d0                         	| [$07ea: ld   a,(de)]
	move.b	d0,player_struct_6580           	| [$07eb: ld   (player_struct_6580),a]
	move.b	unknown_602B,d0                 	| [$07ee: ld   a,(unknown_602B)]
	addq.b	#1,d0                           	| [$07f1: inc  a]
	move.b	d0,unknown_602B                 	| [$07f2: ld   (unknown_602B),a]
	rts                                    	| [$07f5: ret]
	
l_07F6:
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1C
	.byte	0x1B
	.align	2


l_07fb:
	move.b	player_gripping_handle_602A,d0  	| [$07fb: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$07fe: cp   $01]
	beq.b	0f
	rts                                    	| [$0800: ret  nz]
0:
	move.b	player_input_6026,d0            	| [$0801: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$0804: and  $80]
	cmp.b	#0x80,d0                         	| [$0806: cp   $80]
	beq.b	0f
	rts                                    	| [$0808: ret  nz]
0:
	move.b	gameplay_allowed_6054,d0        	| [$0809: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x00,d0                         	| [$080c: cp   $00]
	jeq	l_0818                             	| [$080e: jr   z,$0818]
	move.b	player_move_direction_6050,d0   	| [$0810: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$0813: and  $80]
	cmp.b	#0x80,d0                         	| [$0815: cp   $80]
	bne.b	0f
	rts                                    	| [$0817: ret  z]
0:
l_0818:
	clr.b	d0                               	| [$0818: xor  a]
	move.b	d0,player_gripping_handle_602A  	| [$0819: ld   (player_gripping_handle_602A),a]
	move.b	d0,player_controls_frozen_6028  	| [$081c: ld   (player_controls_frozen_6028),a]
	move.b	d0,player_in_wagon_flag_6029    	| [$081f: ld   (player_in_wagon_flag_6029),a]
	move.b	d0,unknown_602B                 	| [$0822: ld   (unknown_602B),a]
	move.b	#0x19,d0                        	| [$0825: ld   a,$19]
	move.b	d0,player_struct_6580           	| [$0827: ld   (player_struct_6580),a]
	move.b	#0x01,d0                        	| [$082a: ld   a,$01]
	move.b	d0,unknown_602C                 	| [$082c: ld   (unknown_602C),a]
	rts                                    	| [$082f: ret]
l_0830:
	move.b	player_gripping_handle_602A,d0  	| [$0830: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$0833: cp   $01]
	bne.b	0f
	rts                                    	| [$0835: ret  z]
0:
	move.b	player_death_flag_6025,d0       	| [$0836: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$0839: cp   $01]
	bne.b	0f
	rts                                    	| [$083b: ret  z]
0:
	move.b	player_y_6583,d0                	| [$083c: ld   a,(player_y_6583)]
	addq.b	#1,d0                           	| [$083f: inc  a]
	lea	wagon_data_658A,a2             	| [$0840: ld   ix,wagon_data_658A]
	lea	unknown_601C,a3                	| [$0844: ld   iy,unknown_601C]
	move.w	#0x0004,d3                      	| [$0848: ld   de,$0004] 4
	jbsr	l_085d                            	| [$084b: call $085D]
	add.w	d3,a2                            	| [$084e: add  ix,de]
	addq.w	#1,a3                           	| [$0850: inc  iy]
	jbsr	l_085d                            	| [$0852: call $085D]
	add.w	d3,a2                            	| [$0855: add  ix,de]
	addq.w	#1,a3                           	| [$0857: inc  iy]
	jbsr	l_085d                            	| [$0859: call $085D]
	rts                                    	| [$085c: ret]
l_085d:
	cmp.b	(0x01,a2),d0                     	| [$085d: cp   (ix+$01)]
	jne	l_08a9                             	| [$0860: jr   nz,$08A9]
	move.w	d0,-(sp)                        	| [$0862: push af]
	move.b	#0x08,d1                        	| [$0863: ld   b,$08]
	move.b	player_x_6582,d0                	| [$0865: ld   a,(player_x_6582)]
	subq.b	#0x05,d0                        	| [$0868: sub  $05]
l_086a:
	addq.b	#1,d0                           	| [$086a: inc  a]
	move.w	d0,-(sp)                        	| [$086b: push af]
	cmp.b	(0x00,a2),d0                     	| [$086c: cp   (ix+$00)]
	jeq	l_08a0                             	| [$086f: jr   z,$08A0]
	move.w	(sp)+,d0                        	| [$0871: pop  af]
	subq.b	#1,d1                           	| [...]
	jne	l_086a                             	| [$0872: djnz $086A]
	jra	l_08a3                             	| [$0874: jr   $08A3]
l_0876:
	move.b	(0x00,a3),d0                    	| [$0876: ld   a,(iy+$00)]
	cmp.b	#0x00,d0                         	| [$0879: cp   $00]
	jne	l_0894                             	| [$087b: jr   nz,$0894]

	move.l	a0,-(sp)                        	| [$087d: push hl]

	move.l	a2,-(sp)                        	| [$087e: push ix]
	lea	l_0100,a0                      	| [$0880: ld   hl,$0100]
	jbsr	add_to_score_5C90                 	| [$0883: call add_to_score_5C90]
	lea	l_3F03,a0                      	| [$0886: ld   hl,$3F03]
	jbsr	l_2018                            	| [$0889: call $2018]
	move.b	#0x01,d0                        	| [$088c: ld   a,$01]
	move.b	d0,unknown_6275                 	| [$088e: ld   (unknown_6275),a]
	move.l	(sp)+,a2                        	| [$0891: pop  ix]
	move.l	(sp)+,a0                        	| [$0893: pop  hl]
l_0894:
	move.b	#0x01,d0                        	| [$0894: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0896: ld   (iy+$00),a]
	move.b	#0x1A,d0                        	| [$0899: ld   a,$1A]
	move.b	d0,player_struct_6580           	| [$089b: ld   (player_struct_6580),a]
	move.w	(sp)+,d0                        	| [$089e: pop  af]
	rts                                    	| [$089f: ret]
l_08a0:
	move.w	(sp)+,d0                        	| [$08a0: pop  af]
	jra	l_0876                             	| [$08a1: jr   $0876]
l_08a3:
	clr.b	d0                               	| [$08a3: xor  a]
	move.b	d0,(0x00,a3)                    	| [$08a4: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$08a7: pop  af]
	rts                                    	| [$08a8: ret]
l_08a9:
	move.w	d0,-(sp)                        	| [$08a9: push af]
	clr.b	d0                               	| [$08aa: xor  a]
	move.b	d0,(0x00,a3)                    	| [$08ab: ld   (iy+$00),a]
	move.w	(sp)+,d0                        	| [$08ae: pop  af]
	rts                                    	| [$08af: ret]
 * wagon start y values
compute_wagon_start_values_08b0:
	lea	unknown_6019,a2                	| [$08b0: ld   ix,unknown_6019]
	lea	unknown_658B,a3                	| [$08b4: ld   iy,unknown_658B]
	move.b	#0xE1,d0                        	| [$08b8: ld   a,$E1]
	exg	d0,d7                              	| [$08ba: ex   af,af']
	jbsr	l_08df                            	| [$08bb: call $08DF]
	addq.w	#1,a2                           	| [$08be: inc  ix]
	addq.w	#4,a3                           	| [$08c0: inc  iy] * 4
	move.b	#0x41,d0                        	| [$08c8: ld   a,$41]
	exg	d0,d7                              	| [$08ca: ex   af,af']
	jbsr	l_08df                            	| [$08cb: call $08DF]
	addq.w	#1,a2                           	| [$08ce: inc  ix]
	addq.w	#4,a3                           	| [$08d0: inc  iy] * 4
	move.b	#0xC9,d0                        	| [$08d8: ld   a,$C9]
	exg	d0,d7                              	| [$08da: ex   af,af']
	jbsr	l_08df                            	| [$08db: call $08DF]
	rts                                    	| [$08de: ret]
l_08df:
	move.b	player_screen_600D,d0           	| [$08df: ld   a,(player_screen_600D)]
	subq.b	#1,d0                           	| [$08e2: dec  a]
	cmp.b	(a2),d0                     	| [$08e3: cp   (ix+$00)]
	jne	l_08ee                             	| [$08e6: jp   nz,$08EE]
	exg	d0,d7                              	| [$08e9: ex   af,af']
	move.b	d0,(a3)                    	| [$08ea: ld   (iy+$00),a]
	rts                                    	| [$08ed: ret]
 * not in current player screen: set coords to 255
l_08ee:
	st.b	d0                                	| [$08ee: ld   a,$FF]
	move.b	d0,(a3)                    	| [$08f0: ld   (iy+$00),a]
	rts                                    	| [$08f3: ret]
 * move wagons
l_08f4:
	lea	unknown_6016,a2                	| [$08f4: ld   ix,unknown_6016]
	lea	l_0994,a3                      	| [$08f8: ld   iy,$0994]
	lea	wagon_data_658A,a0             	| [$08fc: ld   hl,wagon_data_658A]
	jbsr	l_0925                            	| [$08ff: call $0925]
	addq.w	#1,a2                           	| [$0902: inc  ix]
	addq.w	#4,a3                           	| [$0904: inc  iy] * 4
	addq.w	#4,a0                           	| [$090c: inc  hl] * 4
	jbsr	l_0925                            	| [$0910: call $0925]
	addq.w	#1,a2                           	| [$0913: inc  ix]
	addq.w	#4,a3                           	| [$0915: inc  iy] * 4
	addq.w	#4,a0                           	| [$091d: inc  hl] * 4
	jbsr	l_0925                            	| [$0921: call $0925]
	rts                                    	| [$0924: ret]
l_0925:
	move.b	(0x00,a2),d0                    	| [$0925: ld   a,(ix+$00)]
	cmp.b	#0x00,d0                         	| [$0928: cp   $00]
	jne	l_0961                             	| [$092a: jp   nz,$0961]
	move.b	(a0),d0                         	| [$092d: ld   a,(hl)]
	subq.b	#1,d0                           	| [$092e: dec  a]
	move.b	d0,(a0)                         	| [$092f: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$0930: push af]
	move.b	(0x06,a2),d0                    	| [$0931: ld   a,(ix+$06)]
	cmp.b	#0x00,d0                         	| [$0934: cp   $00]
	jeq	l_093f                             	| [$0936: jr   z,$093F]
	move.b	player_x_6582,d0                	| [$0938: ld   a,(player_x_6582)]
	subq.b	#1,d0                           	| [$093b: dec  a]
	move.b	d0,player_x_6582                	| [$093c: ld   (player_x_6582),a]
l_093f:
	move.w	(sp)+,d0                        	| [$093f: pop  af]
	cmp.b	(0x02,a3),d0                     	| [$0940: cp   (iy+$02)]
	jeq	l_094c                             	| [$0943: jp   z,$094C]
	cmp.b	#0x00,d0                         	| [$0946: cp   $00]
	jeq	l_0959                             	| [$0948: jp   z,$0959]
	rts                                    	| [$094b: ret]
l_094c:
	move.b	(0x03,a2),d0                    	| [$094c: ld   a,(ix+$03)]
	cmp.b	(0x03,a3),d0                     	| [$094f: cp   (iy+$03)]
	beq.b	0f
	rts                                    	| [$0952: ret  nz]
0:
	move.b	#0x01,d0                        	| [$0953: ld   a,$01]
	move.b	d0,(0x00,a2)                    	| [$0955: ld   (ix+$00),a]
	rts                                    	| [$0958: ret]
l_0959:
	move.b	(0x03,a2),d0                    	| [$0959: ld   a,(ix+$03)]
	subq.b	#1,d0                           	| [$095c: dec  a]
	move.b	d0,(0x03,a2)                    	| [$095d: ld   (ix+$03),a]
	rts                                    	| [$0960: ret]
l_0961:
	move.b	(a0),d0                         	| [$0961: ld   a,(hl)]
	addq.b	#1,d0                           	| [$0962: inc  a]
	move.b	d0,(a0)                         	| [$0963: ld   (hl),a]
	move.w	d0,-(sp)                        	| [$0964: push af]
	move.b	(0x06,a2),d0                    	| [$0965: ld   a,(ix+$06)]
	cmp.b	#0x00,d0                         	| [$0968: cp   $00]
	jeq	l_0973                             	| [$096a: jr   z,$0973]
	move.b	player_x_6582,d0                	| [$096c: ld   a,(player_x_6582)]
	addq.b	#1,d0                           	| [$096f: inc  a]
	move.b	d0,player_x_6582                	| [$0970: ld   (player_x_6582),a]
l_0973:
	move.w	(sp)+,d0                        	| [$0973: pop  af]
	cmp.b	(0x00,a3),d0                     	| [$0974: cp   (iy+$00)]
	jeq	l_097f                             	| [$0977: jp   z,$097F]
	cmp.b	#0xFF,d0                         	| [$097a: cp   $FF]
	jeq	l_098c                             	| [$097c: jr   z,$098C]
	rts                                    	| [$097e: ret]
l_097f:
	move.b	(0x03,a2),d0                    	| [$097f: ld   a,(ix+$03)]
	cmp.b	(0x01,a3),d0                     	| [$0982: cp   (iy+$01)]
	beq.b	0f
	rts                                    	| [$0985: ret  nz]
0:
	clr.b	d0                               	| [$0986: ld   a,$00]
	move.b	d0,(0x00,a2)                    	| [$0988: ld   (ix+$00),a]
	rts                                    	| [$098b: ret]
l_098c:
	move.b	(0x03,a2),d0                    	| [$098c: ld   a,(ix+$03)]
	addq.b	#1,d0                           	| [$098f: inc  a]
	move.b	d0,(0x03,a2)                    	| [$0990: ld   (ix+$03),a]
	rts                                    	| [$0993: ret]


l_09a0:
	move.b	elevator_not_moving_6012,d0                       	| [$09a0: ld   a,($6012)]
											| [$09a3: cp   $00]
	bne.b	0f
	rts                                    	| [$09a5: ret  z]
0:
	move.b	d0,(a1)                         	| [$09a1: ld   (de),a]
	move.b	d1,d5                           	| [$09a2: ld   h,b]
	tst.b	d0                         	| [$09a3: cp   $00]
	bne.b	0f
	rts                                    	| [$09a5: ret  z]
0:
	move.b	elevator_timer_current_screen_6011,d0	| [$09a6: ld   a,(elevator_timer_current_screen_6011)]
	addq.b	#1,d0                           	| [$09a9: inc  a]
	move.b	d0,elevator_timer_current_screen_6011	| [$09aa: ld   (elevator_timer_current_screen_6011),a]
	cmp.b	#0x5F,d0                         	| [$09ad: cp   $5F]  < $5F:	 don't move the elevator
	beq.b	0f
	rts                                    	| [$09af: ret  nz]
0:
 * move the elevator
	clr.b	d0                               	| [$09b0: xor  a]
	move.b	d0,elevator_timer_current_screen_6011	| [$09b1: ld   (elevator_timer_current_screen_6011),a]
	move.b	d0,elevator_not_moving_6012     	| [$09b4: ld   (elevator_not_moving_6012),a]
	addq.b	#1,d0                           	| [$09b7: inc  a]
	move.b	d0,unknown_6015                 	| [$09b8: ld   (unknown_6015),a]
	move.b	player_screen_600D,d0           	| [$09bb: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$09be: cp   $02]
	jeq	l_09c8                             	| [$09c0: jr   z,$09C8]
	lea	l_09E8,a3                      	| [$09c2: ld   iy,$09E8]
	jra	l_09cc                             	| [$09c6: jr   $09CC]
l_09c8:
	lea	l_09DF,a3                      	| [$09c8: ld   iy,$09DF]
l_09cc:
	move.b	#0x09,d1                        	| [$09cc: ld   b,$09]
l_09ce:
	move.b	(0x02,a2),d0                    	| [$09ce: ld   a,(ix+$02)]
	cmp.b	(a3),d0                     	| [$09d1: cp   (iy+$00)]
	jeq	l_09f1                             	| [$09d4: jr   z,$09F1]
	addq.w	#1,a3                           	| [$09d6: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_09ce                             	| [$09d8: djnz $09CE]
l_09da:
	clr.b	d0                               	| [$09da: xor  a]
	move.b	d0,(a0)                         	| [$09db: ld   (hl),a]
	subq.b	#1,a0                           	| [$09dc: dec  hl]
	move.b	d0,(a0)                         	| [$09dd: ld   (hl),a]
	rts                                    	| [$09de: ret]

 * player entering in the elevator
l_09f1:
	move.b	elevator_y_current_screen_6587,d0	| [$09f1: ld   a,(elevator_y_current_screen_6587)]
	
	* no effect : removed								| [$09f4: sub  $00]
	cmp.b	(0x03,a2),d0                     	| [$09f6: cp   (ix+$03)]
	jeq	l_0a09                             	| [$09f9: jr   z,$0A09]
	subq.b	#0x01,d0                        	| [$09fb: sub  $01]
	cmp.b	(0x03,a2),d0                     	| [$09fd: cp   (ix+$03)]
	jeq	l_0a09                             	| [$0a00: jr   z,$0A09]
	addq.b	#0x02,d0                        	| [$0a02: add  a,$02]
	cmp.b	(0x03,a2),d0                     	| [$0a04: cp   (ix+$03)]
	jne	l_09da                             	| [$0a07: jr   nz,$09DA]
l_0a09:
	move.b	screen_index_param_6098,d0      	| [$0a09: ld   a,(screen_index_param_6098)]
	cmp.b	#0x01,d0                         	| [$0a0c: cp   $01]
	jeq	l_09da                             	| [$0a0e: jr   z,$09DA]
	move.b	fatal_fall_height_reached_604E,d0	| [$0a10: ld   a,(fatal_fall_height_reached_604E)]
	cmp.b	#0x00,d0                         	| [$0a13: cp   $00]
	jeq	l_0a21                             	| [$0a15: jr   z,$0A21]
	move.b	d6,d0                           	| [$0a17: ld   a,l]
	cmp.b	#0x14,d0                         	| [$0a18: cp   $14]
	jne	l_0a21                             	| [$0a1a: jr   nz,$0A21]
	move.b	#0x01,d0                        	| [$0a1c: ld   a,$01]
	move.b	d0,player_death_flag_6025       	| [$0a1e: ld   (player_death_flag_6025),a]
l_0a21:
	move.b	#0x01,d0                        	| [$0a21: ld   a,$01]
	move.b	d0,(a0)                         	| [$0a23: ld   (hl),a]
	subq.b	#1,a0                           	| [$0a24: dec  hl]
	move.b	d0,(a0)                         	| [$0a25: ld   (hl),a]
	rts                                    	| [$0a26: ret]

l_0a27:
	move.b	screen_index_param_6098,d0      	| [$0a27: ld   a,(screen_index_param_6098)]
	cmp.b	#0x02,d0                         	| [$0a2a: cp   $02]
	jne	l_0a34                             	| [$0a2c: jr   nz,$0A34]
	lea	l_0A42,a3                      	| [$0a2e: ld   iy,$0A42]
	jra	l_0a38                             	| [$0a32: jr   $0A38]
l_0a34:
	lea	l_0A54,a3                      	| [$0a34: ld   iy,$0A54]
l_0a38:
	move.b	#0x12,d1                        	| [$0a38: ld   b,$12]
	move.b	(a0),d0                         	| [$0a3a: ld   a,(hl)]
	move.w	d0,-(sp)                        	| [$0a3b: push af]
	jbsr	l_09ce                            	| [$0a3c: call $09CE]
	move.w	(sp)+,d0                        	| [$0a3f: pop  af]
	move.b	d0,(a0)                         	| [$0a40: ld   (hl),a]
	rts                                    	| [$0a41: ret]


player_movement_0B6D:
	move.b	player_death_flag_6025,d0       	| [$0b6d: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$0b70: cp   $01]
	bne.b	0f
	rts                                    	| [$0b72: ret  z]  dead:	 out of there
0:
	move.b	player_controls_frozen_6028,d0  	| [$0b73: ld   a,(player_controls_frozen_6028)]  gripping handle or other case where cannot move: out of here
	cmp.b	#0x01,d0                         	| [$0b76: cp   $01]
	jeq	l_0b65                             	| [$0b78: jp   z,$0B65]
	move.b	player_input_6026,d0            	| [$0b7b: ld   a,(player_input_6026)]
	and.b	#0x10,d0                         	| [$0b7e: and  $10]  right?
	cmp.b	#0x10,d0                         	| [$0b80: cp   $10]
	jne	l_0b91                             	| [$0b82: jr   nz,$0B91]
 * try to move right
	move.w	player_screen_address_6009(pc),a0	| [$0b84: ld   hl,(player_screen_address_6009)]
	jbsr	character_can_walk_right_0CFA     	| [$0b87: call character_can_walk_right_0CFA]
	move.b	unknown_600B,d0                 	| [$0b8a: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0b8d: cp   $02]
	jeq	l_0bad                             	| [$0b8f: jr   z,$0BAD]
l_0b91:
	move.b	player_input_6026,d0            	| [$0b91: ld   a,(player_input_6026)]
	and.b	#0x08,d0                         	| [$0b94: and  $08]
	cmp.b	#0x08,d0                         	| [$0b96: cp   $08] left
	jne	l_0b65                             	| [$0b98: jp   nz,$0B65]
 * try to move left
	move.w	player_screen_address_6009(pc),a0	| [$0b9b: ld   hl,(player_screen_address_6009)]
	jbsr	character_can_walk_left_0D69      	| [$0b9e: call character_can_walk_left_0D69]
	move.b	unknown_600B,d0                 	| [$0ba1: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0ba4: cp   $02]
	jne	l_0b65                             	| [$0ba6: jp   nz,$0B65]
	move.b	#0x80,d1                        	| [$0ba9: ld   b,$80]
	jra	l_0baf                             	| [$0bab: jr   z,$0BAF]
l_0bad:
	clr.b	d1                               	| [$0bad: ld   b,$00]
l_0baf:
	move.b	player_animation_frame_6006,d0  	| [$0baf: ld   a,(player_animation_frame_6006)]
	cmp.b	#0x0B,d0                         	| [$0bb2: cp   $0B]
	jne	l_0bd0                             	| [$0bb4: jr   nz,$0BD0]
	move.b	#0x01,d0                        	| [$0bb6: ld   a,$01]
	move.b	d0,player_animation_frame_6006  	| [$0bb8: ld   (player_animation_frame_6006),a]
	movem.w	d1/d2,-(sp)                    	| [$0bbb: push bc]
	jbsr	l_0ffd                            	| [$0bbc: call $0FFD]

	move.l	a0,-(sp)                        	| [$0bbf: push hl]

	move.l	a2,-(sp)                        	| [$0bc0: push ix]
	movem.w	d3/d4,-(sp)                    	| [$0bc2: push de]
	move.l	a1,-(sp)                        	| [$0bc2: push de]
	move.w	#0x0010,d6                      	| [$0bc3: ld   hl,$0010] 16
	jbsr	add_to_score_5C90                 	| [$0bc6: call add_to_score_5C90]
	move.l	(sp)+,a1                        	| [$0bc9: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0bc9: pop  de]
	move.l	(sp)+,a2                        	| [$0bca: pop  ix]
	move.l	(sp)+,a0                        	| [$0bcc: pop  hl]

	movem.w	(sp)+,d1/d2                    	| [$0bcd: pop  bc]
	jra	l_0be4                             	| [$0bce: jr   $0BE4]
l_0bd0:
	addq.b	#1,d0                           	| [$0bd0: inc  a]
	move.w	d0,-(sp)                        	| [$0bd1: push af]
	move.b	has_bag_6158,d0                 	| [$0bd2: ld   a,(has_bag_6158)]
	cmp.b	#0x00,d0                         	| [$0bd5: cp   $00]
	jeq	l_0be0                             	| [$0bd7: jr   z,$0BE0]
	jbsr	l_0cd9                            	| [$0bd9: call $0CD9]
	cmp.b	#0x00,d0                         	| [$0bdc: cp   $00]

	jeq	l_0c19                             	| [$0bde: jr   z,$0C19] skip animation because player has bag
l_0be0:
	move.w	(sp)+,d0                        	| [$0be0: pop  af]
	move.b	d0,player_animation_frame_6006  	| [$0be1: ld   (player_animation_frame_6006),a]
l_0be4:
	move.b	player_animation_frame_6006,d0  	| [$0be4: ld   a,(player_animation_frame_6006)]
	lea	player_struct_6580(pc),a0          	| [$0be7: ld   hl,player_struct_6580]
	cmp.b	#0x02,d0                         	| [$0bea: cp   $02]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bec: call z,$0C36]
0:
	cmp.b	#0x05,d0                         	| [$0bef: cp   $05]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bf1: call z,$0C36]
0:
	cmp.b	#0x09,d0                         	| [$0bf4: cp   $09]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bf6: call z,$0C36]
0:
	cmp.b	#0xFF,d0                         	| [$0bf9: cp   $FF]
	bne.b	0f
	rts                                    	| [$0bfb: ret  z]
0:
	cmp.b	#0x04,d0                         	| [$0bfc: cp   $04]
	bne.b	0f
	jbsr	l_0c36                            	| [$0bfe: call z,$0C36]
0:
	cmp.b	#0x06,d0                         	| [$0c01: cp   $06]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c03: call z,$0C36]
0:
	cmp.b	#0x08,d0                         	| [$0c06: cp   $08]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c08: call z,$0C36]
0:
	cmp.b	#0x0A,d0                         	| [$0c0b: cp   $0A]
	bne.b	0f
	jbsr	l_0c36                            	| [$0c0d: call z,$0C36]
0:
	cmp.b	#0x01,d0                         	| [$0c10: cp   $01]
	jne	l_0c1b                             	| [$0c12: jr   nz,$0C1B]
	move.b	#0x20,d0                        	| [$0c14: ld   a,$20]  player sprite index
	or.b	d1,d0                             	| [$0c16: or   b]
	move.b	d0,(a0)                         	| [$0c17: ld   (hl),a]
	rts                                    	| [$0c18: ret]

l_0c19:
	move.w	(sp)+,d0                        	| [$0c19: pop  af]
	rts                                    	| [$0c1a: ret]

 * player lateral move

l_0c1b:
	cmp.b	#0x03,d0                         	| [$0c1b: cp   $03]
	jne	l_0c24                             	| [$0c1d: jr   nz,$0C24]
	move.b	#0x1F,d0                        	| [$0c1f: ld   a,$1F]
	or.b	d1,d0                             	| [$0c21: or   b]
	move.b	d0,(a0)                         	| [$0c22: ld   (hl),a]
	rts                                    	| [$0c23: ret]
l_0c24:
	cmp.b	#0x07,d0                         	| [$0c24: cp   $07]
	jne	l_0c2d                             	| [$0c26: jr   nz,$0C2D]
	move.b	#0x1E,d0                        	| [$0c28: ld   a,$1E]
	or.b	d1,d0                             	| [$0c2a: or   b]
	move.b	d0,(a0)                         	| [$0c2b: ld   (hl),a]
	rts                                    	| [$0c2c: ret]
l_0c2d:
	cmp.b	#0xFF,d0                         	| [$0c2d: cp   $FF]
	jne	l_0c35                             	| [$0c2f: jr   nz,$0C35]
	move.b	#0x80,d0                        	| [$0c31: ld   a,$80]
	move.b	d0,(a0)                         	| [$0c33: ld   (hl),a]
	rts                                    	| [$0c34: ret]
l_0c35:
	rts                                    	| [$0c35: ret]
l_0c36:
	move.w	d0,-(sp)                        	| [$0c36: push af]
	move.b	d1,d0                           	| [$0c37: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0c38: cp   $80]
	jeq	l_0c96                             	| [$0c3a: jr   z,$0C96]
	move.w	player_screen_address_6009(pc),a0	| [$0c3c: ld   hl,(player_screen_address_6009)]
	jbsr	character_can_walk_right_0CFA     	| [$0c3f: call character_can_walk_right_0CFA]
	move.b	unknown_600B,d0                 	| [$0c42: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0c45: cp   $02]
	jne	l_0b64                             	| [$0c47: jp   nz,$0B64]
	move.b	player_x_6582,d0                	| [$0c4a: ld   a,(player_x_6582)]
	addq.b	#1,d0                           	| [$0c4d: inc  a]
	move.b	d0,player_x_6582                	| [$0c4e: ld   (player_x_6582),a]
	move.b	unknown_61F3,d0                 	| [$0c51: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c54: cp   $00]
	jne	l_0c72                             	| [$0c56: jr   nz,$0C72]
	jbsr	l_0c7c                            	| [$0c58: call $0C7C]
	move.b	unknown_61F3,d0                 	| [$0c5b: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c5e: cp   $00]
	jne	l_0c72                             	| [$0c60: jr   nz,$0C72]
	jbsr	l_0c89                            	| [$0c62: call $0C89]
	move.b	unknown_61F3,d0                 	| [$0c65: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0c68: cp   $00]
	jne	l_0c72                             	| [$0c6a: jr   nz,$0C72]
	lea	l_3F33(pc),a0                      	| [$0c6c: ld   hl,$3F33]
	jbsr	l_2018                            	| [$0c6f: call $2018]
l_0c72:
	move.b	#0x01,d0                        	| [$0c72: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0c74: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0c77: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0c7a: pop  af]
	rts                                    	| [$0c7b: ret]
l_0c7c:
	move.b	has_pick_61CF,d0                	| [$0c7c: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$0c7f: cp   $00]
	bne.b	0f
	rts                                    	| [$0c81: ret  z]
0:
	lea	l_3F2D(pc),a0                      	| [$0c82: ld   hl,$3F2D]
	jbsr	l_2018                            	| [$0c85: call $2018]
	rts                                    	| [$0c88: ret]
l_0c89:
	move.b	holds_barrow_61C7,d0            	| [$0c89: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x00,d0                         	| [$0c8c: cp   $00]
	rts                                    	| [$0c8e: ret]
	lea	l_3F3F(pc),a0                      	| [$0c8f: ld   hl,$3F3F]
	jbsr	l_2018                            	| [$0c92: call $2018]
	rts                                    	| [$0c95: ret]
l_0c96:
	move.w	player_screen_address_6009,d6	| [$0c96: ld   hl,(player_screen_address_6009)]
	jbsr	character_can_walk_left_0D69      	| [$0c99: call character_can_walk_left_0D69]
	move.b	unknown_600B,d0                 	| [$0c9c: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0c9f: cp   $02]
	jne	l_0b64                             	| [$0ca1: jp   nz,$0B64]
	move.b	player_x_6582,d0                	| [$0ca4: ld   a,(player_x_6582)]
	subq.b	#1,d0                           	| [$0ca7: dec  a]
	move.b	d0,player_x_6582                	| [$0ca8: ld   (player_x_6582),a]
	jbsr	l_2517                            	| [$0cab: call $2517]
	move.b	unknown_61F3,d0                 	| [$0cae: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cb1: cp   $00]
	jne	l_0ccf                             	| [$0cb3: jr   nz,$0CCF]
	jbsr	l_0c7c                            	| [$0cb5: call $0C7C]
	move.b	unknown_61F3,d0                 	| [$0cb8: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cbb: cp   $00]
	jne	l_0ccf                             	| [$0cbd: jr   nz,$0CCF]
	jbsr	l_0c89                            	| [$0cbf: call $0C89]
	move.b	unknown_61F3,d0                 	| [$0cc2: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0cc5: cp   $00]
	jne	l_0ccf                             	| [$0cc7: jr   nz,$0CCF]
	lea	l_3F33(pc),a0                      	| [$0cc9: ld   hl,$3F33]
	jbsr	l_2018                            	| [$0ccc: call $2018]
l_0ccf:
	move.b	#0x01,d0                        	| [$0ccf: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$0cd1: ld   (iy+$00),a]
	move.b	d0,unknown_609B                 	| [$0cd4: ld   (unknown_609B),a]
	move.w	(sp)+,d0                        	| [$0cd7: pop  af]
	rts                                    	| [$0cd8: ret]

l_0cd9:
	movem.w	d1/d2,-(sp)                    	| [$0cd9: push bc]
	move.b	#0x02,d1                        	| [$0cda: ld   b,$02]
	move.b	player_has_blue_bag_flag_627C,d0	| [$0cdc: ld   a,(player_has_blue_bag_flag_627C)]
	cmp.b	#0x00,d0                         	| [$0cdf: cp   $00]
	jeq	l_0ce5                             	| [$0ce1: jr   z,$0CE5]
 * player has blue bag
 * toggle 615F value (related to player speed)
	move.b	#0x01,d1                        	| [$0ce3: ld   b,$01]
l_0ce5:
	move.b	unknown_615F,d0                 	| [$0ce5: ld   a,(unknown_615F)]
	cmp.b	d1,d0                            	| [$0ce8: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$0ce9: pop  bc]
	jcs	l_0cf3                             	| [$0cea: jr   c,$0CF3]
	clr.b	d0                               	| [$0cec: xor  a]
	move.b	d0,unknown_615F                 	| [$0ced: ld   (unknown_615F),a]
	clr.b	d0                               	| [$0cf0: ld   a,$00]
	rts                                    	| [$0cf2: ret]
l_0cf3:
	addq.b	#1,d0                           	| [$0cf3: inc  a]
	move.b	d0,unknown_615F                 	| [$0cf4: ld   (unknown_615F),a]
	move.b	#0x01,d0                        	| [$0cf7: ld   a,$01]
	rts                                    	| [$0cf9: ret]

character_can_walk_right_0CFA:
	move.b	unknown_61ED,d0                 	| [$0cfa: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$0cfd: cp   $01]
	jne	l_0d07                             	| [$0cff: jr   nz,$0D07]
l_0d01:
	move.b	#0x02,d0                        	| [$0d01: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d03: ld   (unknown_600B),a]
	rts                                    	| [$0d06: ret]

l_0d07:
	move.b	unknown_61F2,d0                 	| [$0d07: ld   a,(unknown_61F2)]
	cmp.b	#0x01,d0                         	| [$0d0a: cp   $01]
	jeq	l_0d01                             	| [$0d0c: jr   z,$0D01]
	jbsr	l_2585                            	| [$0d0e: call $2585]
	move.b	unknown_600B,d0                 	| [$0d11: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d14: cp   $02]
	bne.b	0f
	rts                                    	| [$0d16: ret  z]
0:

	                           	| [$0d17: ld   a,l]
	sub.w	#0x21,d6                         	| [$0d18: sub  $21]
	    	| [$0d1a: ld   l,a]
	    	| [$0d1b: ld   a,h]
	    	| [$0d1c: sbc  a,$00]
    
	    	| [$0d1e: ld   h,a]
	jbsr	osd_r_videoram                         	| [$0d1f: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d20: call $0DA2]
	move.b	unknown_600B,d0                 	| [$0d23: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d26: cp   $02]
	beq.b	0f
	rts                                    	| [$0d28: ret  nz]
0:
	subq.w	#1,d6                           	| [$0d29: dec  hl]
	jbsr	osd_r_videoram                         	| [$0d2a: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d2b: call $0DA2]
	addq.w	#2,a0                           	| [$0d2e: inc  hl] * 2
	jbsr	l_0d34                            	| [$0d30: call $0D34]
	rts                                    	| [$0d33: ret]
l_0d34:
	move.b	(a0),d0                         	| [$0d34: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$0d35: push hl]
	movem.w	d1/d2,-(sp)                    	| [$0d36: push bc]
	move.w	#0x0d,d1                        	| [$0d37: ld   bc,$000D] 13
	lea	game_mem+0x0D45,a0                      	| [$0d3a: ld   hl,$0D45]
	jbsr	cpir                              	| [$0d3d: cpir]

	movem.w	(sp)+,d1/d2                    	| [$0d3f: pop  bc]
	movem.l	(sp)+,a0                        	| [$0d40: pop  hl]
	jeq	l_0d52                             	| [$0d41: jp   z,$0D52]
	rts                                    	| [$0d44: ret]

l_0d52:

	move.l	a2,-(sp)                        	| [$0d52: push ix]
	jbsr	l_2640                            	| [$0d54: call $2640]
	move.l	(sp)+,a2                        	| [$0d57: pop  ix]
	move.b	d1,d0                           	| [$0d59: ld   a,b]
	cmp.b	#0x05,d0                         	| [$0d5a: cp   $05]
	bcc.b	0f
	rts                                    	| [$0d5c: ret  c]
0:
	move.b	#0x01,d0                        	| [$0d5d: ld   a,$01]
	move.b	d0,unknown_600B                 	| [$0d5f: ld   (unknown_600B),a]
	rts                                    	| [$0d62: ret]
l_0d63:
	move.b	#0x01,d0                        	| [$0d63: ld   a,$01]
	move.b	d0,unknown_600B                 	| [$0d65: ld   (unknown_600B),a]
	rts                                    	| [$0d68: ret]

character_can_walk_left_0D69:
	move.b	unknown_61ED,d0                 	| [$0d69: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$0d6c: cp   $01]
	jne	l_0d76                             	| [$0d6e: jr   nz,$0D76]
	move.b	#0x02,d0                        	| [$0d70: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d72: ld   (unknown_600B),a]
	rts                                    	| [$0d75: ret]
l_0d76:
	jbsr	l_2569                            	| [$0d76: call $2569]
	move.b	unknown_600B,d0                 	| [$0d79: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d7c: cp   $02]
	bne.b	0f
	rts                                    	| [$0d7e: ret  z]
0:
                           	| [$0d7f: ld   a,l]
	add.w	#0x1F,d6                         	| [$0d80: add  a,$1F]
	                         	| [$0d82: ld   l,a]
	                         	| [$0d83: ld   a,h]
 
	                           	| [$0d86: ld   h,a]
	jbsr	osd_r_videoram                         	| [$0d87: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d88: call $0DA2]
	move.b	unknown_600B,d0                 	| [$0d8b: ld   a,(unknown_600B)]
	cmp.b	#0x02,d0                         	| [$0d8e: cp   $02]
	beq.b	0f
	rts                                    	| [$0d90: ret  nz]
0:
	subq.w	#1,d6										| [$0d91: dec  hl]
	jbsr	osd_r_videoram                         	| [$0d92: ld   a,(hl)]
	jbsr	l_0da2                            	| [$0d93: call $0DA2]
	addq.w	#2,a0                           	| [$0d96: inc  hl] * 2
	jbsr	l_0d34                            	| [$0d98: call $0D34]
	rts                                    	| [$0d9b: ret]
l_0d9c:
	move.b	#0x02,d0                        	| [$0d9c: ld   a,$02]
	move.b	d0,unknown_600B                 	| [$0d9e: ld   (unknown_600B),a]
	rts                                    	| [$0da1: ret]
l_0da2:
	move.b	d0,d2                           	| [$0da2: ld   c,a]
	lea	game_mem+0x0DB1,a1                      	| [$0da3: ld   de,$0DB1]
	move.b	#0x16,d1                        	| [$0da6: ld   b,$16]
l_0da8:
	move.b	(a1),d0                         	| [$0da8: ld   a,(de)]
	cmp.b	d2,d0                            	| [$0da9: cp   c]
	jeq	l_0d9c                             	| [$0daa: jr   z,$0D9C]
	addq.w	#1,a1                           	| [$0dac: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0da8                             	| [$0dad: djnz $0DA8]
	jra	l_0d63                             	| [$0daf: jr   $0D63]

l_0dc7:
	move.b	unknown_609B,d0                 	| [$0dc7: ld   a,(unknown_609B)]
	cmp.b	#0x01,d0                         	| [$0dca: cp   $01]
	bne.b	0f
	rts                                    	| [$0dcc: ret  z]
0:
	move.b	player_input_6026,d0            	| [$0dcd: ld   a,(player_input_6026)]
	and.b	#0x20,d0                         	| [$0dd0: and  $20]
	cmp.b	#0x20,d0                         	| [$0dd2: cp   $20] up
	jeq	l_0de9                             	| [$0dd4: jr   z,$0DE9]
	move.b	player_input_6026,d0            	| [$0dd6: ld   a,(player_input_6026)]
	and.b	#0x40,d0                         	| [$0dd9: and  $40]
	cmp.b	#0x40,d0                         	| [$0ddb: cp   $40] down
	beq.b	0f
	rts                                    	| [$0ddd: ret  nz]
0:
 * climb down
	move.w	player_screen_address_6009,d6	| [$0dde: ld   hl,(player_screen_address_6009)]
	jbsr	osd_r_videoram                          	| [$0de1: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0de2: cp   $FF]
	beq.b	0f
	rts                                    	| [$0de4: ret  nz]
0:
	clr.b	d1                               	| [$0de5: ld   b,$00]
	jra	l_0df3                             	| [$0de7: jr   $0DF3]
 * climb up
l_0de9:
	move.w	player_screen_address_6009,d6	| [$0de9: ld   hl,(player_screen_address_6009)]
	subq.b	#1,d6                           	| [$0dec: dec  hl]
	jbsr	osd_r_videoram                    	| [$0ded: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0dee: cp   $FF]
	beq.b	0f
	rts                                    	| [$0df0: ret  nz]
0:
	move.b	#0x80,d1                        	| [$0df1: ld   b,$80]
l_0df3:
	move.b	player_climb_frame_counter_6007,d0	| [$0df3: ld   a,(player_climb_frame_counter_6007)]
	cmp.b	#0x0B,d0                         	| [$0df6: cp   $0B]
	jne	l_0e01                             	| [$0df8: jr   nz,$0E01]
	move.b	#0x01,d0                        	| [$0dfa: ld   a,$01]
	move.b	d0,player_climb_frame_counter_6007	| [$0dfc: ld   (player_climb_frame_counter_6007),a]
	jra	l_0e16                             	| [$0dff: jr   $0E16]
l_0e01:
	addq.b	#1,d0                           	| [$0e01: inc  a]
	move.w	d0,-(sp)                        	| [$0e02: push af]
	move.b	has_bag_6158,d0                 	| [$0e03: ld   a,(has_bag_6158)]
	                         	| [$0e06: cp   $00]
	jeq	l_0e12                             	| [$0e08: jr   z,$0E12]
	jbsr	l_0cd9                            	| [$0e0a: call $0CD9] drop 1 move out of 2 if blue bag, 1 out of 3 if yellow bag
	tst.b	d0                         	| [$0e0d: cp   $00]
	jeq	l_0c19                             	| [$0e0f: jp   z,$0C19]
l_0e12:
	move.w	(sp)+,d0                        	| [$0e12: pop  af]
	move.b	d0,player_climb_frame_counter_6007	| [$0e13: ld   (player_climb_frame_counter_6007),a]
l_0e16:
	move.b	player_climb_frame_counter_6007,d0	| [$0e16: ld   a,(player_climb_frame_counter_6007)]
 * vertical player movement
	cmp.b	#0x01,d0                         	| [$0e19: cp   $01]
	bne.b	0f
	rts                                    	| [$0e1b: ret  z]
0:
	cmp.b	#0x03,d0                         	| [$0e1c: cp   $03]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e1e: call z,$0E7F]
0:
	cmp.b	#0x05,d0                         	| [$0e21: cp   $05]
	bne.b	0f
	rts                                    	| [$0e23: ret  z]
0:
	cmp.b	#0x08,d0                         	| [$0e24: cp   $08]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e26: call z,$0E7F]
0:
	cmp.b	#0x0A,d0                         	| [$0e29: cp   $0A]
	bne.b	0f
	rts                                    	| [$0e2b: ret  z]
0:
	cmp.b	#0x02,d0                         	| [$0e2c: cp   $02]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e2e: call z,$0E7F]
0:
	cmp.b	#0x04,d0                         	| [$0e31: cp   $04]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e33: call z,$0E7F]
0:
	cmp.b	#0x07,d0                         	| [$0e36: cp   $07]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e38: call z,$0E7F]
0:
	cmp.b	#0x09,d0                         	| [$0e3b: cp   $09]
	bne.b	0f
	jbsr	l_0e7f                            	| [$0e3d: call z,$0E7F]
0:
	cmp.b	#0x06,d0                         	| [$0e40: cp   $06]
	jne	l_0e50                             	| [$0e42: jr   nz,$0E50]
	move.b	#0x12,d0                        	| [$0e44: ld   a,$12]
	move.b	d0,player_struct_6580           	| [$0e46: ld   (player_struct_6580),a]
	jbsr	l_0e7f                            	| [$0e49: call $0E7F]
	jbsr	l_0e60                            	| [$0e4c: call $0E60]
	rts                                    	| [$0e4f: ret]
l_0e50:
	cmp.b	#0x0B,d0                         	| [$0e50: cp   $0B]
	jne	l_0e5f                             	| [$0e52: jr   nz,$0E5F]
	move.b	#0x92,d0                        	| [$0e54: ld   a,$92]
	move.b	d0,player_struct_6580           	| [$0e56: ld   (player_struct_6580),a]
	jbsr	l_0e7f                            	| [$0e59: call $0E7F]
	jbsr	l_0e60                            	| [$0e5c: call $0E60]
l_0e5f:
	rts                                    	| [$0e5f: ret]
l_0e60:
	move.b	unknown_61F3,d0                 	| [$0e60: ld   a,(unknown_61F3)]
	cmp.b	#0x00,d0                         	| [$0e63: cp   $00]
	jne	l_0e6d                             	| [$0e65: jr   nz,$0E6D]
	lea	game_mem+0x3F27,a0                      	| [$0e67: ld   hl,$3F27]
	jbsr	l_2018                            	| [$0e6a: call $2018]
l_0e6d:
	move.b	has_bag_6158,d0                 	| [$0e6d: ld   a,(has_bag_6158)]
	                         	| [$0e70: cp   $00]
	bne.b	0f
	rts                                    	| [$0e72: ret  z]
0:
	move.b	#0x3F,d0                        	| [$0e73: ld   a,$3F]
	move.b	d0,unknown_659C                 	| [$0e75: ld   (unknown_659C),a]
	move.b	player_x_6582,d0                	| [$0e78: ld   a,(player_x_6582)]
	move.b	d0,unknown_659E                 	| [$0e7b: ld   (unknown_659E),a]
	rts                                    	| [$0e7e: ret]
l_0e7f:
	move.w	d0,-(sp)                        	| [$0e7f: push af]
	clr.b	d0                               	| [$0e80: xor  a]
	move.b	d0,unknown_601C                 	| [$0e81: ld   (unknown_601C),a]
	move.b	d0,unknown_601D                 	| [$0e84: ld   (unknown_601D),a]
	move.b	d0,unknown_601E                 	| [$0e87: ld   (unknown_601E),a]
	move.b	d1,d0                           	| [$0e8a: ld   a,b]
	cmp.b	#0x80,d0                         	| [$0e8b: cp   $80]
	jne	l_0ea2                             	| [$0e8d: jr   nz,$0EA2]
	move.b	player_y_6583,d0                	| [$0e8f: ld   a,(player_y_6583)]
	subq.b	#1,d0                           	| [$0e92: dec  a]
	move.b	d0,player_y_6583                	| [$0e93: ld   (player_y_6583),a]
	lea	player_struct_6580,a2          	| [$0e96: ld   ix,player_struct_6580]
	jbsr	l_0f72                            	| [$0e9a: call $0F72]
	jbsr	l_0e60                            	| [$0e9d: call $0E60]
	move.w	(sp)+,d0                        	| [$0ea0: pop  af]
	rts                                    	| [$0ea1: ret]


l_0ffd:
	move.b	unknown_6143,d0                 	| [$0ffd: ld   a,(unknown_6143)]
	rts                                    	| [$1000: ret]

copy_4_bytes_ix_iy_1001:
	move.b	#0x04,d1                        	| [$1001: ld   b,$04]
l_1003:
	move.b	(0x00,a2),d0                    	| [$1003: ld   a,(ix+$00)]
	move.b	d0,(0x00,a3)                    	| [$1006: ld   (iy+$00),a]
	addq.w	#1,a2                           	| [$1009: inc  ix]
	addq.w	#1,a3                           	| [$100b: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_1003                             	| [$100d: djnz $1003]
	rts                                    	| [$100f: ret]


l_1010:
	move.b	has_bag_6158,d0                 	| [$1010: ld   a,(has_bag_6158)]
	cmp.b	#0x00,d0                         	| [$1013: cp   $00]
	bne.b	0f
	rts                                    	| [$1015: ret  z]
0:
	move.b	player_y_6583,d0                	| [$1016: ld   a,(player_y_6583)]
	subq.b	#0x02,d0                        	| [$1019: sub  $02]
	move.b	d0,unknown_659F                 	| [$101b: ld   (unknown_659F),a]
	move.b	player_struct_6580,d0           	| [$101e: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1021: and  $7F]
	cmp.b	#0x12,d0                         	| [$1023: cp   $12]
	bne.b	0f
	rts                                    	| [$1025: ret  z]
0:
	move.b	player_struct_6580,d0           	| [$1026: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$1029: and  $80]
	cmp.b	#0x80,d0                         	| [$102b: cp   $80]
	jne	l_103d                             	| [$102d: jr   nz,$103D]
	move.b	player_x_6582,d0                	| [$102f: ld   a,(player_x_6582)]
	add.b	#0x08,d0                         	| [$1032: add  a,$08]
	move.b	d0,unknown_659E                 	| [$1034: ld   (unknown_659E),a]
	move.b	#0xBF,d0                        	| [$1037: ld   a,$BF]
	move.b	d0,unknown_659C                 	| [$1039: ld   (unknown_659C),a]
	rts                                    	| [$103c: ret]
l_103d:
	move.b	player_x_6582,d0                	| [$103d: ld   a,(player_x_6582)]
	sub.b	#0x08,d0                         	| [$1040: sub  $08]
	move.b	d0,unknown_659E                 	| [$1042: ld   (unknown_659E),a]
	move.b	#0x3F,d0                        	| [$1045: ld   a,$3F]
	move.b	d0,unknown_659C                 	| [$1047: ld   (unknown_659C),a]
	rts                                    	| [$104a: ret]
l_104b:
	move.b	has_pick_61CF,d0                	| [$104b: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$104e: cp   $00]
	bne.b	0f
	rts                                    	| [$1050: ret  z]
0:
	move.b	player_struct_6580,d0           	| [$1051: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1054: and  $7F]
	move.b	#0x37,d1                        	| [$1058: ld   b,$37]
	cmp.b	#0x1F,d0                         	| [$1056: cp   $1F]
	jeq	l_1069                             	| [$105a: jr   z,$1069]
	move.b	player_struct_6580,d0           	| [$105c: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$105f: and  $7F]
	move.b	#0x37,d1                        	| [$1063: ld   b,$37]
	cmp.b	#0x12,d0                         	| [$1061: cp   $12]
	jeq	l_1069                             	| [$1065: jr   z,$1069]
	move.b	#0x38,d1                        	| [$1067: ld   b,$38]
l_1069:
	move.b	player_y_6583,d0                	| [$1069: ld   a,(player_y_6583)]
	move.b	d0,unknown_659F                 	| [$106c: ld   (unknown_659F),a]
	move.b	player_struct_6580,d0           	| [$106f: ld   a,(player_struct_6580)]
	and.b	#0x7F,d0                         	| [$1072: and  $7F]
	cmp.b	#0x12,d0                         	| [$1074: cp   $12]
	jeq	l_108e                             	| [$1076: jr   z,$108E]
	move.b	player_struct_6580,d0           	| [$1078: ld   a,(player_struct_6580)]
	and.b	#0x80,d0                         	| [$107b: and  $80]
	cmp.b	#0x80,d0                         	| [$107d: cp   $80]
	jeq	l_108e                             	| [$107f: jr   z,$108E]
	move.b	player_x_6582,d0                	| [$1081: ld   a,(player_x_6582)]
	add.b	#0x0C,d0                         	| [$1084: add  a,$0C]
	move.b	d0,unknown_659E                 	| [$1086: ld   (unknown_659E),a]
	move.b	d1,d0                           	| [$1089: ld   a,b]
	move.b	d0,unknown_659C                 	| [$108a: ld   (unknown_659C),a]
	rts                                    	| [$108d: ret]
l_108e:
	move.b	player_x_6582,d0                	| [$108e: ld   a,(player_x_6582)]
	sub.b	#0x0C,d0                         	| [$1091: sub  $0C]
	move.b	d0,unknown_659E                 	| [$1093: ld   (unknown_659E),a]
	move.b	d1,d0                           	| [$1096: ld   a,b]
	or.b	#0x80,d0                          	| [$1097: or   $80]
	move.b	d0,unknown_659C                 	| [$1099: ld   (unknown_659C),a]
	rts                                    	| [$109c: ret]

l_109d:
	move.b	gameplay_allowed_6054,d0        	| [$109d: ld   a,(gameplay_allowed_6054)]
	cmp.b	#0x01,d0                         	| [$10a0: cp   $01]
	jeq	object_pickup_test_10AE            	| [$10a2: jr   z,object_pickup_test_10AE]
	move.b	player_move_direction_6050,d0   	| [$10a4: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$10a7: and  $80]
	cmp.b	#0x80,d0                         	| [$10a9: cp   $80]
	jeq	l_10bf                             	| [$10ab: jr   z,$10BF]
	rts                                    	| [$10ad: ret]

object_pickup_test_10AE:
	move.b	player_input_6026,d0            	| [$10ae: ld   a,(player_input_6026)]
	and.b	#0x80,d0                         	| [$10b1: and  $80]
	cmp.b	#0x80,d0                         	| [$10b3: cp   $80]
	jne	l_10c5                             	| [$10b5: jr   nz,$10C5]
* fire pressed
	move.b	player_move_direction_6050,d0   	| [$10b7: ld   a,(player_move_direction_6050)]
	and.b	#0x80,d0                         	| [$10ba: and  $80]
	cmp.b	#0x80,d0                         	| [$10bc: cp   $80] just leaving the wagon handle
	bne.b	0f
	rts                                    	| [$10be: ret  z]  don't pick up anything!
0:
 *  actual pickup of an object
l_10bf:
	move.b	#0x01,d0                        	| [$10bf: ld   a,$01]
	move.b	d0,pickup_flag_6160             	| [$10c1: ld   (pickup_flag_6160),a]
	rts                                    	| [$10c4: ret]
l_10c5:
	clr.b	d0                               	| [$10c5: ld   a,$00]
	move.b	d0,pickup_flag_6160             	| [$10c7: ld   (pickup_flag_6160),a]
	rts                                    	| [$10ca: ret]


set_previous_guard_y_255_10CB:
	                                	| [$10cb: ld   a,$FF]
	st.b	(0x03,a3)                    	| [$10cd: ld   (iy+$03),a]
	rts                                    	| [$10d0: ret]

l_10ff:
	move.b	holds_barrow_61C7,d0                 	| [$10ff: ld   a,(holds_barrow_61C7)]
	                         	| [$1102: cp   $00]
	bne.b	0f
	rts                                    	| [$1104: ret  z]
0:
	move.b	player_x_6582,d0                	| [$1105: ld   a,(player_x_6582)]
	add.b	#0x0E,d0                         	| [$1108: add  a,$0E]
	move.b	d0,unknown_659E                 	| [$110a: ld   (unknown_659E),a]
	move.b	unknown_61ED,d0                 	| [$110d: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$1110: cp   $01]
	jeq	l_1119                             	| [$1112: jr   z,$1119]
	move.b	#0x10,d0                        	| [$1114: ld   a,$10]
	move.b	d0,unknown_659F                 	| [$1116: ld   (unknown_659F),a]
l_1119:
	move.b	player_y_6583,d0                	| [$1119: ld   a,(player_y_6583)]
	move.b	d0,d1                           	| [$111c: ld   b,a]
	move.b	unknown_659F,d0                 	| [$111d: ld   a,(unknown_659F)]
	cmp.b	d1,d0                            	| [$1120: cp   b]
	bne.b	0f
	rts                                    	| [$1121: ret  z]
0:
	addq.b	#0x01,d0                        	| [$1122: add  a,$01]
	cmp.b	d1,d0                            	| [$1124: cp   b]
	bne.b	0f
	rts                                    	| [$1125: ret  z]
0:
	lea		holds_barrow_61C7,a4			| [$1126: ld   bc,holds_barrow_61C7] None
	bsr		exx
	lea	unknown_61C4,a3                	| [$112a: ld   iy,unknown_61C4]
	move.b	#0x28,d0                        	| [$112e: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$1130: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$1133: ld   a,$EC]
	move.b	d0,(0x06,a3)                    	| [$1135: ld   (iy+$06),a]
	beq.b	0f
	jbsr	l_21ba                            	| [$1138: call nz,$21BA]
0:
	rts                                    	| [$113b: ret]
	
handle_pick_hold_timer_113c:
	move.b	has_pick_61CF,d0                	| [$113c: ld   a,(has_pick_61CF)]
	                         	| [$113f: cp   $00]
	bne.b	0f
	rts                                    	| [$1141: ret  z]
0:
	move.w	pickaxe_timer_duration_61E0,d5             	| [$1142: ld   hl,(pickaxe_timer_duration_61E0)]  FUCK
												| [$1145: ld   a,l]
												| [$1146: cp   $00]
												| [$1148: jr   nz,$1150]
												| [$114a: ld   a,h]
												| [$114b: cp   $00]
	jne	l_1150                             	| [$114d: jr   nz,$1150]
	rts                                    	| [$114f: ret]
l_1150:
	addq.w	#1,d5                           	| [$1150: inc  hl]
	move.w	d5,pickaxe_timer_duration_61E0                 	| [$1151: ld   (pickaxe_timer_duration_61E0),hl]
	cmp.w	#0x01FF,d5                      	| [$1154: ld   de,$01FF]
												| [sbc  hl,de]
	beq.b	0f
	rts                                    	| [$1159: ret  nz]
0:
	* lose the pickaxe
												| [$115a: ld   hl,$0000] 0
	clr.w	pickaxe_timer_duration_61E0                 	| [$115d: ld   (pickaxe_timer_duration_61E0),hl]
	clr.b	d0                               	| [$1160: ld   a,$00]
	lea	unknown_61CC,a2                	| [$1162: ld   ix,unknown_61CC]
	move.b	d0,(0x03,a2)                    	| [$1166: ld   (ix+$03),a]
	st.b	d0                                	| [$1169: ld   a,$FF]
	move.b	d0,unknown_659F                 	| [$116b: ld   (unknown_659F),a]
	rts                                    	| [$116e: ret]

guard_1_movement_116F:
	move.b	guard_1_screen_6099,d0          	| [$116f: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$1172: ld   (screen_index_param_6098),a]
	move.w	guard_1_screen_address_6038,stored_screen_address_6044	| [$1175: ld   hl,(guard_1_screen_address_6038)]
	              	| [$1178: ld   (stored_screen_address_6044),hl]
	lea	unknown_6057,a3                	| [$117b: ld   iy,unknown_6057]
	move.l	a3,unknown_pointer_6093                 	| [$117f: ld   (unknown_pointer_6093),iy]
	move.w	l_04A9,a2                   	| [$1183: ld   ix,($04A9)]
	lea	unknown_6034,a0                	| [$1187: ld   hl,unknown_6034]
	lea	guard_2_direction_6027,a3      	| [$118a: ld   iy,guard_2_direction_6027]
	jbsr	guard_walk_movement_0570          	| [$118e: call guard_walk_movement_0570]
	            	| [$1191: ld   a,(io_read_shit_B800)]
	move.b	screen_index_param_6098,d0      	| [$1194: ld   a,(screen_index_param_6098)]
	move.b	d0,guard_1_screen_6099          	| [$1197: ld   (guard_1_screen_6099),a]
	rts                                    	| [$119a: ret]
guard_2_movement_119B:
	move.b	guard_2_screen_609A,d0          	| [$119b: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$119e: ld   (screen_index_param_6098),a]
	move.w	guard_2_screen_address_6078,stored_screen_address_6044	| [$11a1: ld   hl,(guard_2_screen_address_6078)]
	                	| [$11a4: ld   (stored_screen_address_6044),hl]
	lea	unknown_6097,a3                	| [$11a7: ld   iy,unknown_6097]
	move.l	a3,unknown_pointer_6093                 	| [$11ab: ld   (unknown_pointer_6093),iy]
	move.w	l_04AB,a2                   	| [$11af: ld   ix,($04AB)]
	lea	unknown_6074,a0                	| [$11b3: ld   hl,unknown_6074]
	lea	guard_1_direction_6067,a3      	| [$11b6: ld   iy,guard_1_direction_6067]
	jbsr	guard_walk_movement_0570          	| [$11ba: call guard_walk_movement_0570]
	            	| [$11bd: ld   a,(io_read_shit_B800)]
	move.b	screen_index_param_6098,d0      	| [$11c0: ld   a,(screen_index_param_6098)]
	move.b	d0,guard_2_screen_609A          	| [$11c3: ld   (guard_2_screen_609A),a]
	rts                                    	| [$11c6: ret]


* global init
l_1200:
	clr.b	d0                               	| [$1200: xor  a]
	jbsr	osd_disable_vblank_interrupt
	addq.b	#1,d0                           	| [$1205: inc  a]
	jra	l_2480                             	| [$1206: jp   $2480]

l_121c:
	jbsr	play_intro_3700                   	| [$121c: call play_intro_3700]

	jbsr	set_bags_coordinates_355b         	| [$121f: call set_bags_coordinates_355b]
	jbsr	l_3567                            	| [$1222: call $3567]
	lea	game_mem+0x513C,a0                      	| [$1225: ld   hl,$513C]
	move.l	a0,unknown_pointer_6140                 	| [$1228: ld   (unknown_6140),hl]
 * reset guards and player
l_122b:
	jbsr	osd_disable_vblank_interrupt | di
									| [$122c: ld   a,(io_read_shit_B800)]
	jbsr	display_maze_1E94                 	| [$122f: call display_maze_1E94]
	jbsr	l_2957                            	| [$1232: call $2957]
	clr.b	d0                               	| [$1235: xor  a]
	move.b	d0,player_death_flag_6025       	| [$1236: ld   (player_death_flag_6025),a]
	addq.b	#1,d0                           	| [$1239: inc  a]
	move.b	d0,guard_2_screen_609A          	| [$123a: ld   (guard_2_screen_609A),a]
	move.b	#0x03,d0                        	| [$123d: ld   a,$03]
	move.b	d0,guard_1_screen_6099          	| [$123f: ld   (guard_1_screen_6099),a]

* game main loop


	illegal
	jbsr	osd_break
	
* < D6 screen address
l_1683:
	move.b	unknown_615E,d0                 	| [$1683: ld   a,(unknown_615E)]
										| [$1686: cp   $00]
	jne	l_1690                             	| [$1688: jr   nz,$1690]
	move.b	unknown_6159,d0                 	| [$168a: ld   a,(unknown_6159)]
	                         	| [$168d: cp   $00]
	bne.b	0f
	rts                                    	| [$168f: ret  z]
0:
l_1690:
	lea	unknown_659C,a2                	| [$1690: ld   ix,unknown_659C]
	lea	unknown_615A,a3                	| [$1694: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$1698: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$169b: ld   (screen_index_param_6098),a]
	subq.b	#1,(0x03,a2)                    	| [$169e: dec  (ix+$03)]
	jbsr	compute_logical_address_from_xy_558c                            	| [$16a1: call $558C]
*ei
	lea	unknown_659C,a2                	| [$16a5: ld   ix,unknown_659C]
	addq.b	#1,(0x03,a2)                    	| [$16a9: inc  (ix+$03)]
*ei
	bsr	read_rom                         	| [$16ad: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$16ae: push hl]
	lea	game_mem+0x5B24,a0                      	| [$16af: ld   hl,$5B24]
	move.w	#0x07,d1                        	| [$16b2: ld   bc,$0007] 7
	jbsr	cpdr                              	| [$16b5: cpdr]
	movem.l	(sp)+,a0                        	| [$16b7: pop  hl]
	jne	l_16c5                             	| [$16b8: jp   nz,$16C5]
	move.b	#0x01,d0                        	| [$16bb: ld   a,$01]
	move.b	d0,unknown_615E                 	| [$16bd: ld   (unknown_615E),a]
	clr.b	d0                               	| [$16c0: xor  a]
	move.b	d0,unknown_6159                 	| [$16c1: ld   (unknown_6159),a]
	rts                                    	| [$16c4: ret]
l_16c5:
	clr.b	d0                               	| [$16c5: xor  a]
	move.b	d0,unknown_615E                 	| [$16c6: ld   (unknown_615E),a]
	addq.b	#1,d0                           	| [$16c9: inc  a]
	move.b	d0,unknown_6159                 	| [$16ca: ld   (unknown_6159),a]
	lea	unknown_659C,a2                	| [$16cd: ld   ix,unknown_659C]
	lea	unknown_615A,a3                	| [$16d1: ld   iy,unknown_615A]
	move.b	player_screen_600D,d0           	| [$16d5: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$16d8: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c                            	| [$16db: call $558C]
*ei
	bsr	read_rom                         	| [$16df: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$16e0: push hl]
	lea	game_mem+0x17D0,a0                      	| [$16e1: ld   hl,$17D0]
	move.w	#0x22,d1                        	| [$16e4: ld   bc,$0022] 34
	jbsr	cpdr                              	| [$16e7: cpdr]
	movem.l	(sp)+,a0                        	| [$16e9: pop  hl]
	bne.b	0f
	rts                                    	| [$16ea: ret  z]
0:
	clr.b	d0                               	| [$16eb: xor  a]
	move.b	d0,unknown_615E                 	| [$16ec: ld   (unknown_615E),a]
	move.b	d0,unknown_6159                 	| [$16ef: ld   (unknown_6159),a]
	move.l	unknown_pointer_615C,a3             	| [$16f2: ld   iy,(unknown_pointer_615C)]
	move.b	player_screen_600D,d0           	| [$16f6: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$16f9: ld   (iy+$02),a]
	cmp.b	#0x01,d0                         	| [$16fc: cp   $01]
	jne	l_1705                             	| [$16fe: jr   nz,$1705]
	* ajust address according to player/displayed screen
											| [$1700: ld   a,h]
	add.w	#0x5000,d6                         	| [$1701: add  a,$50]
	jra	l_1711                             	| [$1703: jr   $1711]
l_1705:
	cmp.b	#0x02,d0                         	| [$1705: cp   $02]
	jne	l_170e                             	| [$1707: jr   nz,$170E]
	                           	| [$1709: ld   a,h]
	add.w	#0x4C00,d6                         	| [$170a: add  a,$4C]
	jra	l_1711                             	| [$170c: jr   $1711]
l_170e:
	                           	| [$170e: ld   a,h]
	add.w	#0x4800,d0                         	| [$170f: add  a,$48]
l_1711:
												| [$1711: ld   h,a]
												| [$1712: xor  a]
												| [$1713: ld   a,l]
	sub.w	#0x22,d6                         	| [$1714: sub  $22]
												| [$1716: ld   l,a]
												| [$1717: ld   a,h]
												| [$1718: sbc  a,$00]
										
												| [$171a: ld   h,a]
	jbsr	osd_r_videoram                       	| [$171b: ld   a,(hl)]
	cmp.b	#0xD0,d0                         	| [$171c: cp   $D0]
	jeq	l_1730                             	| [$171e: jr   z,$1730]
	exg	a1,a0                              	| [$1720: ex   de,hl]
	lea	game_mem+0x17D0,a0                      	| [$1721: ld   hl,$17D0]
	move.w	#0x07,d1                        	| [$1724: ld   bc,$0007] 7
	jbsr	cpdr                              	| [$1727: cpdr]
	exg	a1,a0                              	| [$1729: ex   de,hl]
	jeq	l_1730                             	| [$172a: jr   z,$1730]
	move.w	#0x0020,d3                      	| [$172c: ld   de,$0020] 32
	add.w	d3,d6                            	| [$172f: add  hl,de]
l_1730:
	jbsr	osd_disable_vblank_interrupt		| di
	move.b	d6,(0x00,a3)                    	| [$1731: ld   (iy+$00),l]
	move.b	d6,d0                           	| [$1734: ld   a,l]
	cmp.b	#0xC0,d0                         	| [$1735: cp   $C0]
	jne	l_173b                             	| [$1737: jr   nz,$173B]
	move.b	#0x68,d0                        	| [$1739: ld   a,$68]
l_173b:
	move.b	d5,(0x01,a3)                    	| [$173b: ld   (iy+$01),h]
	move.b	player_screen_600D,d0           	| [$173e: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$1741: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt			| ei
	addq.w	#1,d6                           	| [$1745: inc  hl]
	jbsr	osd_r_videoram                         	| [$1746: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$1747: cp   $ED]
	jeq	l_175e                             	| [$1749: jr   z,$175E]
	cmp.b	#0xEF,d0                         	| [$174b: cp   $EF]
	jeq	l_175e                             	| [$174d: jr   z,$175E]
											| [$174f: ld   a,l]
	add.w	#0x20,d6                         	| [$1750: add  a,$20]
												| [$1752: ld   l,a]
												| [$1753: ld   a,h]
					
											| [$1756: ld   h,a]
	jbsr	osd_r_videoram                         	| [$1757: ld   a,(hl)]
	cmp.b	#0xED,d0                         	| [$1758: cp   $ED]
	jeq	l_175e                             	| [$175a: jr   z,$175E]
	jra	l_17a0                             	| [$175c: jr   $17A0]
l_175e:

	move.l	a2,-(sp)                        	| [$175e: push ix]
	jbsr	l_17d5                            	| [$1760: call $17D5]
	move.b	unknown_659D,d0                 	| [$1763: ld   a,(unknown_659D)]
	cmp.b	#0x24,d0                         	| [$1766: cp   $24]
	jne	l_1775                             	| [$1768: jr   nz,$1775]
	move.b	#0x20,d0                        	| [$176a: ld   a,$20]
	move.b	d0,unknown_659D                 	| [$176c: ld   (unknown_659D),a]
	jbsr	l_17d5                            	| [$176f: call $17D5]
	jbsr	l_17d5                            	| [$1772: call $17D5]
l_1775:
	lea	l_3F1B,a0                      	| [$1775: ld   hl,$3F1B]
	jbsr	l_2018                            	| [$1778: call $2018]
	jbsr	can_pick_bag_3DEB                 	| [$177b: call can_pick_bag_3DEB]
	jne	l_178a                             	| [$177e: jr   nz,$178A]
	lea	game_mem+0x5B78,a0                      	| [$1780: ld   hl,$5B78]
	move.l	a0,unknown_pointer_6140                 	| [$1783: ld   (unknown_6140),hl]
	clr.b	d0                               	| [$1786: xor  a]
	move.b	d0,unknown_6142                 	| [$1787: ld   (unknown_6142),a]
l_178a:
	move.l	(sp)+,a2                        	| [$178a: pop  ix]
	jbsr	osd_disable_vblank_interrupt |	di
	clr.b	d0                               	| [$178d: xor  a]
	move.b	d0,(0x00,a3)                    	| [$178e: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$1791: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$1794: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt    | ei
	* reset time to 4000
	move.b	#0x40,d0                        	| [$1798: ld   a,$40]
	move.b	d0,time_61E8                    	| [$179a: ld   (time_61E8),a]
	jbsr	l_3b00                            	| [$179d: call $3B00]
l_17a0:
	clr.b	d0                               	| [$17a0: xor  a]
	lea	unknown_659C,a2                	| [$17a1: ld   ix,unknown_659C]
	move.b	d0,(0x02,a2)                    	| [$17a5: ld   (ix+$02),a]
	st.b	d0                                	| [$17a8: ld   a,$FF]
	move.b	d0,(0x03,a2)                    	| [$17aa: ld   (ix+$03),a]
	rts                                    	| [$17ad: ret]

l_17d5:
	move.b	unknown_61E7+1,d6             	| [$17d5: ld   hl,(unknown_61E7)]
	lsl.w	#8,d6                              	| [$17d8: ld   l,$00]
	jbsr	add_to_score_5C90                 	| [$17da: call add_to_score_5C90]
	rts                                    	| [$17dd: ret]
check_if_can_pick_bag_17de:
	tst.b	has_bag_6158                 	| [$17de: ld   a,(has_bag_6158)]
											| [$17e1: cp   $00]
	jne	l_195f                             	| [$17e3: jp   nz,$195F]
	move.b	has_pick_61CF,d0                	| [$17e6: ld   a,(has_pick_61CF)]
	cmp.b	#0x01,d0                         	| [$17e9: cp   $01]
	bne.b	0f
	rts                                    	| [$17eb: ret  z]
0:
	move.b	holds_barrow_61C7,d0            	| [$17ec: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$17ef: cp   $01]
	bne.b	0f
	rts                                    	| [$17f1: ret  z]
0:
	move.b	unknown_6159,d0                 	| [$17f2: ld   a,(unknown_6159)]
	cmp.b	#0x01,d0                         	| [$17f5: cp   $01]
	bne.b	0f
	rts                                    	| [$17f7: ret  z]
0:
	move.b	unknown_615E,d0                 	| [$17f8: ld   a,(unknown_615E)]
	cmp.b	#0x01,d0                         	| [$17fb: cp   $01]
	bne.b	0f
	rts                                    	| [$17fd: ret  z]
0:
	lea	bags_coordinates_609C,a3       	| [$17fe: ld   iy,bags_coordinates_609C]
	move.b	#0x12,d1                        	| [$1802: ld   b,$12]
	move.w	player_screen_address_6009,d6	| [$1804: ld   hl,(player_screen_address_6009)]
	move.b	#0x24,d0                        	| [$1807: ld   a,$24]
	move.b	d0,unknown_627B                 	| [$1809: ld   (unknown_627B),a]
l_180c:
	move.b	(0x02,a3),d0                    	| [$180c: ld   a,(iy+$02)]
	movem.w	d1/d2,-(sp)                    	| [$180f: push bc]
	move.b	d0,d1                           	| [$1810: ld   b,a]
	move.b	player_screen_600D,d0           	| [$1811: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$1814: cp   b]

	movem.w	(sp)+,d1/d2                    	| [$1815: pop  bc]
	jne	l_1830                             	| [$1816: jp   nz,$1830]
	move.b	(0x01,a3),d3                    	| [$1819: ld   d,(iy+$01)]
	lsl.w	#8,d3
	move.b	(0x00,a3),d3                    	| [$181c: ld   e,(iy+$00)]
	addq.w	#2,d3                           	| [$181f: inc  de] * 2
	jbsr	l_1945                            	| [$1821: call $1945]
	clr.b	d0                               	| [$1824: xor  a]

								| [$1825: push hl]
	cmp.w	d3,d6
								| [$1828: pop  hl]
	jeq	l_183e                             	| [$1829: jr   z,$183E]
	jbsr	l_3585                            	| [$182b: call $3585]
	jeq	l_183e                             	| [$182e: jr   z,$183E]
l_1830:
	addq.w	#1,a3                           	| [$1830: inc  iy]
	addq.w	#2,a3                           	| [$1832: inc  iy] * 2
	move.b	#0x20,d0                        	| [$1836: ld   a,$20]
	move.b	d0,unknown_627B                 	| [$1838: ld   (unknown_627B),a]
	subq.b	#1,d1                           	| [...]
	jne	l_180c                             	| [$183b: djnz $180C]
	rts                                    	| [$183d: ret]
l_183e:
	jbsr	test_pickup_flag_19A4             	| [$183e: call test_pickup_flag_19A4]
	move.b	d1,d0                           	| [$1841: ld   a,b]
	cmp.b	#0x00,d0                         	| [$1842: cp   $00]
	bne.b	0f
	rts                                    	| [$1844: ret  z]
0:
	move.b	has_pick_61CF,d0                	| [$1845: ld   a,(has_pick_61CF)]
	cmp.b	#0x00,d0                         	| [$1848: cp   $00]
	jeq	l_186b                             	| [$184a: jr   z,$186B]

	move.l	a3,-(sp)                        	| [$184c: push iy]

	move.l	a0,-(sp)                        	| [$184e: push hl]
	lea		has_pick_61CF,a4           	| [$184f: ld   bc,has_pick_61CF] None
	lea	unknown_61CC,a3                	| [$1852: ld   iy,unknown_61CC]
	move.b	#0x38,d0                        	| [$1856: ld   a,$38]
	move.b	d0,(0x04,a3)                    	| [$1858: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$185b: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$185d: ld   (iy+$05),a]
	move.b	#0xE4,d0                        	| [$1860: ld   a,$E4]
	move.b	d0,unknown_61D2                 	| [$1862: ld   (unknown_61D2),a]
	jbsr	l_21ba                            	| [$1865: call $21BA]
	move.l	(sp)+,a0                        	| [$1868: pop  hl]
	move.l	(sp)+,a3                        	| [$1869: pop  iy]
l_186b:
	lea	player_struct_6580,a2          	| [$186b: ld   ix,player_struct_6580]
	move.b	#0x3F,d0                        	| [$186f: ld   a,$3F]
	move.b	d0,(0x1c,a2)                    	| [$1871: ld   (ix+$1c),a]
	move.b	unknown_627B,d0                 	| [$1874: ld   a,(unknown_627B)]
	move.b	d0,(0x1d,a2)                    	| [$1877: ld   (ix+$1d),a]
	move.b	(0x03,a2),d0                    	| [$187a: ld   a,(ix+$03)]
	move.b	d0,(0x1f,a2)                    	| [$187d: ld   (ix+$1f),a]
	move.b	(0x02,a2),d0                    	| [$1880: ld   a,(ix+$02)]
	sub.b	#0x08,d0                         	| [$1883: sub  $08]
	move.b	d0,(0x1e,a2)                    	| [$1885: ld   (ix+$1e),a]
	jbsr	can_pick_bag_3DEB                 	| [$1888: call can_pick_bag_3DEB]
	jne	l_1897                             	| [$188b: jr   nz,$1897]
	lea	game_mem+0x5BA8,a0                      	| [$188d: ld   hl,$5BA8]
	move.l	a0,unknown_pointer_6140                 	| [$1890: ld   (unknown_6140),hl]
	clr.b	d0                               	| [$1893: xor  a]
	move.b	d0,unknown_6142                 	| [$1894: ld   (unknown_6142),a]
 * pickup money bag
l_1897:
	move.b	#0x01,d0                        	| [$1897: ld   a,$01]
	move.b	d0,has_bag_6158                 	| [$1899: ld   (has_bag_6158),a]
	move.l	a3,unknown_pointer_615C                 	| [$189c: ld   (unknown_pointer_615C),iy]
	* store as big endian
	move.b	(0x01,a3),dropped_bag_screen_address_61F6+1                    	| [$18a0: ld   h,(iy+$01)]
	move.b	(0x00,a3),dropped_bag_screen_address_61F6                    	| [$18a3: ld   l,(iy+$00)]
									| [$18a6: ld   (dropped_bag_screen_address_61F6),hl]
	clr.b	d0                               	| [$18a9: xor  a]
	move.b	d0,unknown_627E                 	| [$18aa: ld   (unknown_627E),a]
	jbsr	osd_disable_vblank_interrupt   | [di]
	move.b	d0,(0x00,a3)                    	| [$18ae: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$18b1: ld   (iy+$01),a]
	move.b	d0,(0x02,a3)                    	| [$18b4: ld   (iy+$02),a]
	jbsr	osd_enable_vblank_interrupt   | [ei]
	move.b	unknown_627B,d0                 	| [$18b8: ld   a,(unknown_627B)]
	cmp.b	#0x24,d0                         	| [$18bb: cp   $24]
	jne	l_18c3                             	| [$18bf: jr   nz,$18C3]
	move.b	#0x01,d0                        	| [$18c1: ld   a,$01]
	bra.b	l_18c3_2
l_18c3:
	clr.b	d0                               	| [$18bd: ld   a,$00]
l_18c3_2:
	move.b	d0,player_has_blue_bag_flag_627C	| [$18c3: ld   (player_has_blue_bag_flag_627C),a]
	rts                                    	| [$18c6: ret]
l_18c7:
	move.b	unknown_627E,d0                 	| [$18c7: ld   a,(unknown_627E)]
	cmp.b	#0x07,d0                         	| [$18ca: cp   $07]
	bcs.b	0f
	rts                                    	| [$18cc: ret  nc]
0:
	* probably needed to refresh background tiles when picking up bag
	move.w	dropped_bag_screen_address_61F6,d6             	| [$18cd: ld   hl,(dropped_bag_screen_address_61F6)]
	move.w	d6,d0
	* test MSB
	lsr.w	#8,d0                           	| [$18d0: ld   a,h]
												| [$18d1: cp   $00]
	bne.b	0f
	rts                                    	| [$18d3: ret  z]
0:
	move.b	d6,d0                           	| [$18d4: ld   a,l]
	and.b	#0x0F,d0                         	| [$18d5: and  $0F]
											| [$18d7: cp   $00]
	bne.b	0f
	rts                                    	| [$18d9: ret  z]
0:
	jbsr	l_192f                            	| [$18da: call $192F]
	jbsr	l_1915                            	| [$18dd: call $1915]
	addq.w	#1,d6                           	| [$18e0: inc  hl]
	jbsr	l_192f                            	| [$18e1: call $192F]
	jbsr	l_1915                            	| [$18e4: call $1915]
	move.w	#0x0020,d3                      	| [$18e7: ld   de,$0020] 32
	add.w	d3,d6                            	| [$18ea: add  hl,de]
	jbsr	l_192f                            	| [$18eb: call $192F]
	jbsr	l_1915                            	| [$18ee: call $1915]
	subq.b	#1,d6                           	| [$18f1: dec  hl]
	jbsr	l_192f                            	| [$18f2: call $192F]
	jbsr	l_1915                            	| [$18f5: call $1915]
	move.b	unknown_627E,d0                 	| [$18f8: ld   a,(unknown_627E)]
	addq.b	#1,d0                           	| [$18fb: inc  a]
	move.b	d0,unknown_627E                 	| [$18fc: ld   (unknown_627E),a]
	move.b	player_screen_600D,d0           	| [$18ff: ld   a,(player_screen_600D)]
	cmp.b	#0x02,d0                         	| [$1902: cp   $02]
	bne.b	0f
	jbsr	l_33e3                            	| [$1904: call z,$33E3]
0:
	rts                                    	| [$1907: ret]
l_1908:
	move.b	(0x00,a2),d0                    	| [$1908: ld   a,(ix+$00)]
	cmp.b	#0x01,d0                         	| [$190b: cp   $01]
	bne.b	0f
	rts                                    	| [$190d: ret  z]
0:
	move.b	(a0),d0                         	| [$190e: ld   a,(hl)]
	cmp.b	#0xF0,d0                         	| [$190f: cp   $F0]
	bcc.b	0f
	rts                                    	| [$1911: ret  c]
0:
	clr.b	d0                               	| [$1912: xor  a]
	move.b	d0,(a1)                         	| [$1913: ld   (de),a]
	rts                                    	| [$1914: ret]
l_1915:
	move.b	#0x1F,d1                        	| [$1915: ld   b,$1F]
	move.b	(a0),d0                         	| [$1917: ld   a,(hl)]
	cmp.b	#0x49,d0                         	| [$1918: cp   $49]
	jeq	l_1926                             	| [$191a: jr   z,$1926]
	cmp.b	#0x4A,d0                         	| [$191c: cp   $4A]
	jeq	l_1926                             	| [$191e: jr   z,$1926]
	cmp.b	#0x4B,d0                         	| [$1920: cp   $4B]
	jeq	l_1926                             	| [$1922: jr   z,$1926]
	move.b	#0x3F,d1                        	| [$1924: ld   b,$3F]
l_1926:

	move.l	a0,-(sp)                        	| [$1926: push hl]
	move.b	d5,d0                           	| [$1927: ld   a,h]
	add.b	#0x08,d0                         	| [$1928: add  a,$08]
	move.b	d0,d5                           	| [$192a: ld   h,a]
	move.b	d1,d0                           	| [$192b: ld   a,b]
	move.b	d0,(a0)                         	| [$192c: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$192d: pop  hl]
	rts                                    	| [$192e: ret]
l_192f:
	* D6 contains screen memory, copy to D3
	move.w	d6,d3                           	| [$192f: ld   a,h]
												| [$1930: ld   d,a]
												| [$1931: ld   a,l]
												| [$1932: ld   e,a]
	jbsr	compute_backbuffer_tile_address_1945                          	| [$1933: call $1945]
l_1936:
	* copy tile data back to screen
	and.l	#0xFFFF,d3
	lea		game_mem,a1
	add.l	d3,a1
	move.b	(a1),d0                         	| [$1936: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$1937: ld   (hl),a]
	* loop until write succeeds... no need for this!
												| [$1938: ld   a,(de)]
												| [$1939: cp   (hl)]
											| [$193a: jr   nz,$1936]

	move.l	a0,-(sp)                        	| [$193c: push hl]
	move.b	d5,d0                           	| [$193d: ld   a,h]
	add.b	#0x08,d0                         	| [$193e: add  a,$08]
	move.b	d0,d5                           	| [$1940: ld   h,a]
	clr.b	d0                               	| [$1941: xor  a]
	move.b	d0,(a0)                         	| [$1942: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$1943: pop  hl]
	rts                                    	| [$1944: ret]

* < D3: screen address
* > D3: backbuffer address (depends on current screen)
compute_backbuffer_tile_address_1945:
	move.b	player_screen_600D,d0           	| [$1945: ld   a,(player_screen_600D)]
	cmp.b	#0x01,d0                         	| [$1948: cp   $01]
	jne	l_1951                             	| [$194a: jr   nz,$1951]
	                           	| [$194c: ld   a,d]
	sub.w	#0x5000,d3                         	| [$194d: sub  $50]
	                           	| [$194f: ld   d,a]
	rts                                    	| [$1950: ret]
l_1951:
	cmp.b	#0x02,d0                         	| [$1951: cp   $02]
	jne	l_195a                             	| [$1953: jr   nz,$195A]
	                           	| [$1955: ld   a,d]
	sub.w	#0x4C00,d3                         	| [$1956: sub  $4C]
	                           	| [$1958: ld   d,a]
	rts                                    	| [$1959: ret]
l_195a:
	                           	| [$195a: ld   a,d]
	sub.w	#0x4800,d0                         	| [$195b: sub  $48]
	                           	| [$195d: ld   d,a]
	rts                                    	| [$195e: ret]


wagon_player_collision_1D84:
	move.b	player_death_flag_6025,d0       	| [$1d84: ld   a,(player_death_flag_6025)]
	cmp.b	#0x01,d0                         	| [$1d87: cp   $01]
	bne.b	0f
	rts                                    	| [$1d89: ret  z] return immediately if player dies
0:
	move.b	player_in_wagon_flag_6029,d0    	| [$1d8a: ld   a,(player_in_wagon_flag_6029)]
	cmp.b	#0x01,d0                         	| [$1d8d: cp   $01]
	bne.b	0f
	rts                                    	| [$1d8f: ret  z]
0:
	lea	player_x_6582(pc),a2               	| [$1d90: ld   ix,player_x_6582]
	lea	wagon_data_658A(pc),a3             	| [$1d94: ld   iy,wagon_data_658A]
	lea	unknown_6022(pc),a0                	| [$1d98: ld   hl,unknown_6022]
	move.w	#0x0004,d3                      	| [$1d9b: ld   de,$0004] 4
	move.b	player_gripping_handle_602A,d0  	| [$1d9e: ld   a,(player_gripping_handle_602A)]
	cmp.b	#0x01,d0                         	| [$1da1: cp   $01]
	bne.b	0f
	rts                                    	| [$1da3: ret  z]  no collision if gripping handle
0:

* all 3 wagons
	jbsr	one_wagon_player_collision_1DB4   	| [$1da4: call one_wagon_player_collision_1DB4]
	addq.w	#1,a0                           	| [$1da7: inc  hl]
	add.w	d3,a3                            	| [$1da8: add  iy,de]
 	jbsr	one_wagon_player_collision_1DB4   	| [$1daa: call one_wagon_player_collision_1DB4]
	addq.w	#1,a0                           	| [$1dad: inc  hl]
	add.w	d3,a3                            	| [$1dae: add  iy,de]
	jbra	one_wagon_player_collision_1DB4   	| [$1db0: call one_wagon_player_collision_1DB4]
								| [$1db3: ret]

one_wagon_player_collision_1DB4:
	move.b	(0x01,a2),d0                    	| [$1db4: ld   a,(ix+$01)]
	addq.b	#1,d0                           	| [$1db7: inc  a]
	cmp.b	(0x01,a3),d0                     	| [$1db8: cp   (iy+$01)]
	beq.b	0f
	rts                                    	| [$1dbb: ret  nz]
0:
	move.b	(0x00,a3),d0                    	| [$1dbc: ld   a,(iy+$00)]
	sub.b	#0x0D,d0                         	| [$1dbf: sub  $0D]
	move.b	d0,d1                           	| [$1dc1: ld   b,a]
	addq.b	#0x04,d0                        	| [$1dc2: add  a,$04]
	move.b	d0,d2                           	| [$1dc4: ld   c,a]
* collision with wagon arriving by the right
	jbsr	l_1dde                            	| [$1dc5: call $1DDE]
	move.b	d0,player_death_flag_6025       	| [$1dc8: ld   (player_death_flag_6025),a]
	cmp.b	#0x01,d0                         	| [$1dcb: cp   $01]
	bne.b	0f
	rts                                    	| [$1dcd: ret  z]
0:
	move.b	(0x00,a3),d0                    	| [$1dce: ld   a,(iy+$00)]
	add.b	#0x0A,d0                         	| [$1dd1: add  a,$0A]
	move.b	d0,d1                           	| [$1dd3: ld   b,a]
	addq.b	#0x04,d0                        	| [$1dd4: add  a,$04]
	move.b	d0,d2                           	| [$1dd6: ld   c,a]
* collision with wagon arriving by the left
	jbsr	l_1dde                            	| [$1dd7: call $1DDE]
	move.b	d0,player_death_flag_6025       	| [$1dda: ld   (player_death_flag_6025),a]
	rts                                    	| [$1ddd: ret]

l_1dde:
	move.b	(0x00,a2),d0                    	| [$1dde: ld   a,(ix+$00)]
	cmp.b	d1,d0                            	| [$1de1: cp   b]
	jcs	l_1dea                             	| [$1de2: jr   c,$1DEA]
	cmp.b	d2,d0                            	| [$1de4: cp   c]
	jcc	l_1dea                             	| [$1de5: jr   nc,$1DEA]
* collision with wagon
	move.b	#0x01,d0                        	| [$1de7: ld   a,$01]
	rts                                    	| [$1de9: ret]
* no collision
l_1dea:
	clr.b	d0                               	| [$1dea: xor  a]
	rts                                    	| [$1deb: ret]


display_player_ids_and_credit_1dec:
	* display PLAYER 1
	lea	game_mem+0x5680,a1                      	| [$1dec: ld   de,$5680]
	move.w	#0x93A0,d6                      	| [$1def: ld   hl,$93A0]
	jbsr	display_text_30F9                 	| [$1df2: call display_text_30F9]

	* display PLAYER 1 again
	lea	game_mem+0x5680,a1                      	| [$1df5: ld   de,$5680]
	move.w	#0x9120,d6                      	| [$1df8: ld   hl,$9120]
	jbsr	display_text_30F9                 	| [$1dfb: call display_text_30F9]
	* display BONUS
	lea	game_mem+0x5705,a1                      	| [$1dfe: ld   de,$5705]
	move.w	#0x9240,d6                      	| [$1e01: ld   hl,$9240]
	jbsr	display_text_30F9                 	| [$1e04: call display_text_30F9]
	* "2" for PLAYER 2
	move.b	#0x02,d0                        	| [$1e07: ld   a,$02]
	move.w	#0x9040,d6                      	| [$1e09: ld   hl,$9040]
	jbsr	osd_w_videoram                         	| [$1e0c: ld   (hl),a]
	* display CREDIT followed by number of credits
	lea	game_mem+0x5689,a1                      	| [$1e0d: ld   de,$5689]
	move.w	#0x919F,d6                      	| [$1e10: ld   hl,$919F]
	jbsr	display_text_30F9                 	| [$1e13: call display_text_30F9]
	move.b	unknown_6004,d0                 	| [$1e16: ld   a,(unknown_6004)]
	move.w	#0x909F,d6
	jbsr	osd_w_videoram                       	| [$1e19: ld   ($909F),a]
	move.b	unknown_6005,d0                 	| [$1e1c: ld   a,(unknown_6005)]
	move.w	#0x90BF,d6
	jbsr	osd_w_videoram                       	| [$1e1f: ld   ($90BF),a]

						| [$1e22: call $1E26] converted to fallthrough
						| [$1e25: ret]
l_1e26:
	move.b	#0x02,d0                        	| [$1e26: ld   a,$02]
	move.w	#0x9840,d6                      	| [$1e28: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605                            	| [$1e2b: call $5605]
	move.b	#0x08,d0                        	| [$1e2e: ld   a,$08]
	move.w	#0x985F,d6                      	| [$1e30: ld   hl,$985F]
	jbsr	write_attribute_on_line_5605                            	| [$1e33: call $5605]
	move.b	#0x05,d0                        	| [$1e36: ld   a,$05]
	move.w	#0x9841,d6                      	| [$1e38: ld   hl,$9841]
	jra	write_attribute_on_line_5605                            	| [$1e3b: call $5605]
	rts                                    	| [$1e3e: ret]

l_2018:
	lea	unknown_61BD,a1                	| [$2018: ld   de,unknown_61BD]
	moveq	#0x06,d1                        	| [$201b: ld   bc,$0006] 6
	jbsr	ldir                              	| [$201e: ldir]
	move.b	#0x01,d0                        	| [$2020: ld   a,$01]
	move.b	d0,unknown_61F3                 	| [$2022: ld   (unknown_61F3),a]
	rts                                    	| [$2025: ret]

l_2176:
	move.b	d3,d5                           	| [$2176: ld   h,d]
	move.b	d4,d6                           	| [$2177: ld   l,e]
	move.b	d3,dropped_bag_screen_address_61F6+1	| [$2178: ld   (dropped_bag_screen_address_61F6),hl]
	move.b	d4,dropped_bag_screen_address_61F6	| [$2178: ld   (dropped_bag_screen_address_61F6),hl]
	clr.b	d0                               	| [$217b: xor  a]
	move.b	d0,unknown_627E                 	| [$217c: ld   (unknown_627E),a]
	lea	player_struct_6580(pc),a2          	| [$217f: ld   ix,player_struct_6580]
	move.b	(0x04,a3),d0                    	| [$2183: ld   a,(iy+$04)]
	move.b	d0,(0x1c,a2)                    	| [$2186: ld   (ix+$1c),a]
	move.b	(0x05,a3),d0                    	| [$2189: ld   a,(iy+$05)]
	move.b	d0,(0x1d,a2)                    	| [$218c: ld   (ix+$1d),a]
	clr.b	d0                               	| [$218f: xor  a]
	move.b	d0,(0x00,a3)                    	| [$2190: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$2193: ld   (iy+$01),a]
	move.b	(0x04,a3),d0                    	| [$2196: ld   a,(iy+$04)]
	cmp.b	#0x37,d0                         	| [$2199: cp   $37]
	jne	l_21a2                             	| [$219b: jr   nz,$21A2]
	move.b	#0x01,d0                        	| [$219d: ld   a,$01]
	move.b	d0,(0x14,a3)                    	| [$219f: ld   (iy+$14),a]
l_21a2:
	move.b	#0x01,d0                        	| [$21a2: ld   a,$01]
	bsr		exx
	move.b	d0,(a4)                         	| [$21a5: ld   (bc),a]
	rts                                    	| [$21a6: ret]


l_21ba:
	lea	unknown_659C,a2                	| [$21ba: ld   ix,unknown_659C]
	move.b	player_screen_600D,d0           	| [$21be: ld   a,(player_screen_600D)]
	move.b	d0,screen_index_param_6098      	| [$21c1: ld   (screen_index_param_6098),a]
	jbsr	compute_logical_address_from_xy_558c                            	| [$21c4: call $558C]

	movem.w	d5/d6,-(sp)                        	| [$21c7: push hl]
	move.b	player_screen_600D,d0           	| [$21c8: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$21cb: ld   (iy+$02),a]
	jbsr	convert_logical_to_screen_address_222d                            	| [$21ce: call $222D]
												| [$21d1: ld   h,a]
												| [$21d2: xsor  a]
												| [$21d3: ld   a,l]
	sub.w	#0x22,d6							| [$21d4: sub  $22]
												| [$21d6: ld   l,a]
												| [$21d7: ld   a,h]
					
											| [$21d8: sbc  a,$00]
												| [$21da: ld   h,a]
												
	move.b	d6,(0x01,a3)                    	| [$21de: ld   (iy+$01),h]
	move.w	d6,d5
	lsr.w	#8,d5
	move.b	d5,(0x00,a3)                    	| [$21db: ld   (iy+$00),l]
	move.b	player_screen_600D,d0           	| [$21e1: ld   a,(player_screen_600D)]
	move.b	d0,(0x02,a3)                    	| [$21e4: ld   (iy+$02),a]
	movem.w	d1/d2,-(sp)                    	| [$21e7: push bc]
	jbsr	test_non_blocking_tiles_3c85                            	| [$21e8: call $3C85]
	move.b	d1,d0                           	| [$21eb: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$21ec: pop  bc]
	cmp.b	#0x00,d0                         	| [$21ed: cp   $00]
	jeq	l_3cb7                             	| [$21ef: jp   z,$3CB7]
	movem.w	(sp)+,d5/d6                        	| [$21f2: pop  hl]
	* probably reads the screen contents! debug this TODO
	move.b	(a0),d0                         	| [$21f3: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$21f4: cp   $E0]

	movem.l	a0,-(sp)                        	| [$21f6: push hl]
	jeq	l_3cb7                             	| [$21f7: jp   z,$3CB7]
	move.l	(sp)+,a0                        	| [$21fa: pop  hl]

	move.l	a0,-(sp)                        	| [$21fb: push hl]
	clr.b	d0                               	| [$21fc: xor  a]
	move.b	d6,d0                           	| [$21fd: ld   a,l]
	sub.b	#0x20,d0                         	| [$21fe: sub  $20]
	move.b	d5,d0                           	| [$2200: ld   a,h]
	clr.b	d7
	subx.b	d7,d0                        	| [$2201: sbc  a,$00]
	move.b	d0,d5                           	| [$2203: ld   h,a]
	move.l	(sp)+,a0                        	| [$2204: pop  hl]
	move.b	(a0),d0                         	| [$2205: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$2206: cp   $E0]
	bne.b	0f
	rts                                    	| [$2208: ret  z]
0:
	bsr		exx
	move.b	holds_barrow_61C7,d0                 	| [$220a: ld   a,(holds_barrow_61C7)]
	cmp.b	#0x01,d0                         	| [$220d: cp   $01]
	jne	l_2216                             	| [$220f: jr   nz,$2216]
	move.b	#0x28,d0                        	| [$2211: ld   a,$28]
	exg	d0,d7                              	| [$2213: ex   af,af']
	jra	l_2219                             	| [$2214: jr   $2219]
l_2216:
	move.b	#0x20,d0                        	| [$2216: ld   a,$20]
	exg	d0,d7                              	| [$2218: ex   af,af']
l_2219:
	clr.b	d0                               	| [$2219: xor  a]
	move.b	d0,(a4)                         	| [$221a: ld   (bc),a]
	move.b	(0x01,a3),d6                    	| [$221e: ld   h,(iy+$01)]
	lsl.w	#8,d6
	move.b	(0x00,a3),d6                    	| [$221b: ld   l,(iy+$00)]
	move.b	(0x06,a3),d0                    	| [$2221: ld   a,(iy+$06)]
	jbsr	l_3417                            	| [$2224: call $3417]
	st.b	d0                                	| [$2227: ld   a,$FF]
	move.b	d0,unknown_659F                 	| [$2229: ld   (unknown_659F),a]
	rts                                    	| [$222c: ret]

* < D0 character screen
* < D6 logical address
* > D6 adjusted screen address
convert_logical_to_screen_address_222d:
	cmp.b	#0x01,d0                         	| [$222d: cp   $01]
	jne	l_2235                             	| [$222f: jr   nz,$2235]
	move.w	d6,d0                           	| [$2231: ld   a,h]
	add.w	#0x5000,d0                         	| [$2232: add  a,$50]
	rts                                    	| [$2234: ret]
l_2235:
	cmp.b	#0x02,d0                         	| [$2235: cp   $02]
	jne	l_223d                             	| [$2237: jr   nz,$223D]
	move.w	d6,d0                           	| [$2239: ld   a,h]
	add.w	#0x4C00,d0                         	| [$223a: add  a,$4C]
	rts                                    	| [$223c: ret]
l_223d:
	move.w	d6,d0                           	| [$223d: ld   a,h]
	add.w	#0x4800,d0                         	| [$223e: add  a,$48]
	rts                                    	| [$2240: ret]

l_2241:
	lea	unknown_6156,a3                	| [$2241: ld   iy,unknown_6156]
	move.b	(0x00,a3),d0                    	| [$2245: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$2248: cp   $01]
	bne.b	0f
	rts                                    	| [$224a: ret  z]
0:
	move.b	guard_1_screen_6099,d0          	| [$224b: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$224e: ld   (screen_index_param_6098),a]

	move.l	a2,-(sp)                        	| [$2251: push ix]
	move.w	#0x500,d6                      	| [$2253: ld   hl,$0500]
	jbsr	add_to_score_5C90                 	| [$2256: call add_to_score_5C90]
	lea	game_mem+0x3F09,a0                      	| [$2259: ld   hl,$3F09]
	jbsr	l_2018                            	| [$225c: call $2018]
	move.l	(sp)+,a2                        	| [$225f: pop  ix]
	sub.l	a4,a4		| added to avoid issues
	jbsr	l_3dbe                            	| [$2261: call $3DBE]
	clr.b	d0                               	| [$2264: xor  a]
	move.b	d0,unknown_6057                 	| [$2265: ld   (unknown_6057),a]
	move.b	#0x21,d0                        	| [$2268: ld   a,$21]
	move.b	d0,guard_1_struct_6594          	| [$226a: ld   (guard_1_struct_6594),a]
	move.l	guard_1_screen_address_6038,a0	| [$226d: ld   hl,(guard_1_screen_address_6038)]
	lea	unknown_6037,a3                	| [$2270: ld   iy,unknown_6037]
	lea	guard_1_struct_6594,a2         	| [$2274: ld   ix,guard_1_struct_6594]
	jbra	l_2605                            	| [$2278: call $2605]
	rts                                    	| [$227b: ret]

l_2480:
	jra	l_29cb                             	| [$2480: jp   $29CB]
l_2483:
	jra	l_29dc                             	| [$2483: jp   $29DC]

l_2486:
	lea		stack_top_67F0,sp			| [ld   sp,stack_top_67F0]
	move.b	#0x3F,d0                        	| [$2489: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$248b: call $29EC]
	jbsr	clear_screen_2a00                            	| [$248e: call $2A00]
*	move.b	#0x01,d0                        	| [$2491: ld   a,$01]
*	move.b	d0,0xA003                       	| [$2493: ld   ($A003),a]
	lea	game_mem+0x3696,a0                      	| [$2496: ld   hl,$3696]
	lea	unknown_6217,a1                	| [$2499: ld   de,unknown_6217]
										| [$249c: ld   bc,$0050] 80
	move.w	#0x50,d1                        	| [$249c: ld   bc,$0050] 80
	jbsr	ldir                              	| [$249f: ldir]
	jra	l_121c                             	| [$24a1: jp   $121C]
l_24a4:
	move.b	unknown_6210,d0                 	| [$24a4: ld   a,(unknown_6210)]
	cmp.b	#0x01,d0                         	| [$24a7: cp   $01]
	jne	l_24e9                             	| [$24a9: jr   nz,$24E9]
	move.b	unknown_626D,d0                 	| [$24ab: ld   a,(unknown_626D)]
	cmp.b	#0x20,d0                         	| [$24ae: cp   $20]
	bcc.b	0f
	jbsr	l_24bd                            	| [$24b0: call c,$24BD]
0:
	cmp.b	#0x30,d0                         	| [$24b3: cp   $30]
	bcc.b	0f
	jbsr	l_24f2                            	| [$24b5: call c,$24F2]
0:
	clr.b	d0                               	| [$24b8: xor  a]
	move.b	d0,unknown_626D                 	| [$24b9: ld   (unknown_626D),a]
	rts                                    	| [$24bc: ret]
l_24bd:
	move.b	unknown_626E,d0                 	| [$24bd: ld   a,(unknown_626E)]
	cmp.b	#0x01,d0                         	| [$24c0: cp   $01]
	jeq	l_24d7                             	| [$24c2: jr   z,$24D7]
	jbsr	get_XUP_screen_address_2501                            	| [$24c4: call $2501]
	jeq	l_24d9                             	| [$24c7: jr   z,$24D9]
	* display PLAYER 1
	lea	game_mem+0x575A,a1                      	| [$24c9: ld   de,$575A]
	jbsr	display_text_30F9                            	| [$24cc: call $30F9]
	jbsr	l_24e9                            	| [$24cf: call $24E9]
	move.b	#0x01,d0                        	| [$24d2: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$24d4: ld   (unknown_626E),a]
l_24d7:
	move.w	(sp)+,d0                        	| [$24d7: pop  af]
	rts                                    	| [$24d8: ret]
l_24d9:
	* display PLAYER2
	lea	game_mem+0x5763,a1                      	| [$24d9: ld   de,$5763]
	jbsr	display_text_30F9                            	| [$24dc: call $30F9]
	jbsr	l_24e9                            	| [$24df: call $24E9]
	move.b	#0x01,d0                        	| [$24e2: ld   a,$01]
	move.b	d0,unknown_626E                 	| [$24e4: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$24e7: pop  af]
	rts                                    	| [$24e8: ret]
l_24e9:
	move.b	#0x02,d0                        	| [$24e9: ld   a,$02]
	move.w	#0x9840,d6                      	| [$24eb: ld   hl,$9840]
	jbsr	write_attribute_on_line_5605                            	| [$24ee: call $5605]
	rts                                    	| [$24f1: ret]
l_24f2:
	jbsr	get_XUP_screen_address_2501                            	| [$24f2: call $2501]
	lea	game_mem+0x576C,a1                      	| [$24f5: ld   de,$576C]
	jbsr	display_text_30F9                            	| [$24f8: call $30F9]
	clr.b	d0                               	| [$24fb: xor  a]
	move.b	d0,unknown_626E                 	| [$24fc: ld   (unknown_626E),a]
	move.w	(sp)+,d0                        	| [$24ff: pop  af]
	rts                                    	| [$2500: ret]
get_XUP_screen_address_2501:
	move.b	current_player_617C,d0          	| [$2501: ld   a,(current_player_617C)]
	move.w	#0x93A0,d6                     	| [$2504: ld   hl,$93A0]
	cmp.b	#0x01,d0                         	| [$2507: cp   $01]
	beq.b	0f
	rts                                    	| [$2509: ret  nz]
0:
	move.w	#0x9120,d6                     	| [$250a: ld   hl,$9120]
	rts                                    	| [$250d: ret]
	
l_2605:
	jbsr	l_2640                            	| [$2605: call $2640]
	move.b	d1,d0                           	| [$2608: ld   a,b]
	move.b	d0,unknown_600C                 	| [$2609: ld   (unknown_600C),a]
	                         	| [$260c: cp   $00]
	bne.b	0f
	rts                                    	| [$260e: ret  z]
0:
	move.b	(0x00,a3),d0                    	| [$260f: ld   a,(iy+$00)]
	cmp.b	#0x01,d0                         	| [$2612: cp   $01]
	bne.b	0f
	rts                                    	| [$2614: ret  z]
0:
	move.b	(a0),d0                         	| [$2615: ld   a,(hl)]
	move.b	d0,d2                           	| [$2616: ld   c,a]
	lea	game_mem+0x25F4,a1                      	| [$2617: ld   de,$25F4]
	move.b	#0x08,d1                        	| [$261a: ld   b,$08]
l_261c:
	move.b	(a1),d0                         	| [$261c: ld   a,(de)]
	cmp.b	d2,d0                            	| [$261d: cp   c]
	bne.b	0f
	rts                                    	| [$261e: ret  z]
0:
	addq.w	#1,a1                           	| [$261f: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_261c                             	| [$2620: djnz $261C]
	move.b	unknown_600C,d0                 	| [$2622: ld   a,(unknown_600C)]
	cmp.b	#0x05,d0                         	| [$2625: cp   $05]
	jcc	l_2632                             	| [$2627: jr   nc,$2632]
	move.b	d0,d1                           	| [$2629: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$262a: ld   a,(ix+$03)]
	sub.b	d1,d0                            	| [$262d: sub  b]
	move.b	d0,(0x03,a2)                    	| [$262e: ld   (ix+$03),a]
	rts                                    	| [$2631: ret]
l_2632:
	not.b	d0                               	| [$2632: cpl]
	and.b	#0x07,d0                         	| [$2633: and  $07]
	addq.b	#0x01,d0                        	| [$2635: add  a,$01]
	move.b	d0,d1                           	| [$2637: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$2638: ld   a,(ix+$03)]
	add.b	d1,d0                            	| [$263b: add  a,b]
	move.b	d0,(0x03,a2)                    	| [$263c: ld   (ix+$03),a]
	rts                                    	| [$263f: ret]
l_2640:
	move.b	(0x03,a2),d0                    	| [$2640: ld   a,(ix+$03)]
	rol.b	#5,d0                            	| [$2643: rlc  a] * 5
	clr.b	d1                               	| [$264d: ld   b,$00]
	CLEAR_XC_FLAG
	roxl.b	#1,d0                            	| [$264f: rlc  a]
	roxl.b	#1,d1                           	| [$2651: rl   b]
 	roxl.b	#1,d0                            	| [$2653: rlc  a]
	roxl.b	#1,d1                           	| [$2655: rl   b]
	roxl.b	#1,d0                            	| [$2657: rlc  a]
	roxl.b	#1,d1                           	| [$2659: rl   b]
	jbsr	l_2923                            	| [$265b: call $2923]
	rts                                    	| [$265e: ret]

l_2923:
	move.b	player_screen_600D,d0           	| [$2923: ld   a,(player_screen_600D)]
	cmp.b	#0x03,d0                         	| [$2926: cp   $03]
	beq.b	0f
	rts                                    	| [$2928: ret  nz]
0:
	move.b	guard_1_y_6597,d0               	| [$2929: ld   a,(guard_1_y_6597)]
	cmp.b	#0x28,d0                         	| [$292c: cp   $28]
	beq.b	0f
	rts                                    	| [$292e: ret  nz]
0:

	move.l	a2,-(sp)                        	| [$292f: push ix]

	move.l	a0,-(sp)                        	| [$2931: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2932: push de]
	move.l	a1,-(sp)                        	| [$2932: push de]
	lea	game_mem+0x570C,a2                      	| [$2933: ld   ix,$570C]
	move.b	(0x00,a2),d0                    	| [$2937: ld   a,(ix+$00)]
	lea	game_mem+0x2994,a0                      	| [$293a: ld   hl,$2994]
	cmp.b	(a0),d0                          	| [$293d: cp   (hl)]
	beq.b	0f
	jbsr	l_2946                            	| [$293e: call nz,$2946]
0:
	move.l	(sp)+,a1                        	| [$2941: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$2941: pop  de]
	move.l	(sp)+,a0                        	| [$2942: pop  hl]
	move.l	(sp)+,a2                        	| [$2943: pop  ix]
	rts                                    	| [$2945: ret]
l_2946:
	lea		game_mem+0x29A9,a1                      	| [$2946: ld   de,$29A9]
	move.w	#0x92E2,d6                      	| [$2949: ld   hl,$92E2]
	movem.w	d1/d2,-(sp)                    	| [$294c: push bc]
	move.w	d0,-(sp)                        	| [$294d: push af]
	move.b	#0x07,d0                        	| [$294e: ld   a,$07]
	exg	d0,d7                              	| [$2950: ex   af,af']
	jbsr	write_text_55f0                   	| [$2951: call write_text_55f0]
	move.w	(sp)+,d0                        	| [$2954: pop  af]

	movem.w	(sp)+,d1/d2                    	| [$2955: pop  bc]
	rts                                    	| [$2956: ret]


write_text_29bc:
	movem.w	d1,-(sp)                    	| [$29bc: push bc]
	move.w	#-0x20,d1                        	| [$29bd: ld   bc,$FFE0] 65504
	jbsr	osd_w_videoram                         	| [$29c0: ld   (hl),a]
	add.w	d1,a0                            	| [$29c1: add  hl,bc]

	movem.w	(sp)+,d1                    	| [$29c2: pop  bc]
	subq.b	#1,d1                           	| [...]
	jne	write_text_29bc                             	| [$29c3: djnz $29BC]
	rts                                    	| [$29c5: ret]
l_29c6:
	move.b	d0,(a0)                         	| [$29c6: ld   (hl),a]
	addq.w	#1,a0                           	| [$29c7: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_29c6                             	| [$29c8: djnz $29C6]
	rts                                    	| [$29ca: ret]

l_29cb:
	move.b	#0x08,d1                        	| [$29cb: ld   b,$08]
	* clear ram
	lea	number_of_credits_6000,a0      	| [$29cd: ld   hl,number_of_credits_6000]
l_29d0:
	clr.b	d0                               	| [$29d0: xor  a]
l_29d1:
	move.b	d0,d2                           	| [$29d1: ld   c,a]
l_29d2:
	move.b	d0,(a0)+                         	| [$29d2: ld   (hl),a]
											| [$29d3: inc  hl]
	subq.b	#1,d2                           	| [$29d4: dec  c]
	jne	l_29d2                             	| [$29d5: jr   nz,$29D2]
	subq.b	#1,d1                           	| [...]
	jne	l_29d1                             	| [$29d7: djnz $29D1]
	jra	l_2483                             	| [$29d9: jp   $2483]

l_29dc:
	move.b	#0x08,d1                        	| [$29dc: ld   b,$08]
	lea	number_of_credits_6000,a0      	| [$29de: ld   hl,number_of_credits_6000]
l_29e1:
	move.b	d0,d2                           	| [$29e1: ld   c,a]
l_29e2:
	move.b	d0,(a0)                         	| [$29e2: ld   (hl),a]
	addq.w	#1,a0                           	| [$29e3: inc  hl]
	subq.b	#1,d2                           	| [$29e4: dec  c]
	jne	l_29e2                             	| [$29e5: jr   nz,$29E2]
	subq.b	#1,d1                           	| [...]
	jne	l_29e1                             	| [$29e7: djnz $29E1]
	jra	l_2486                             	| [$29e9: jp   $2486]
	
change_attribute_everywhere_29ec:
	* set all attributes to passed d0
	move.b	#0x08,d1                        	| [$29ec: ld   b,$08]
	move.w	#0x9800,d6                      	| [$29ee: ld   hl,$9800]
l_29f1:
	clr.b	d2                               	| [$29f1: ld   c,$00]
l_29f3:
	jbsr	osd_w_colorram                         	| [$29f3: ld   (hl),a]
	addq.w	#1,d6                           	| [$29f4: inc  hl]
	* kick watchdog
												| [$29f5: push af]
												| [$29f6: ld   a,(watchdog_reset_B800)]
												| [$29f9: pop  af]
	subq.b	#1,d2                           	| [$29fa: dec  c]
	jne	l_29f3                             	| [$29fb: jr   nz,$29F3]
	subq.b	#1,d1                           	| [...]
	jne	l_29f1                             	| [$29fd: djnz $29F1]
	rts                                    	| [$29ff: ret]
	
	
clear_screen_2a00:
	move.b	#0x04,d1                        	| [$2a00: ld   b,$04]
	move.b	#0xE0,d0                        	| [$2a02: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$2a04: ld   hl,$9000]
l_2a07:
	clr.b	d2                               	| [$2a07: ld   c,$00]
l_2a09:
	jbsr	osd_w_videoram                         	| [$2a09: ld   (hl),a]
	addq.w	#1,d6									| [$2a0a: inc  hl]
												| [$2a0b: push af]
												| [$2a0c: ld   a,(watchdog_reset_B800)]
												| [$2a0f: pop  af]
	subq.b	#1,d2                           	| [$2a10: dec  c]
	jne	l_2a09                             	| [$2a11: jr   nz,$2A09]
	subq.b	#1,d1                           	| [...]
	jne	l_2a07                             	| [$2a13: djnz $2A07]
	rts                                    	| [$2a15: ret]
l_2a16:
	move.b	#0xE0,d0                        	| [$2a16: ld   a,$E0]
												| [$2a18: ld   a,$E0]
	move.w	#0x93E4,d6                      	| [$2a1a: ld   hl,$93E4]
	move.b	#0x1B,d1                        	| [$2a1d: ld   b,$1B]
l_2a1f:

	move.w	d6,-(sp)                        	| [$2a1f: push hl]
	movem.w	d1/d2,-(sp)                    	| [$2a20: push bc]
	move.b	#0x20,d1                        	| [$2a21: ld   b,$20]
	jbsr	write_text_29bc                            	| [$2a23: call $29BC]

	movem.w	(sp)+,d1/d2                    	| [$2a26: pop  bc]
	move.w	(sp)+,d6                        	| [$2a27: pop  hl]
	addq.w	#1,d6                           	| [$2a28: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2a1f                             	| [$2a29: djnz $2A1F]
	rts                                    	| [$2a2b: ret]


l_2a2c:
*	clr.b	d0                               	| [$2a2c: ld   a,$00]
*	move.b	d0,0xA003                       	| [$2a2e: ld   ($A003),a]
	move.b	#0x04,d1                        	| [$2a31: ld   b,$04]
	move.b	#0xE0,d0                        	| [$2a33: ld   a,$E0]
	move.w	#0x9000,d6                      	| [$2a35: ld   hl,$9000]
	jbsr	l_2a07                            	| [$2a38: call $2A07]
	move.b	#0x3F,d0                        	| [$2a3b: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$2a3d: call $29EC]
	move.b	unknown_628C,d0                       	| [$2a40: ld   a,($628C)]
	cmp.b	#0x01,d0                         	| [$2a43: cp   $01]
	jeq	l_2a50                             	| [$2a45: jr   z,$2A50]
	lea	game_mem+0x56C3,a1                      	| [$2a47: ld   de,$56C3]
	* write "PUSH START BUTTON" to screen
	move.w	#0x93AF,d6                      	| [$2a4a: ld   hl,$93AF]
	jbsr	display_text_30F9                            	| [$2a4d: call $30F9]
l_2a50:
	move.b	#0x01,d1                        	| [$2a50: ld   b,$01]
	lea	player_struct_6580,a0          	| [$2a52: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$2a55: ld   a,$00]
	jbsr	l_29f1                            	| [$2a57: call $29F1]
	jbsr	l_3110                            	| [$2a5a: call $3110]
	* video enable
*	move.b	#0x01,d0                        	| [$2a5d: ld   a,$01]
*	move.b	d0,0xA003                       	| [$2a5f: ld   ($A003),a]
	rts                                    	| [$2a62: ret]
l_2a63:
	lea	unknown_6176,a2                      	| [$2a63: ld   ix,$6176]
	move.b	#0x07,d1                        	| [$2a67: ld   b,$07]
	clr.b	d0                               	| [$2a69: xor  a]
l_2a6a:
	nop                                    	| [$2a6a: nop]
	addq.w	#1,a2                           	| [$2a6b: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_2a6a                             	| [$2a6d: djnz $2A6A]
	rts                                    	| [$2a6f: ret]
l_2a70:
	* cocktail mode?
*	move.b	unknown_6163,d0                       	| [$2a70: ld   a,($6163)]
*	and.b	#0x80,d0                         	| [$2a73: and  $80]
*	                         	| [$2a75: cp   $00]
*	jeq	l_2a85                             	| [$2a77: jr   z,$2A85]
*	move.b	current_player_617C,d0          	| [$2a79: ld   a,(current_player_617C)]
*	not.b	d0                               	| [$2a7c: cpl]
*	and.b	#0x01,d0                         	| [$2a7d: and  $01]
*	move.b	d0,0xA001                       	| [$2a7f: ld   ($A001),a]
*	move.b	d0,0xA002                       	| [$2a82: ld   ($A002),a]
*l_2a85:
	lea	bags_coordinates_609C,a2                      	| [$2a85: ld   ix,$609C]
	lea	unknown_617F,a3                      	| [$2a89: ld   iy,$617F]
	move.b	#0x36,d1                        	| [$2a8d: ld   b,$36]
	jbsr	l_2abc                            	| [$2a8f: call $2ABC]
	lea	unknown_61C4,a2                      	| [$2a92: ld   ix,$61C4]
	lea	unknown_61FA,a3                      	| [$2a96: ld   iy,$61FA]
	move.b	#0x03,d1                        	| [$2a9a: ld   b,$03]
	jbsr	l_2abc                            	| [$2a9c: call $2ABC]
	move.b	lives_6056,d0                   	| [$2a9f: ld   a,(lives_6056)]
	move.w	d0,-(sp)                        	| [$2aa2: push af]
	move.b	unknown_617E,d0                       	| [$2aa3: ld   a,($617E)]
	move.b	d0,lives_6056                   	| [$2aa6: ld   (lives_6056),a]
	move.w	(sp)+,d0                        	| [$2aa9: pop  af]
	move.b	d0,unknown_617E                       	| [$2aaa: ld   ($617E),a]
	move.b	unknown_6290,d0                       	| [$2aad: ld   a,($6290)]
	move.w	d0,-(sp)                        	| [$2ab0: push af]
	move.b	unknown_627D,d0                       	| [$2ab1: ld   a,($627D)]
	move.b	d0,unknown_6290                       	| [$2ab4: ld   ($6290),a]
	move.w	(sp)+,d0                        	| [$2ab7: pop  af]
	move.b	d0,unknown_627D                       	| [$2ab8: ld   ($627D),a]
	rts                                    	| [$2abb: ret]
l_2abc:
	move.b	(0x00,a2),d0                    	| [$2abc: ld   a,(ix+$00)]
	move.w	d0,-(sp)                        	| [$2abf: push af]
	move.b	(0x00,a3),d0                    	| [$2ac0: ld   a,(iy+$00)]
	move.b	d0,(0x00,a2)                    	| [$2ac3: ld   (ix+$00),a]
	move.w	(sp)+,d0                        	| [$2ac6: pop  af]
	move.b	d0,(0x00,a3)                    	| [$2ac7: ld   (iy+$00),a]
	addq.w	#1,a2                           	| [$2aca: inc  ix]
	addq.w	#1,a3                           	| [$2acc: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_2abc                             	| [$2ace: djnz $2ABC]
	rts                                    	| [$2ad0: ret]
	

guard_collision_with_pick_2AD1:
	move.b	#0x0B,d2                        	| [$2ad1: ld   c,$0B]
	move.b	#0x07,d1                        	| [$2ad3: ld   b,$07]
l_2ad5:
	move.b	(0x03,a2),d0                    	| [$2ad5: ld   a,(ix+$03)]  guard_x_struct + 3 = guard y
	addq.b	#0x03,d0                        	| [$2ad8: add  a,$03]
	sub.b	d2,d0                            	| [$2ada: sub  c]
	cmp.b	(0x03,a3),d0                     	| [$2adb: cp   (iy+$03)]
	jeq	l_2ae6                             	| [$2ade: jr   z,$2AE6]
	addq.b	#1,d2                           	| [$2ae0: inc  c]
	subq.b	#1,d1                           	| [...]
	jne	l_2ad5                             	| [$2ae1: djnz $2AD5]
l_2ae3:
	clr.b	d0                               	| [$2ae3: ld   a,$00]
	rts                                    	| [$2ae5: ret]
l_2ae6:
	move.b	(0x02,a2),d0                    	| [$2ae6: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$2ae9: add  a,$08]
	cmp.b	(0x02,a3),d0                     	| [$2aeb: cp   (iy+$02)]
	jcs	l_2ae3                             	| [$2aee: jr   c,$2AE3]
	sub.b	#0x0F,d0                         	| [$2af0: sub  $0F]
	cmp.b	(0x02,a3),d0                     	| [$2af2: cp   (iy+$02)]
	jcc	l_2ae3                             	| [$2af5: jr   nc,$2AE3]
	move.b	#0x01,d0                        	| [$2af7: ld   a,$01]
	rts                                    	| [$2af9: ret]


compute_guard_speed_from_dipsw_2C4D:
	move.b	unknown_61ED,d0                 	| [$2c4d: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$2c50: cp   $01]
	jeq	l_2c78                             	| [$2c54: jr   z,$2C78]
	clr.b	d0                               	| [$2c52: ld   a,$00]
	move.b	score_ten_thousands_6178,d0     	| [$2c56: ld   a,(score_ten_thousands_6178)]
	move.b	d0,d1                           	| [$2c59: ld   b,a]
	move.b	current_player_617C,d0          	| [$2c5a: ld   a,(current_player_617C)]
	cmp.b	#0x01,d0                         	| [$2c5d: cp   $01]
	jne	l_2c65                             	| [$2c5f: jr   nz,$2C65]
	move.b	unknown_617B,d0                 	| [$2c61: ld   a,(unknown_617B)]
	move.b	d0,d1                           	| [$2c64: ld   b,a]
l_2c65:
	moveq	#0,d0
	*jbsr	osd_read_dipswitches
	*move.b	dip_switch_B000,d0              	| [$2c65: ld   a,(dip_switch_B000)]
	roxr.b	#3,d0                           	| [$2c68: rr   a] * 3
	not.b	d0                               	| [$2c6e: cpl]
	and.b	#0x03,d0                         	| [$2c6f: and  $03]
	add.b	d1,d0                            	| [$2c71: add  a,b] difficulty level
	clr.b	d1                               	| [$2c72: ld   b,$00]
	jbsr	compute_guard_speed_2C7C          	| [$2c74: call compute_guard_speed_2C7C]
	move.b	d1,d0                           	| [$2c77: ld   a,b]
l_2c78:
	clr.b	d0                               	| [$2c52: ld   a,$00]
	move.b	d0,guard_speed_6164             	| [$2c78: ld   (guard_speed_6164),a]
	rts                                    	| [$2c7b: ret]

 * depending on score & difficulty level, return guard speed in b
 * easy:	0->10000 :	0
 * easy:	10000->20000 :	2
 * easy:	20000-30000:	4
 * easy:	30000->40000 :	5
 * easy:	after 40000 :	 9
 * easy:	after 50000 :	 10
 * medium:	0->10000 :	2
 * medium:	10000->20000:	 4
 * medium:	20000->30000 :	5
 * medium:	30000->40000 :	9
 * medium:	after 40000:	10

compute_guard_speed_2C7C:
	cmp.b	#0x01,d0                         	| [$2c7c: cp   $01]
	bcc.b	0f
	rts                                    	| [$2c7e: ret  c]
0:
	move.b	#0x02,d1                        	| [$2c7f: ld   b,$02]
	cmp.b	#0x02,d0                         	| [$2c81: cp   $02]
	bcc.b	0f
	rts                                    	| [$2c83: ret  c]
0:
	move.b	#0x04,d1                        	| [$2c84: ld   b,$04]
	cmp.b	#0x03,d0                         	| [$2c86: cp   $03]
	bcc.b	0f
	rts                                    	| [$2c88: ret  c]
0:
	move.b	#0x05,d1                        	| [$2c89: ld   b,$05]
	cmp.b	#0x04,d0                         	| [$2c8b: cp   $04]
	bcc.b	0f
	rts                                    	| [$2c8d: ret  c]
0:
	move.b	#0x09,d1                        	| [$2c8e: ld   b,$09]
	cmp.b	#0x05,d0                         	| [$2c90: cp   $05]
	bcc.b	0f
	rts                                    	| [$2c92: ret  c]
0:
	move.b	#0x0A,d1                        	| [$2c93: ld   b,$0A]
	rts                                    	| [$2c95: ret]

l_2c96:
	lea	guard_1_struct_6594,a2         	| [$2c96: ld   ix,guard_1_struct_6594]
	lea	unknown_659C,a3                	| [$2c9a: ld   iy,unknown_659C]
	jbsr	guard_collision_with_pick_2AD1    	| [$2c9e: call guard_collision_with_pick_2AD1]
	cmp.b	#0x01,d0                         	| [$2ca1: cp   $01]
	jne	l_2cb4                             	| [$2ca3: jr   nz,$2CB4]
	move.b	has_bag_6158,d0                 	| [$2ca5: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$2ca8: cp   $01]
	jeq	l_2cb4                             	| [$2caa: jr   z,$2CB4]
	move.b	#0x01,d0                        	| [$2cac: ld   a,$01]
	move.b	d0,unknown_6037                 	| [$2cae: ld   (unknown_6037),a]
	move.b	d0,unknown_6208                 	| [$2cb1: ld   (unknown_6208),a]
l_2cb4:
	lea	guard_2_struct_6598,a2         	| [$2cb4: ld   ix,guard_2_struct_6598]
	lea	unknown_659C,a3                	| [$2cb8: ld   iy,unknown_659C]
	jbsr	guard_collision_with_pick_2AD1    	| [$2cbc: call guard_collision_with_pick_2AD1]
	cmp.b	#0x01,d0                         	| [$2cbf: cp   $01]
	jne	l_2cd2                             	| [$2cc1: jr   nz,$2CD2]
	move.b	has_bag_6158,d0                 	| [$2cc3: ld   a,(has_bag_6158)]
	cmp.b	#0x01,d0                         	| [$2cc6: cp   $01]
	jeq	l_2cd2                             	| [$2cc8: jr   z,$2CD2]
	move.b	#0x01,d0                        	| [$2cca: ld   a,$01]
	move.b	d0,unknown_6077                 	| [$2ccc: ld   (unknown_6077),a]
	move.b	d0,unknown_6209                 	| [$2ccf: ld   (unknown_6209),a]
l_2cd2:
	rts                                    	| [$2cd2: ret]

* < A1: text
display_text_30F9:
*	move.w	d0,-(sp)                        	| [$30f9: push af]
*	move.b	dip_switch_B000,d0              	| [$30fa: ld   a,(dip_switch_B000)]
*	and.b	#0x20,d0                         	| [$30fd: and  $20]
*	cmp.b	#0x20,d0                         	| [$30ff: cp   $20]
*	jeq	l_310b                             	| [$3101: jr   z,$310B]
*
*	move.l	a0,-(sp)                        	| [$3103: push hl]
*	exg	a1,a0                              	| [$3104: ex   de,hl]
*	                      	| [$3105: ld   de,$0196]
*	add.w	#0x196,a0                            	| [$3108: add  hl,de]
*	exg	a1,a0                              	| [$3109: ex   de,hl]
*	move.l	(sp)+,a0                        	| [$310a: pop  hl]
*l_310b:
*	move.w	(sp)+,d0                        	| [$310b: pop  af]
	jra		display_text_55d9                            	| [$310c: call $55D9]
	rts                                    	| [$310f: ret]	
l_3110:
	lea	game_mem+0x575A,a1                      	| [$3110: ld   de,$575A]
	move.w	#0x93A0,d6                      	| [$3113: ld   hl,$93A0]
	jbsr	display_text_30F9                 	| [$3116: call display_text_30F9]
	lea	game_mem+0x5763,a1                      	| [$3119: ld   de,$5763]
	move.w	#0x9120,d6                      	| [$311c: ld   hl,$9120]
	jbsr	display_text_30F9                 	| [$311f: call display_text_30F9]
	rts                                    	| [$3122: ret]

l_3417:
	movem.w	d1/d2,-(sp)                    	| [$3417: push bc]
	move.b	d0,d1                           	| [$3418: ld   b,a]
	move.b	d5,d0                           	| [$3419: ld   a,h]
	cmp.b	#0x00,d0                         	| [$341a: cp   $00]
	move.b	d1,d0                           	| [$341c: ld   a,b]

	movem.w	(sp)+,d1/d2                    	| [$341d: pop  bc]
	bne.b	0f
	rts                                    	| [$341e: ret  z]
0:
	move.w	d0,-(sp)                        	| [$341f: push af]
* read screen tile
	move.b	(a0),d0                         	| [$3420: ld   a,(hl)]
	cmp.b	#0xD0,d0                         	| [$3421: cp   $D0]
	jeq	l_342b                             	| [$3423: jr   z,$342B]
	move.w	(sp)+,d0                        	| [$3425: pop  af]
	jbsr	l_3441                            	| [$3426: call $3441]
	jra	l_342c                             	| [$3429: jr   $342C]
l_342b:
	move.w	(sp)+,d0                        	| [$342b: pop  af]
l_342c:
	addq.w	#1,a0                           	| [$342c: inc  hl]
	addq.b	#1,d0                           	| [$342d: inc  a]
	jbsr	l_3441                            	| [$342e: call $3441]
	movem.w	d3/d4,-(sp)                    	| [$3431: push de]
	move.w	#0x001F,d3                      	| [$3432: ld   de,$001F] 31
	add.w	d3,a0                            	| [$3435: add  hl,de]
	movem.w	(sp)+,d3/d4                    	| [$3436: pop  de]
	addq.b	#1,d0                           	| [$3437: inc  a]
	jbsr	l_3441                            	| [$3438: call $3441]
	addq.w	#1,a0                           	| [$343b: inc  hl]
	addq.b	#1,d0                           	| [$343c: inc  a]
	jbsr	l_3441                            	| [$343d: call $3441]
	rts                                    	| [$3440: ret]
l_3441:
	move.b	d0,(a0)                         	| [$3441: ld   (hl),a]

	move.l	a0,-(sp)                        	| [$3442: push hl]
	move.w	d0,-(sp)                        	| [$3443: push af]
	move.b	d5,d0                           	| [$3444: ld   a,h]
	add.b	#0x08,d0                         	| [$3445: add  a,$08]
	move.b	d0,d5                           	| [$3447: ld   h,a]
	exg	d0,d7                              	| [$3448: ex   af,af']
	move.b	d0,(a0)                         	| [$3449: ld   (hl),a]
	exg	d0,d7                              	| [$344a: ex   af,af']
	move.w	(sp)+,d0                        	| [$344b: pop  af]
	move.l	(sp)+,a0                        	| [$344c: pop  hl]
	rts                                    	| [$344d: ret]

l_344e:
	move.b	unknown_615E,d0                 	| [$344e: ld   a,(unknown_615E)]
	cmp.b	#0x01,d0                         	| [$3451: cp   $01]
	beq.b	0f
	rts                                    	| [$3453: ret  nz]
0:
	lea	guard_1_struct_6594,a2         	| [$3454: ld   ix,guard_1_struct_6594]
	jbsr	l_346d                            	| [$3458: call $346D]
	cmp.b	#0x01,d0                         	| [$345b: cp   $01]
	bne.b	0f
	jbsr	l_2241                            	| [$345d: call z,$2241]
0:
	lea	guard_2_struct_6598,a2         	| [$3460: ld   ix,guard_2_struct_6598]
	jbsr	l_346d                            	| [$3464: call $346D]
	cmp.b	#0x01,d0                         	| [$3467: cp   $01]
	bne.b	0f
	jbsr	l_227c                            	| [$3469: call z,$227C]
0:
	rts                                    	| [$346c: ret]


l_350e:
	jbsr	osd_r_videoram                         	| [$350e: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$350f: cp   $E0]
	jne	l_3536                             	| [$3511: jr   nz,$3536]
	move.b	player_screen_600D,d0           	| [$3513: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$3516: cp   b]
	jeq	l_3536                             	| [$3517: jr   z,$3536]
	move.b	d1,d0                           	| [$3519: ld   a,b]
	lea		unknown_6165,a4            	| [$351c: ld   bc,unknown_6165] None
	cmp.b	#0x02,d0                         	| [$351a: cp   $02]
	jeq	l_3526                             	| [$351f: jr   z,$3526]
											| [$3521: cp   $03] useless
	lea		unknown_6166,a4            	| [$3523: ld   bc,unknown_6166] None
l_3526:
	move.b	(a4),d0                         	| [$3526: ld   a,(bc)]
	cmp.b	#0x10,d0                         	| [$3527: cp   $10]
	bcc.b	0f
	rts                                    	| [$3529: ret  c]
0:
	exg	d0,d7                              	| [$352a: ex   af,af']
	tst.b	d0                         	| [$352b: cp   $00]
	jne	l_3532                             	| [$352d: jr   nz,$3532]
	move.b	(a4),d0                         	| [$352f: ld   a,(bc)]
	subq.b	#1,d0                           	| [$3530: dec  a]
	move.b	d0,(a4)                         	| [$3531: ld   (bc),a]
l_3532:
	move.b	(a1),d0                         	| [$3532: ld   a,(de)]
	subq.b	#1,d0                           	| [$3533: dec  a]
	move.b	d0,(a1)                         	| [$3534: ld   (de),a]
	rts                                    	| [$3535: ret]
l_3536:
	clr.b	d0                               	| [$3536: xor  a]
	move.b	d0,(a2)                    	| [$3537: ld   (ix+$00),a]
	move.b	d0,(a3)                    	| [$353a: ld   (iy+$00),a]
	rts                                    	| [$353d: ret]
l_353e:
	lea	unknown_61E7,a0                	| [$353e: ld   hl,unknown_61E7]
	move.b	(a0),d0                         	| [$3541: ld   a,(hl)]
	moveq	#1,d7
	sbcd	d7,d0                        	| [$3542: sub  $01 + daa]
	move.b	d0,(a0)+                         	| [$3545: ld   (hl),a]
												| [$3546: push af]
												| [$3547: inc  hl]
												| [$3548: pop  af]
	move.b	(a0),d0                         	| [$3549: ld   a,(hl)]
	clr.w	d7
	sbcd.b	d7,d0                        	| [$354a: sbc  a,$00]

	move.b	d0,(a0)                         	| [$354d: ld   (hl),a]
	rts                                    	| [$354e: ret]
	
set_bags_coordinates_354f:
	lea	bags_coordinates_609C,a1       	| [$354f: ld   de,bags_coordinates_609C]
	lea	game_mem+0x5C54,a0                      	| [$3552: ld   hl,$5C54]
	move.w	#0x3A,d1                        	| [$3555: ld   bc,$003A] 58
	jbsr	ldir                              	| [$3558: ldir]
	rts                                    	| [$355a: ret]

* shows title, guard chases bagman, bagman fights back
play_intro_3700:
	clr.b	d0                               	| [$3700: ld   a,$00]
	**move.b	d0,0xA003                       	| [$3702: ld   ($A003),a]
	jbsr	clear_screen_2a00                            	| [$3705: call $2A00]
	move.b	#0x3F,d0                        	| [$3708: ld   a,$3F]
	jbsr	change_attribute_everywhere_29ec                            	| [$370a: call $29EC]
	jbsr	display_player_ids_and_credit_1dec                            	| [$370d: call $1DEC]
	move.b	#0x01,d0                        	| [$3710: ld   a,$01]
	move.b	d0,player_screen_600D           	| [$3712: ld   (player_screen_600D),a]
	**move.b	d0,0xA003                       	| [$3715: ld   ($A003),a]
	move.b	d0,screen_index_param_6098      	| [$3718: ld   (screen_index_param_6098),a]
	move.b	d0,guard_1_screen_6099          	| [$371b: ld   (guard_1_screen_6099),a]
	move.b	d0,guard_2_screen_609A          	| [$371e: ld   (guard_2_screen_609A),a]
	clr.b	d0                               	| [$3721: xor  a]
	move.b	d0,unknown_6008                 	| [$3722: ld   (unknown_6008),a]
	move.b	d0,unknown_6037                 	| [$3725: ld   (unknown_6037),a]
	move.b	d0,fatal_fall_height_reached_604E                 	| [$3728: ld   (unknown_604E),a]
	move.b	d0,unknown_6077                 	| [$372b: ld   (unknown_6077),a]
	move.b	d0,elevator_y_current_screen_6587	| [$372e: ld   (elevator_y_current_screen_6587),a]
	move.b	d0,guard_2_x_659A               	| [$3731: ld   (guard_2_x_659A),a]
	move.b	d0,guard_2_y_659B               	| [$3734: ld   (guard_2_y_659B),a]
	move.b	d0,unknown_6159                 	| [$3737: ld   (unknown_6159),a]
	move.b	d0,has_pick_61CF                	| [$373a: ld   (has_pick_61CF),a]
	clr.w	pickaxe_timer_duration_61E0                 	| [$373d: ld   (pickaxe_timer_duration_61E0),a]
	                 	| [$3740: ld   (unknown_61E1),a]
	move.b	#0x01,d0                        	| [$3743: ld   a,$01]
	move.b	d0,unknown_61ED                 	| [$3745: ld   (unknown_61ED),a]
	jbsr	compute_guard_speed_from_dipsw_2C4D	| [$3748: call compute_guard_speed_from_dipsw_2C4D]

	* draw the line the characters are going to walk on
	move.w	#0x901A,d6                      	| [$374b: ld   hl,$901A]
	move.w	#0x0020,d3                      	| [$374e: ld   de,$0020] 32
	move.b	#0xF0,d0                        	| [$3751: ld   a,$F0]
	move.b	#0x20,d1                        	| [$3753: ld   b,$20]
l_3755:
	jbsr	osd_w_videoram                         	| [$3755: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$3756: push hl]
	move.w	d0,-(sp)                        	| [$3757: push af]
	                           	| [$3758: ld   a,h]
	add.w	#0x0800,d6                         	| [$3759: add  a,$08]
	                           	| [$375b: ld   h,a]
	move.b	#0x04,d0                        	| [$375c: ld   a,$04]
	jbsr	osd_w_colorram                         	| [$375e: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$375f: pop  af]
	move.w	(sp)+,d6                        	| [$3760: pop  hl]
	add.w	d3,d6                         	| [$3761: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3755                             	| [$3762: djnz $3755]
	jbsr	l_38d7                            	| [$3764: call $38D7]
	move.b	#0x01,d0                        	| [$3767: ld   a,$01]
	move.b	d0,gameplay_allowed_6054        	| [$3769: ld   (gameplay_allowed_6054),a]
	lea	player_struct_6580,a1          	| [$376c: ld   de,player_struct_6580]
	lea	game_mem+0x38EE,a0                      	| [$376f: ld   hl,$38EE]
	move.w	#0x04,d1                        	| [$3772: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3775: ldir]
	lea	unknown_659C,a1                	| [$3777: ld   de,unknown_659C]
	lea	game_mem+0x38F2,a0                      	| [$377a: ld   hl,$38F2]
	move.w	#0x04,d1                        	| [$377d: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3780: ldir]
	move.b	is_intermission_6274,d0                 	| [$3782: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$3785: cp   $01]
	* don't draw title & logo if intermission
	* (but same lousy animation!)
	jeq	l_3800                             	| [$3787: jp   z,$3800]
	* draw top of V=A logo
	lea	game_mem+0x4C00,a1                      	| [$378a: ld   de,$4C00]
	move.w	#0x9286,d6                      	| [$378d: ld   hl,$9286]
	* color 6, 2nd tile bank
	move.b	#0x16,d0                        	| [$3790: ld   a,$16]
	exg	d0,d7                              	| [$3792: ex   af,af']
	jbsr	write_text_55f0                            	| [$3793: call $55F0]
	* draw middle part of V=A logo
	lea	game_mem+0x4C0B,a1                      	| [$3796: ld   de,$4C0B]
	move.w	#0x9287,d6                      	| [$3799: ld   hl,$9287]
	move.b	#0x16,d0                        	| [$379c: ld   a,$16]
	exg	d0,d7                              	| [$379e: ex   af,af']
	jbsr	write_text_55f0                            	| [$379f: call $55F0]
	* draw bottom part of V=A logo
	lea	game_mem+0x4C16,a1                      	| [$37a2: ld   de,$4C16]
	move.w	#0x9288,d6                      	| [$37a5: ld   hl,$9288]
	move.b	#0x16,d0                        	| [$37a8: ld   a,$16]
	exg	d0,d7                              	| [$37aa: ex   af,af']
	jbsr	write_text_55f0                            	| [$37ab: call $55F0]
	* presents
	lea	game_mem+0x4C21,a1                      	| [$37ae: ld   de,$4C21]
	move.w	#0x926B,d6                      	| [$37b1: ld   hl,$926B]
	move.b	#0x13,d0                        	| [$37b4: ld   a,$13]
	exg	d0,d7                              	| [$37b6: ex   af,af']
	jbsr	write_text_55f0                            	| [$37b7: call $55F0]
	jbsr	osd_read_dipswitches            	| [$37ba: ld   a,(dip_switch_B000)]
	* language french or english
	and.b	#0x20,d0                         	| [$37bd: and  $20]
	cmp.b	#0x20,d0                         	| [$37bf: cp   $20]
	jne	l_37cd                             	| [$37c1: jr   nz,$37CD]
	* english: change last "E" of "PRESENTE" by "S"
	move.b	#0xE1,d0                        	| [$37c3: ld   a,$E1]
	move.b	d0,0x918B                       	| [$37c5: ld   ($918B),a]
	move.b	#0x13,d0                        	| [$37c8: ld   a,$13]
	move.b	d0,0x998B                       	| [$37ca: ld   ($998B),a]
l_37cd:
	* "BAGMAN title" (c) 1982
	lea	game_mem+0x4C2A,a1                      	| [$37cd: ld   de,$4C2A]
	move.w	#0x938E,d6                      	| [$37d0: ld   hl,$938E]
	move.b	#0x17,d0                        	| [$37d3: ld   a,$17]
	exg	d0,d7                              	| [$37d5: ex   af,af']
	jbsr	write_text_55f0                            	| [$37d6: call $55F0]
	lea	game_mem+0x4C45,a1                      	| [$37d9: ld   de,$4C45]
	move.w	#0x938F,d6                      	| [$37dc: ld   hl,$938F]
	move.b	#0x17,d0                        	| [$37df: ld   a,$17]
	exg	d0,d7                              	| [$37e1: ex   af,af']
	jbsr	write_text_55f0                            	| [$37e2: call $55F0]
	lea	game_mem+0x4C60,a1                      	| [$37e5: ld   de,$4C60]
	move.w	#0x9390,d6                      	| [$37e8: ld   hl,$9390]
	move.b	#0x17,d0                        	| [$37eb: ld   a,$17]
	exg	d0,d7                              	| [$37ed: ex   af,af']
	jbsr	write_text_55f0                            	| [$37ee: call $55F0]
	lea	game_mem+0x4C7B,a1                      	| [$37f1: ld   de,$4C7B]
	move.w	#0x9252,d6                      	| [$37f4: ld   hl,$9252]
	move.b	#0x12,d0                        	| [$37f7: ld   a,$12]
	exg	d0,d7                              	| [$37f9: ex   af,af']
	jbsr	write_text_55f0                            	| [$37fa: call $55F0]
*im   1
	**jbsr	rst_38                            	| [$37ff: rst  $38]
	jbsr	osd_break
l_3800:
	move.b	player_input_6026,d0            	| [$3800: ld   a,(player_input_6026)]
	or.b	#0x08,d0                          	| [$3803: or   $08]
	jbsr	osd_enable_vblank_interrupt			| [ei]
	move.b	d0,player_input_6026            	| [$3806: ld   (player_input_6026),a]
	* give barrow to player
	move.b	#0x01,d0                        	| [$3809: ld   a,$01]
	move.b	d0,holds_barrow_61C7                 	| [$380b: ld   (holds_barrow_61C7),a]
	jbsr	l_38d7                            	| [$380e: call $38D7]
	move.b	is_intermission_6274,d0                 	| [$3811: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$3814: cp   $01]
	jeq	l_3820                             	| [$3816: jr   z,$3820]
	move.b	#0x01,d0                        	| [$3818: ld   a,$01]
	move.b	d0,0xA001                       	| [$381a: ld   ($A001),a]
	move.b	d0,0xA002                       	| [$381d: ld   ($A002),a]
l_3820:
	move.b	player_x_6582,d0                	| [$3820: ld   a,(player_x_6582)]
	cmp.b	#0x20,d0                         	| [$3823: cp   $20]
	jne	l_3800                             	| [$3825: jr   nz,$3800]
l_3827:
	move.b	player_input_6026,d0            	| [$3827: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$382a: or   $10]
	move.b	d0,player_input_6026            	| [$382c: ld   (player_input_6026),a]
	jbsr	l_38d7                            	| [$382f: call $38D7]
	move.b	player_x_6582,d0                	| [$3832: ld   a,(player_x_6582)]
	cmp.b	#0x20,d0                         	| [$3835: cp   $20]
	jne	l_3827                             	| [$3837: jr   nz,$3827]
	lea	guard_1_struct_6594,a1         	| [$3839: ld   de,guard_1_struct_6594]
	lea	game_mem+0x38F6,a0                      	| [$383c: ld   hl,$38F6]
	moveq	#0x04,d1                        	| [$383f: ld   bc,$0004] 4
	jbsr	ldir                              	| [$3842: ldir]
l_3844:
	move.b	player_input_6026,d0            	| [$3844: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$3847: or   $10]
	move.b	d0,player_input_6026            	| [$3849: ld   (player_input_6026),a]
	move.b	#0x80,d0                        	| [$384c: ld   a,$80]
	move.b	d0,guard_2_direction_6027       	| [$384e: ld   (guard_2_direction_6027),a]
	jbsr	l_38d7                            	| [$3851: call $38D7]
	move.b	player_x_6582,d0                	| [$3854: ld   a,(player_x_6582)]
	cmp.b	#0xF0,d0                         	| [$3857: cp   $F0]
	jne	l_3844                             	| [$3859: jr   nz,$3844]
l_385b:
	jbsr	l_38d7                            	| [$385b: call $38D7]
	move.b	guard_1_x_6596,d0               	| [$385e: ld   a,(guard_1_x_6596)]
	cmp.b	#0xD0,d0                         	| [$3861: cp   $D0]
	jne	l_385b                             	| [$3863: jr   nz,$385B]
	clr.b	d0                               	| [$3865: ld   a,$00]
	move.b	d0,holds_barrow_61C7                 	| [$3867: ld   (holds_barrow_61C7),a]
	move.b	#0x01,d0                        	| [$386a: ld   a,$01]
	move.b	d0,has_pick_61CF                	| [$386c: ld   (has_pick_61CF),a]
	move.b	#0x37,d0                        	| [$386f: ld   a,$37]
	move.b	d0,unknown_659C                 	| [$3871: ld   (unknown_659C),a]
l_3874:
	move.b	player_input_6026,d0            	| [$3874: ld   a,(player_input_6026)]
	or.b	#0x08,d0                          	| [$3877: or   $08]
	move.b	d0,player_input_6026            	| [$3879: ld   (player_input_6026),a]
	move.b	#0x40,d0                        	| [$387c: ld   a,$40]
	move.b	d0,guard_2_direction_6027       	| [$387e: ld   (guard_2_direction_6027),a]
	jbsr	l_38d7                            	| [$3881: call $38D7]
	move.b	player_x_6582,d0                	| [$3884: ld   a,(player_x_6582)]
	cmp.b	#0x10,d0                         	| [$3887: cp   $10]
	jcs	l_38c4                             	| [$3889: jr   c,$38C4]
	move.b	is_intermission_6274,d0                 	| [$388b: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$388e: cp   $01]
	jeq	l_3899                             	| [$3890: jr   z,$3899]
	move.b	0x9248,d0                       	| [$3892: ld   a,($9248)]
	cmp.b	#0xF6,d0                         	| [$3895: cp   $F6]
	jne	l_38c4                             	| [$3897: jr   nz,$38C4]
l_3899:
	move.b	player_x_6582,d0                	| [$3899: ld   a,(player_x_6582)]
	cmp.b	#0x03,d0                         	| [$389c: cp   $03]
	lea	guard_1_struct_6594,a2         	| [$389e: ld   ix,guard_1_struct_6594]
	lea	unknown_659C,a3                	| [$38a2: ld   iy,unknown_659C]
	clr.b	d2                               	| [$38a6: ld   c,$00]
	move.b	#0x06,d1                        	| [$38a8: ld   b,$06]
	jbsr	l_2ad5                            	| [$38aa: call $2AD5]
	cmp.b	#0x01,d0                         	| [$38ad: cp   $01]
	jne	l_3874                             	| [$38af: jr   nz,$3874]
	jbsr	l_2241                            	| [$38b1: call $2241]
	move.b	#0x03,d1                        	| [$38b4: ld   b,$03]
l_38b6:
	lea	game_mem+0x5000,a0                      	| [$38b6: ld   hl,$5000]
l_38b9:
	subq.b	#1,a0                           	| [$38b9: dec  hl]
	jbsr	l_38d7                            	| [$38ba: call $38D7]
	move.b	d5,d0                           	| [$38bd: ld   a,h]
											| [$38be: cp   $00]
	jne	l_38b9                             	| [$38c0: jr   nz,$38B9]
	subq.b	#1,d1                           	| [...]
	jne	l_38b6                             	| [$38c2: djnz $38B6]
l_38c4:
	clr.b	d0                               	| [$38c4: ld   a,$00]
	jra	l_5e69                             	| [$38c6: jp   $5E69]
l_38c9:
	move.b	#0x01,d1                        	| [$38c9: ld   b,$01]
	lea	player_struct_6580,a0          	| [$38cb: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$38ce: ld   a,$00]
	move.b	d0,gameplay_allowed_6054        	| [$38d0: ld   (gameplay_allowed_6054),a]
	jbsr	l_29f1                            	| [$38d3: call $29F1]
	rts                                    	| [$38d6: ret]

l_38d7:
	move.b	number_of_credits_6000,d0       	| [$38d7: ld   a,(number_of_credits_6000)]
												| [$38da: cp   $00]
	bne.b	0f
	rts                                    	| [$38dc: ret  z]
0:
	move.b	is_intermission_6274,d0                 	| [$38dd: ld   a,(is_intermission_6274)]
	cmp.b	#0x01,d0                         	| [$38e0: cp   $01]
	bne.b	0f
	rts                                    	| [$38e2: ret  z]
0:
	clr.b	d0                               	| [$38e3: ld   a,$00]
	move.b	d0,unknown_61ED                 	| [$38e5: ld   (unknown_61ED),a]
												| [$38e8: ld   a,(watchdog_reset_B800)]
	move.l	(sp)+,a0                        	| [$38eb: pop  hl]
	jra	l_38c4                             	| [$38ec: jr   $38C4]


l_3b00:
	jbsr	check_remaining_bags_3BBC         	| [$3b00: call check_remaining_bags_3BBC]
	move.b	d2,d0                           	| [$3b03: ld   a,c]
	cmp.b	#0x00,d0                         	| [$3b04: cp   $00]
	bne.b	0f
	rts                                    	| [$3b06: ret  z]
0:
* level completed
	lea		holds_barrow_61C7,a4       	| [$3b07: ld   bc,holds_barrow_61C7] None
	bsr		exx
	lea	unknown_61C4,a3                	| [$3b0b: ld   iy,unknown_61C4]
	move.b	#0x3A,d0                        	| [$3b0f: ld   a,$3A]
	move.b	d0,(0x04,a3)                    	| [$3b11: ld   (iy+$04),a]
	move.b	#0x28,d0                        	| [$3b14: ld   a,$28]
	move.b	d0,(0x05,a3)                    	| [$3b16: ld   (iy+$05),a]
	move.b	#0xEC,d0                        	| [$3b19: ld   a,$EC]
	move.b	d0,unknown_61CA                 	| [$3b1b: ld   (unknown_61CA),a]
	move.b	(0x01,a3),d3                    	| [$3b1e: ld   d,(iy+$01)]
	move.b	(0x00,a3),d4                    	| [$3b21: ld   e,(iy+$00)]
	jbsr	l_2176                            	| [$3b24: call $2176]
	lea	game_mem+0x3F1B,a0                      	| [$3b27: ld   hl,$3F1B]
	jbsr	l_2018                            	| [$3b2a: call $2018]
* add one life for level completed
	move.b	lives_6056,d0                   	| [$3b2d: ld   a,(lives_6056)]
	addq.b	#1,d0                           	| [$3b30: inc  a]
	move.b	d0,lives_6056                   	| [$3b31: ld   (lives_6056),a]
l_3b34:
	move.b	player_input_6026,d0            	| [$3b34: ld   a,(player_input_6026)]
	or.b	#0x10,d0                          	| [$3b37: or   $10]
	move.b	d0,player_input_6026            	| [$3b39: ld   (player_input_6026),a]
	clr.b	d0                               	| [$3b3c: xor  a]
	move.b	d0,guard_1_x_6596               	| [$3b3d: ld   (guard_1_x_6596),a]
	move.b	d0,guard_2_x_659A               	| [$3b40: ld   (guard_2_x_659A),a]
	move.b	#0x01,d0                        	| [$3b43: ld   a,$01]
										| [$3b45: ld   (interrupt_control_A000),a]
	move.b	d0,unknown_61F2                 	| [$3b48: ld   (unknown_61F2),a]
	jbsr	osd_enable_vblank_interrupt	| ei
	jbsr	l_1653                            	| [$3b4c: call $1653]
	move.b	player_x_6582,d0                	| [$3b4f: ld   a,(player_x_6582)]
	cmp.b	#0xF0,d0                         	| [$3b52: cp   $F0]
	jne	l_3b34                             	| [$3b54: jr   nz,$3B34]
	clr.b	d0                               	| [$3b56: xor  a]
	move.b	d0,unknown_61F2                 	| [$3b57: ld   (unknown_61F2),a]
	move.b	d0,holds_barrow_61C7            	| [$3b5a: ld   (holds_barrow_61C7),a]
	jbsr	osd_disable_vblank_interrupt    | di
	move.b	#0x40,d1                        	| [$3b5e: ld   b,$40]
	lea	player_struct_6580,a0          	| [$3b60: ld   hl,player_struct_6580]
	clr.b	d0                               	| [$3b63: ld   a,$00]
l_3b65:
	move.b	d0,(a0)+                         	| [$3b65: ld   (hl),a]
	                           	| [$3b66: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_3b65                             	| [$3b67: djnz $3B65]
	lea		game_mem+0x5200,a0                      	| [$3b69: ld   hl,$5200]
	move.l	a0,unknown_pointer_6140                 	| [$3b6c: ld   (unknown_6140),hl]
	clr.b	d0                               	| [$3b6f: xor  a]
	move.b	d0,unknown_6142                 	| [$3b70: ld   (unknown_6142),a]
	move.b	#0x01,d0                        	| [$3b73: ld   a,$01]
	move.b	d0,is_intermission_6274         	| [$3b75: ld   (is_intermission_6274),a]
	jbsr	play_intro_3700                   	| [$3b78: call play_intro_3700]
	clr.b	d0                               	| [$3b7b: xor  a]
	move.b	d0,is_intermission_6274         	| [$3b7c: ld   (is_intermission_6274),a]
	addq.b	#1,d0                           	| [$3b7f: inc  a]
	move.b	d0,gameplay_allowed_6054        	| [$3b80: ld   (gameplay_allowed_6054),a]
	jbsr	set_bags_coordinates_354f         	| [$3b83: call set_bags_coordinates_354f]
	* restart next level ?
	lea		stack_top_67F0,sp       | [ld   sp,stack_top_67F0]
	jra	l_122b                             	| [$3b89: jp   $122B]


* < return c=0 if still bags, c=1 otherwise (level completed)
check_remaining_bags_3BBC:
	clr.b	d2                               	| [$3b8c: ld   c,$00]
	lea	bags_coordinates_609C(pc),a3       	| [$3b8e: ld   iy,bags_coordinates_609C]
	move.b	#0x36,d1                        	| [$3b92: ld   b,$36]
l_3b94:
	move.b	(0x00,a3),d0                    	| [$3b94: ld   a,(iy+$00)]
	cmp.b	#0x00,d0                         	| [$3b97: cp   $00]
	beq.b	0f
	rts                                    	| [$3b99: ret  nz]
0:
	addq.w	#1,a3                           	| [$3b9a: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_3b94                             	| [$3b9c: djnz $3B94]
	jra	l_5e60                             	| [$3b9e: jp   $5E60]


test_non_blocking_tiles_3c85:
	move.w	d0,-(sp)                        	| [$3c85: push af]
	movem.w	d3/d4,-(sp)                    	| [$3c86: push de]

	move.l	a0,-(sp)                        	| [$3c87: push hl]
	* convert D6 to real address
	and.l	#0xFFFF,d6
	lea		game_mem,a0
	add.l	d6,a0
	
	clr.b	d1                               	| [$3c88: ld   b,$00]
	jbsr	l_3caa                            	| [$3c8a: call $3CAA]
	jne	l_3ca6                             	| [$3c8d: jr   nz,$3CA6]
	addq.w	#1,a0                           	| [$3c8f: inc  hl]
	jbsr	l_3caa                            	| [$3c90: call $3CAA]
	jne	l_3ca6                             	| [$3c93: jr   nz,$3CA6]
	move.w	#0x001F,d3                      	| [$3c95: ld   de,$001F] 31
	add.w	d3,a0                            	| [$3c98: add  hl,de]
	jbsr	l_3caa                            	| [$3c99: call $3CAA]
	jne	l_3ca6                             	| [$3c9c: jr   nz,$3CA6]
	addq.w	#1,a0                           	| [$3c9e: inc  hl]
	jbsr	l_3caa                            	| [$3c9f: call $3CAA]
	jne	l_3ca6                             	| [$3ca2: jr   nz,$3CA6]
	move.b	#0x01,d1                        	| [$3ca4: ld   b,$01]
l_3ca6:
	move.l	(sp)+,a0                        	| [$3ca6: pop  hl]
	movem.w	(sp)+,d3/d4                    	| [$3ca7: pop  de]
	move.w	(sp)+,d0                        	| [$3ca8: pop  af]
	rts                                    	| [$3ca9: ret]

l_3caa:
	move.b	(a0),d0                         	| [$3caa: ld   a,(hl)]
	cmp.b	#0xE0,d0                         	| [$3cab: cp   $E0]
	bne.b	0f
	rts                                    	| [$3cad: ret  z]
0:
	cmp.b	#0x49,d0                         	| [$3cae: cp   $49]
	bne.b	0f
	rts                                    	| [$3cb0: ret  z]
0:
	cmp.b	#0x4A,d0                         	| [$3cb1: cp   $4A]
	bne.b	0f
	rts                                    	| [$3cb3: ret  z]
0:
	cmp.b	#0x4B,d0                         	| [$3cb4: cp   $4B]
	rts                                    	| [$3cb6: ret]
	
l_3cb7:
	clr.b	d0                               	| [$3cb7: xor  a]
	move.b	d0,(0x00,a3)                    	| [$3cb8: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$3cbb: ld   (iy+$01),a]
	move.l	(sp)+,a0                        	| [$3cbe: pop  hl]
	rts             
	
l_3cd4:
	jbsr	update_guard_2_screen_address_from_xy_5575	| [$3cd4: call update_guard_2_screen_address_from_xy_5575]
	jbsr	l_3d7a                            	| [$3cd7: call $3D7A]
	jeq	l_3cee                             	| [$3cda: jr   z,$3CEE]
	clr.b	d0                               	| [$3cdc: xor  a]
	move.b	d0,unknown_6077                 	| [$3cdd: ld   (unknown_6077),a]
	move.b	unknown_6209,d0                 	| [$3ce0: ld   a,(unknown_6209)]
	cmp.b	#0x01,d0                         	| [$3ce3: cp   $01]
	jne	l_3cee                             	| [$3ce5: jr   nz,$3CEE]
	jbsr	l_227c                            	| [$3ce7: call $227C]
	clr.b	d0                               	| [$3cea: xor  a]
	move.b	d0,unknown_6209                 	| [$3ceb: ld   (unknown_6209),a]
l_3cee:
	lea	unknown_608F,a2                	| [$3cee: ld   ix,unknown_608F]
	lea	unknown_6157,a3                	| [$3cf2: ld   iy,unknown_6157]
	lea	guard_2_struct_6598,a0         	| [$3cf6: ld   hl,guard_2_struct_6598]
	move.l	a0,guard_struct_pointer_6215                 	| [$3cf9: ld   (unknown_6215),hl]
	move.w	guard_2_screen_address_6078,d6	| [$3cfc: ld   hl,(guard_2_screen_address_6078)]
	lea	guard_2_in_elevator_607B,a1    	| [$3cff: ld   de,guard_2_in_elevator_607B]
	move.b	guard_2_screen_609A,d0          	| [$3d02: ld   a,(guard_2_screen_609A)]
	move.b	d0,screen_index_param_6098      	| [$3d05: ld   (screen_index_param_6098),a]
	lea		unknown_6212,a4            	| [$3d08: ld   bc,unknown_6212] None
	jbsr	l_3d49                            	| [$3d0b: call $3D49]
	jbsr	update_guard_1_screen_address_from_xy_5568	| [$3d0e: call update_guard_1_screen_address_from_xy_5568]
	jbsr	l_3d7a                            	| [$3d11: call $3D7A]
	jeq	l_3d28                             	| [$3d14: jr   z,$3D28]
	clr.b	d0                               	| [$3d16: xor  a]
	move.b	d0,unknown_6037                 	| [$3d17: ld   (unknown_6037),a]
	move.b	unknown_6208,d0                 	| [$3d1a: ld   a,(unknown_6208)]
	cmp.b	#0x01,d0                         	| [$3d1d: cp   $01]
	jne	l_3d28                             	| [$3d1f: jr   nz,$3D28]
	jbsr	l_2241                            	| [$3d21: call $2241]
	clr.b	d0                               	| [$3d24: xor  a]
	move.b	d0,unknown_6208                 	| [$3d25: ld   (unknown_6208),a]
l_3d28:
	lea	unknown_604F,a2                	| [$3d28: ld   ix,unknown_604F]
	lea	unknown_6156,a3                	| [$3d2c: ld   iy,unknown_6156]
	lea	guard_1_struct_6594,a0         	| [$3d30: ld   hl,guard_1_struct_6594]
	move.l	a0,guard_struct_pointer_6215                 	| [$3d33: ld   (unknown_6215),hl]
	move.w	guard_1_screen_address_6038,d6	| [$3d36: ld   hl,(guard_1_screen_address_6038)]
	lea	guard_1_in_elevator_603B,a1    	| [$3d39: ld   de,guard_1_in_elevator_603B]
	move.b	guard_1_screen_6099,d0          	| [$3d3c: ld   a,(guard_1_screen_6099)]
	move.b	d0,screen_index_param_6098      	| [$3d3f: ld   (screen_index_param_6098),a]
	lea		unknown_6211,a4            	| [$3d42: ld   bc,unknown_6211] None
	jbsr	l_3d49                            	| [$3d45: call $3D49]
	rts                                    	| [$3d48: ret]

l_3d49:
	move.b	(0x00,a2),d0                    	| [$3d49: ld   a,(ix+$00)]
	cmp.b	#0x12,d0                         	| [$3d4c: cp   $12]
	jcs	l_3d5e                             	| [$3d4e: jr   c,$3D5E]
	jbsr	l_3d7a                            	| [$3d50: call $3D7A]
	jne	l_3db8                             	| [$3d53: jr   nz,$3DB8]
	move.b	(a1),d0                         	| [$3d55: ld   a,(de)]
	cmp.b	#0x01,d0                         	| [$3d56: cp   $01]
	jeq	l_3db8                             	| [$3d58: jr   z,$3DB8]
	move.b	#0x01,d0                        	| [$3d5a: ld   a,$01]
	move.b	d0,(a4)                         	| [$3d5c: ld   (bc),a]
	rts                                    	| [$3d5d: ret]
l_3d5e:
	move.b	(a4),d0                         	| [$3d5e: ld   a,(bc)]
	cmp.b	#0x01,d0                         	| [$3d5f: cp   $01]
	jeq	l_3dbe                             	| [$3d61: jr   z,$3DBE]
	clr.b	d0                               	| [$3d63: xor  a]
	rts                                    	| [$3d64: ret]
l_3d65:
	jbsr	osd_r_videoram                        	| [$3d65: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$3d66: push hl]
	movem.w	d1/d2,-(sp)                    	| [$3d67: push bc]
	move.w	#0x02,d1                        	| [$3d68: ld   bc,$0002] 2
	lea	game_mem+0x3D78,a0                      	| [$3d6b: ld   hl,$3D78]
	jbsr	cpir                              	| [$3d6e: cpir]

	movem.w	(sp)+,d1/d2                    	| [$3d70: pop  bc]
	movem.l	(sp)+,a0                        	| [$3d71: pop  hl]
	bne.b	0f
	rts                                    	| [$3d72: ret  z]
0:
	clr.b	d0                               	| [$3d73: xor  a]
	move.b	d0,unknown_6008                 	| [$3d74: ld   (unknown_6008),a]
	rts                                    	| [$3d77: ret]

l_3d7a:
	move.b	(a0),d0                         	| [$3d7a: ld   a,(hl)]

	move.l	a0,-(sp)                        	| [$3d7b: push hl]
	movem.w	d1/d2,-(sp)                    	| [$3d7c: push bc]
	move.w	#0x0030,d1                        	| [$3d7d: ld   bc,$0030] 48
	lea	game_mem+0x3D88,a0                      	| [$3d80: ld   hl,$3D88]
	jbsr	cpir                              	| [$3d83: cpir]

	movem.w	(sp)+,d1/d2                    	| [$3d85: pop  bc]
	movem.l	(sp)+,a0                        	| [$3d86: pop  hl]
	rts                                    	| [$3d87: ret]

l_3db8:
	move.w	unknown_6215,a0             	| [$3db8: ld   hl,(unknown_6215)]
	move.b	#0x22,d0                        	| [$3dbb: ld   a,$22]
	move.b	d0,(a0)                         	| [$3dbd: ld   (hl),a]
* < A4: can be 0 or pointing on ram
l_3dbe:
	move.l	a4,d0
	beq.b	0f
	clr.b	d0                               	| [$3dbe: xor  a]
	move.b	d0,(a4)                         	| [$3dbf: ld   (bc),a]
0:
	move.b	#0x01,d0                        	| [$3dc0: ld   a,$01]
	move.b	d0,(0x00,a3)                    	| [$3dc2: ld   (iy+$00),a]
	exg	a1,a0                              	| [$3dc5: ex   de,hl]
	move.w	#0x0004,d3                      	| [$3dc6: ld   de,$0004] 4
	clr.b	d0                               	| [$3dc9: xor  a]
	sub.w	d3,a0								| [sbc  hl,de]
	move.b	d0,(a0)                         	| [$3dcc: ld   (hl),a]
	                      	| [$3dcd: ld   hl,$0437]
	* initialize pointer in ROM
	move.w	#0x437,unknown_6154                 	| [$3dd0: ld   (unknown_6154),hl]
	clr.b	d0                               	| [$3dd3: xor  a]
	move.b	d0,unknown_61F5                 	| [$3dd4: ld   (unknown_61F5),a]
	move.b	screen_index_param_6098,d0      	| [$3dd7: ld   a,(screen_index_param_6098)]
	move.b	d0,d1                           	| [$3dda: ld   b,a]
	move.b	player_screen_600D,d0           	| [$3ddb: ld   a,(player_screen_600D)]
	cmp.b	d1,d0                            	| [$3dde: cp   b]
	beq.b	0f
	rts                                    	| [$3ddf: ret  nz]
0:
	lea	game_mem+0x3F4B,a0                      	| [$3de0: ld   hl,$3F4B]
	jbsr	l_2018                            	| [$3de3: call $2018]
	clr.b	d0                               	| [$3de6: xor  a]
	move.b	d0,unknown_6153                 	| [$3de7: ld   (unknown_6153),a]
	rts                                    	| [$3dea: ret]

 * test if can pick bag
can_pick_bag_3DEB:
	move.l	a2,-(sp)                        	| [$3deb: push ix]
	move.l	unknown_pointer_6140,a2             	| [$3ded: ld   ix,(unknown_6140)]
	move.b	(0x03,a2),d0                    	| [$3df1: ld   a,(ix+$03)]
	move.l	(sp)+,a2                        	| [$3df4: pop  ix]
	cmp.b	#0xFF,d0                         	| [$3df6: cp   $FF]
	rts                                    	| [$3df8: ret]

l_38fa:
	bsr		assert_failed_blitz
	
 * internal actual add to score routine
 * score is stored from 6176 to 6178 for player 1
 * 6179 to 617B for player 2
l_5500:
	move.b	unknown_61ED,d0                 	| [$5500: ld   a,(unknown_61ED)]
	cmp.b	#0x01,d0                         	| [$5503: cp   $01]
	bne.b	0f
	rts                                    	| [$5505: ret  z]
0:
	move.b	current_player_617C,d0          	| [$5506: ld   a,(current_player_617C)]
	                         	| [$5509: cp   $00]
	jne	l_5531                             	| [$550b: jp   nz,$5531]
	lea	unknown_6176,a2                	| [$550e: ld   ix,unknown_6176]
l_5512:
	clr.b	d0                               	| [$5512: xor  a]
	move.b	d6,d0                           	| [$5513: ld   a,l]
	move.b	d0,d1                           	| [$5514: ld   b,a]
	move.b	(0x00,a2),d0                    	| [$5515: ld   a,(ix+$00)]
	abcd	d1,d0                            	| [$5518: add  a,b + daa]
	move.b	d0,(0x00,a2)                    	| [$551a: ld   (ix+$00),a]
	move.w	d6,d0                           	| [$551d: ld   a,h]
	lsr.w	#8,d0
	move.b	d0,d1                           	| [$551e: ld   b,a]
	move.b	(0x01,a2),d0                    	| [$551f: ld   a,(ix+$01)]
	abcd	d1,d0 								| [ adc  a,b+daa ]
	move.b	d0,(0x01,a2)                    	| [$5524: ld   (ix+$01),a]
	move.b	(0x02,a2),d0                    	| [$5527: ld   a,(ix+$02)]
	moveq	#0,d7
	abcd	d7,d0				| [adc  a,$00 + daa]
	move.b	d0,(0x02,a2)                    	| [$552d: ld   (ix+$02),a]
	rts                                    	| [$5530: ret]


l_5531:
	lea	unknown_6179,a2                	| [$5531: ld   ix,unknown_6179]
	jra	l_5512                             	| [$5535: jr   $5512]

* the screen addresses are global for all 3 screens
* those are the addresses the game uses for collisions with walls and ladders
* the display address is probably different and somewhere else but related
* (clipping those routines cause havoc to character display)

update_player_screen_address_from_xy_555E:
	lea	player_struct_6580,a2          	| [$555e: ld   ix,player_struct_6580]
	lea	player_screen_address_6009,a3  	| [$5562: ld   iy,player_screen_address_6009]
	jra	l_5582                             	| [$5566: jr   $5582]

update_guard_1_screen_address_from_xy_5568:
	lea	guard_1_struct_6594,a2         	| [$5568: ld   ix,guard_1_struct_6594]
	lea	guard_1_screen_address_6038,a3 	| [$556c: ld   iy,guard_1_screen_address_6038]
	move.b	guard_1_screen_6099,d0          	| [$5570: ld   a,(guard_1_screen_6099)]
	jra	l_5585                             	| [$5573: jr   $5585]

update_guard_2_screen_address_from_xy_5575:
	lea	guard_2_struct_6598,a2         	| [$5575: ld   ix,guard_2_struct_6598]
	lea	guard_2_screen_address_6078,a3 	| [$5579: ld   iy,guard_2_screen_address_6078]
	move.b	guard_2_screen_609A,d0          	| [$557d: ld   a,(guard_2_screen_609A)]
	jra	l_5585                             	| [$5580: jr   $5585]

l_5582:
	move.b	player_screen_600D,d0           	| [$5582: ld   a,(player_screen_600D)]
l_5585:
	move.b	d0,screen_index_param_6098      	| [$5585: ld   (screen_index_param_6098),a]
	jbra	compute_screen_address_from_xy_558c	| [$5588: call compute_screen_address_from_xy_558c]
	                                    	| [$558b: ret]

* compute logical address from x,y:	rounded by 8
* < ix: character structure
* < iy: where to update
* > D6 logical address
compute_logical_address_from_xy_558c:
	jbsr	l_55ac                            	| [$558c: call $55AC]
	jbsr	l_559a                            	| [$558f: call $559A]
	move.b	d6,(0x00,a3)                    	| [$5592: ld   (iy+$00),l]
	move.b	d5,(0x01,a3)                    	| [$5595: ld   (iy+$01),h]
	lsl.w	#8,d5
	move.b	d6,d5
	move.w	d5,d6
	rts                                    	| [$5598: ret]


l_559a:
	* align X coord
	move.b	(0x03,a2),d0                    	| [$559a: ld   a,(ix+$03)]  character y value
	add.b	#0x10,d0                         	| [$559d: add  a,$10]
	lsr.b	#3,d0                            	| [$559f: srl  a] * 3
	add.b	d6,d0                            	| [$55a5: add  a,l]
	move.b	d0,d6                           	| [$55a6: ld   l,a]
	move.b	d5,d0                           	| [$55a7: ld   a,h]
	clr		d7
	addx.b  d7,d0
	move.b	d0,d5                           	| [$55aa: ld   h,a]
	rts                                    	| [$55ab: ret]

l_55ac:
	move.b	(0x02,a2),d0                    	| [$55ac: ld   a,(ix+$02)]  character x value
	addq.b	#0x07,d0                        	| [$55af: add  a,$07]
	not.b	d0                               	| [$55b1: cpl]
	lsr.b	#1,d0                            	| [$55b2: srl  a]
	jra	l_5bcd                             	| [$55b4: jp   $5BCD]


* display ASCII text on line until code 0x3F is reached
* < a1: pointer on text
* < d6: start address of screen

display_text_55d9:
	move.w	#-0x20,d1                        	| [$55d9: ld   bc,$FFE0] 65504
												| [$55d9: ld   bc,$FFE0] 65504
	move.b	(a1),d0                         	| [$55dc: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55dd: cp   $3F]
	bne.b	0f
	rts                                    	| [$55df: ret  z]
0:
	* subtract 0x30, now numbers are in tiles 0-9, letters follow with
	* a gap in between
	sub.b	#0x30,d0                         	| [$55e0: sub  $30]
	jbsr	osd_w_videoram                         	| [$55e2: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$55e3: push hl]
												| [$55e4: ld   a,h]
	add.w	#0x0800,d6                         	| [$55e5: add  a,$08]
										| [$55e7: ld   h,a]
	* bank 0, lower end of tiles and color table 0
	clr.b	d0                               	| [$55e8: ld   a,$00]
	jbsr	osd_w_colorram                         	| [$55ea: ld   (hl),a]
	move.w	(sp)+,d6                        	| [$55eb: pop  hl]
	addq.w	#1,a1                           	| [$55ec: inc  de]
	add.w	d1,d6                            	| [$55ed: add  hl,bc]
	jra	display_text_55d9                             	| [$55ee: jr   $55D9]

* write text
* < A1: text
* < D7: attribude
write_text_55f0:
	move.w	#-0x20,d1                        	| [$55f0: ld   bc,$FFE0] 65504
										| [$55f0: ld   bc,$FFE0] 65504
	move.b	(a1),d0                         	| [$55f3: ld   a,(de)]
	cmp.b	#0x3F,d0                         	| [$55f4: cp   $3F]
	bne.b	0f
	rts                                    	| [$55f6: ret  z]
0:
	jbsr	osd_w_videoram                         	| [$55f7: ld   (hl),a]

	move.w	d6,-(sp)                        	| [$55f8: push hl]
	add.w	#0x0800,d6                           	| [$55f9: ld   a,h]
	                           	| [$55fc: ld   h,a]
	exg	d0,d7                              	| [$55fd: ex   af,af']
	jbsr	osd_w_colorram                         	| [$55fe: ld   (hl),a]
	exg	d0,d7                              	| [$55ff: ex   af,af']
	move.w	(sp)+,d6                        	| [$5600: pop  hl]
	addq.w	#1,a1                           	| [$5601: inc  de]
	add.w	d1,d6                            	| [$5602: add  hl,bc]
	jra	write_text_55f0                             	| [$5603: jr   $55F0]
	
write_attribute_on_line_5605:
	move.w	#0x0020,d3                      	| [$5605: ld   de,$0020] 32
	move.b	#0x1C,d1                        	| [$5608: ld   b,$1C]
l_560a:
	jbsr	osd_w_colorram                         	| [$560a: ld   (hl),a]
	add.w	d3,d6                            	| [$560b: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_560a                             	| [$560c: djnz $560A]
	rts                                    	| [$560e: ret]
	
l_560f:
	lea	unknown_6176,a2                	| [$560f: ld   ix,unknown_6176]
	move.w	#0x92E1,d6                      	| [$5613: ld   hl,$92E1]
	jbsr	l_563c                            	| [$5616: call $563C]
	lea	unknown_6179,a2                	| [$5619: ld   ix,unknown_6179]
	move.w	#0x9061,d6                      	| [$561d: ld   hl,$9061]
	jbsr	l_563c                            	| [$5620: call $563C]
	lea	time_61E8,a2                   	| [$5623: ld   ix,time_61E8]
	move.w	#0x9201,d6                      	| [$5627: ld   hl,$9201]
	move.b	#0x01,d1                        	| [$562a: ld   b,$01]
	jbsr	l_5641                            	| [$562c: call $5641]
	lea	unknown_61E9,a2                	| [$562f: ld   ix,unknown_61E9]
	move.w	#0x91C1,d6                     	| [$5633: ld   hl,$91C1]
	move.b	#0x01,d1                        	| [$5636: ld   b,$01]
	jbsr	l_5641                            	| [$5638: call $5641]
	rts                                    	| [$563b: ret]
l_563c:
	move.b	#0x03,d1                        	| [$563c: ld   b,$03]
	move.w	#0x0020,d3                      	| [$563e: ld   de,$0020] 32
l_5641:
	move.b	(a2),d0                    	| [$5641: ld   a,(ix+$00)]
	jbsr	write_numeric_value_564d                            	| [$5644: call $564D]
	addq.w	#1,a2                           	| [$5647: inc  ix]
	add.w	d3,d6                            	| [$5649: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5641                             	| [$564a: djnz $5641]
	rts                                    	| [$564c: ret]
write_numeric_value_564d:
	move.w	d0,-(sp)                        	| [$564d: push af]
	and.b	#0x0F,d0                         	| [$564e: and  $0F]
	jbsr	osd_w_videoram                         	| [$5650: ld   (hl),a]
	add.w	d3,a0                            	| [$5651: add  hl,de]
	move.w	(sp)+,d0                        	| [$5652: pop  af]
	ror.b	#4,d0                            	| [$5653: rrc  a] * 4
	and.b	#0x0F,d0                         	| [$565b: and  $0F]
	jbsr	osd_w_videoram                         	| [$565d: ld   (hl),a]
	rts                                    	| [$565e: ret]

 * in:	 d6 contains 16 bit hex value of the points to add
 * $100 for 100 points, $500 for 500 etc...
add_to_score_5C90:
	move.b	gameplay_allowed_6054,d0        	| [$5c90: ld   a,(gameplay_allowed_6054)]
	                         	| [$5c93: cp   $00]
	bne.b	0f
	rts                                    	| [$5c95: ret  z]
0:
	jbsr	l_5500                            	| [$5c96: call $5500]
	rts                                    	| [$5c99: ret]

l_5e69:
	move.b	d0,unknown_61ED                 	| [$5e69: ld   (unknown_61ED),a]
	move.b	#0x0A,d0                        	| [$5e6c: ld   a,$0A]
	move.b	d0,unknown_627D                 	| [$5e6e: ld   (unknown_627D),a]
	jra	l_38c9                             	| [$5e71: jp   $38C9]
direction_table_5970:
	dc.b	0x80,0x40,0x20,0x10
