*
*	Amiga-specific portions of bagman
*
* (c) JOTD 2023
*

.include "../src/bagman.inc"
.include "custom.i"
.include "exec_lvos.i"
.include "dos_lvos.i"
.include "graphics_lvos.i"

AttnFlags = 0x128
AFB_68010 = 0
AFB_68020 = 1
NO68020 = 1


SCREEN_ADDRESS = 0x9000


SCORE_FILE_SIZE = 0x50

* sprites:

* guards X2
* player+barrow
* wagons
* bag+hammer

* elevator should be blitted or just copied with CPU if aligned



	.ifdef	RELEASE
OPT_ENABLE_PROFILING = 0         | DO NOT CHANGE THIS
OPT_ENABLE_LOGGING = 0           | DO NOT CHANGE THIS
ONE_TICK = 1
	.else
OPT_ENABLE_LOGGING = 0
OPT_ENABLE_PROFILING = 0
* set to higher values than 1 to speed game up
ONE_TICK = 1


	.endif
	

OPT_ENABLE_DOUBLE_BUFFERING_BG = 0

_custom = 0xDFF000


NB_PLAYFIELD_PLANES = 4
TOTAL_NB_COLORS = 32
NB_BYTES_PER_ROW = 40
NB_LINES = 288
NB_PLAYFIELD_LINES = NB_LINES

BG_SCREEN_PLANE_SIZE = NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES
BG_SCREEN_SIZE =  BG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES
FG_SCREEN_PLANE_SIZE = BG_SCREEN_PLANE_SIZE
FG_SCREEN_SIZE =  FG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES

NB_HOST_SPRITES = 8
NB_TARGET_SPRITES = 8

SPRITE_X = 0
SPRITE_Y = 1
SPRITE_CODE = 2
SPRITE_CLUT = 3
SPRITE_SIZEOF = 4


| write current PC value to some address
.macro LOGPC	address
	.ifndef	RELEASE
     bsr    .next_\@
.next_\@:
      addq.l    #6,(a7) | skip this & next instruction
      move.l    (a7)+,0x\address
	.endif
.endm

.macro	WAIT_BLIT
	move.w	#0x8400,(dmacon,a5)		| blitter high priority
wait\@:
	BTST	#6,(dmaconr,a5)
	BNE.S	wait\@
	move.w	#0x0400,(dmacon,a5)		| blitter normal priority
.endm

.macro MUL_TABLE value,len
mul\value\()_table:
	.set    mulv,0
	.rept	\len
	dc.w	mulv
	.set	mulv,mulv+\value
	.endr
.endm


* debug macro that colors the screen until LMB pressed
.macro 	blitz_bypass
	move.w	d0,-(a7)
	clr.w	d0
loop\@:
	move.w	d0,_custom+color
	btst	#6,0xbfe001
	beq.b	out\@
	addq.w	#1,d0
	bra.b	loop\@
out\@:
	move.w	(a7)+,d0
	nop
.endm

* same thing but if LMB is pressed when entering, macro waits for release)
.macro blitz
w\@:
	btst	#6,0xbfe001
	beq.b	w\@
	blitz_bypass
.endm

start:
	move.l	a7,old_stack
	bra	_user
    
	

* exports

	  .global _user
		.global _player_start
		.global _demo_end

* osd layer		
		.global osd_disable_vblank_interrupt
		.global osd_enable_vblank_interrupt
		.global osd_disable_display
		.global osd_enable_display
		.global osd_ack_vblank_interrupt
		.global	osd_is_vblank_interrupt_enabled
		.global osd_break		| for debug	
		*.global osd_calibrate_display		| for debug
		.global osd_w_videoram
		.global osd_w_colorram
		.global osd_r_videoram
		.global osd_update_sprites
		.global osd_read_dipswitches
		.global osd_read_inputs
		.global osd_read_high_scores
		.global osd_write_high_scores
		.global osd_sound_start
		.global osd_sound_stop
		.global	osd_get_random
		.global	osd_wait

	
	.include	"ReadJoypad.i"
	.include	"whdload_funcs.i"
		.text


.list

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	.include	"profiler.68k"
	.endif

	    
_user:
    * if D0 contains "WHDL"
    * A0 contains resload
        
    cmp.l   #0x05748444c,D0	| WHDL
    bne.b   .standard
	move.b	d1,_keyexit
    move.l a0,_resload

	move.l	a0,a2
	lea	(_tag,pc),a0
	jsr	(resload_Control,a2)
	
    bra		.no_forbid
.standard:
	
    * open dos library, graphics library
    move.l  0x4.W,a6
    lea dosname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_dosbase

	lea	read_args_string(pc),a0
	lea	program_args(pc),a1
	move.l	#program_args_end-program_args,d0
	lsr.l	#2,d0		| number of longs
	

	bsr	get_args_BCPL

0:	
	lea		program_args,a0

	move.l	(A0)+,D0	| INVINCIBLE/S
	beq.b	1f
	or.l	#1,cheat_flags
	st.b	cheat_used
1:
	move.l	(A0)+,D0	| INFLIVES/S
	beq.b	2f
	or.l	#2,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| INFTIME/S
	beq.b	2f
	or.l	#4,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| INFPICK/S
	beq.b	2f
	or.l	#8,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| CHEATKEYS/S
	beq.b	2f
	* cheat isn't used as long as no cheat key is used
	or.l	#0x10,cheat_flags
2:
	move.l	(A0)+,D0	| HARDBAGS/S
	beq.b	2f
	or.l	#1,misc_options
2:
	move.l	(A0)+,D0	| FRENCH/S
	beq.b	2f
	or.l	#2,misc_options
2:

	move.l	(A0)+,D0	| SKILL/S
	beq.b	2f
	bsr		bcpl_string_to_int
	move.l	d0,dip_switch_difficulty
2:
	move.l	(A0)+,D0	| STARTLIVES/S
	beq.b	2f
	bsr		bcpl_string_to_int
	subq.b	#1,d0
	bmi.b	2f
	move.l	d0,dip_switch_start_lives
	bra.b	3f
2:
	move.l	#2,dip_switch_start_lives		| 3 lives default
3:
	

	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)

	
	move.l	4.W,A6
	lea graphicsname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_gfxbase
    move.l	d0,a6
	move.l	38(a6),old_syscoplist
	move.l	34(A6),old_actiview		| gb_ActiView

	sub.l	a1,a1
	jsr	_LVOLoadView(a6)
	jsr	_LVOWaitTOF(a6)
	jsr	_LVOWaitTOF(a6)

	bsr		load_highscores

    * check if "floppy" file is here
    
    move.l  _dosbase(pc),a6
    move.l   #floppy_file,d1
    move.l  #1005,d2   | MODE_OLDFILE
    jsr     _LVOOpen(a6)
    move.l  d0,d1
    beq.b   .no_floppy
    
    * "floppy" file found
    jsr     _LVOClose(a6)
    * wait 2 seconds for floppy drive to switch off
    move.l  #100,d1
    jsr     _LVODelay(a6)
.no_floppy:

.startup:

* no multitask
    tst.l   _resload
    bne.b   .no_forbid
    *move.l  _gfxbase(pc),a4
    *move.l StartList(a4),gfxbase_copperlist

	
    move.l  4,a6
    jsr _LVOForbid(a6)

    
	sub.l	A1,A1
	jsr	_LVOFindTask(a6)		| find ourselves
	move.l	D0,A0
	move.l	#-1,184(A0)	| pr_WindowPtr: no more system requesters (insert volume, write protected...)

.no_forbid:
	move.l	dip_switch_difficulty(pc),d0
	lsl.b	#3,d0
	
	move.b	dip_switch_start_lives+3(pc),d1
	bne.b	1f
	moveq	#2,d1	| 3 lives is default
1:
	* DSW 0 = 2 lives
	subq.b	#1,d1
	or.b	d1,d0

	
	move.l	misc_options,d1
	btst	#0,d1
	sne		hard_bags_flag
	btst	#1,d1
	beq.b	0f
	bset	#5,d0
0:
	move.b	d0,dip_switches


	

	move.l	cheat_flags,d0
	btst	#0,d0
	sne		invincible_flag
	btst	#1,d0
	sne		infinite_lives_flag
	btst	#2,d0
	sne		infinite_time_flag
	btst	#3,d0
	sne		infinite_pickaxe_time_flag
	
	* we don't need extra joypad buttons, and that will save a few cycles
	* because reading CD32 joypad is (relatively) costly. Usually it doesn't
	* matter but I've seen issues (Shadow of the beast 3 for instance)
	*
	*jsr	 _detect_controller_types 
	clr.b	controller_joypad_0
	clr.b	controller_joypad_1

	jra		demo_game


* < D0: bcpl string (with leading size byte)
* < A1: dest C string
bcpl_arg_string_copy:
    movem.l D0-D2/A0-A1,-(a7)
	lsl.l	#2,d0
	moveq.l	#0,d2
    move.l  d0,a0
	move.b	(a0)+,d2	| size
	beq.b	1f
	subq	#1,d2
0:
	move.b	(a0)+,(a1)+
	dbf		d2,0b
1:
    movem.l (a7)+,D0-D2/A0-A1
    rts


bcpl_string_to_int:
    movem.l A0/A1,-(a7)
    lea temp_filename_buffer(pc),a1
    bsr bcpl_arg_string_copy
    * convert to integer
    move.l  a1,a0
    * < A0: pointer on C string
    * > D0: value
    * > D1: -1 if ok, position of the string if error
    bsr parse_integer
    movem.l  (a7)+,a0/a1
	rts
	
* parse integer from string
* < A0: pointer on C string
* > D0: value
* > D1: -1 if ok, position of the string if error
parse_integer:
    movem.l  d2/d3,-(a7)
    * go to end of string
    moveq.l #-1,d1
.loop1:
    addq.l  #1,d1
    tst.b   (a0,d1.w)
    bne.b   .loop1
    * d1 is the number of chars
    moveq.l #0,d0
    moveq.l #0,d2
    subq.l  #2,d1   | 10th power minus 1
.loop2:
    move.b  (a0)+,d2
    beq.b   .out
    
    cmp.b   #32,d2
    beq.b   .skip
    sub.b   #48,d2
    bcs.b   .error
    cmp.b   #10,d2
    bcc.b   .error
    move.w  d1,d3
    bmi.b   .doadd
.muloop:
    mulu    #10,d2
    dbf d3,.muloop
.doadd:
    add.l   d2,d0
.skip:
    subq.l  #1,d1
    bra.b   .loop2
.out:    
    movem.l  (a7)+,d2/d3
    rts
.error:
    moveq.l #0,d0
    bra.b   .error
	
    * thanks Toni for this 1.3 read argument code
BCPL_RdArgs = 78
	
	* a1 = pointer to result array. Must be LONG aligned!
	* a0 = formatting string. BSTR!
	* d0 = size of result array (number of LONGs)
get_args_BCPL:
	movem.l d2/d3/d4,-(sp)
	move.l d0,d3
	moveq #BCPL_RdArgs,d0
	move.l a0,d1
	lsr.l #2,d1
	move.l a1,d2
	lsr.l #2,d2
	moveq #0,d4
	bsr.s call_bcpl
	movem.l (sp)+,d2/d3/d4
	rts

	* d0 = gv index
	* d1-d4 = bcpl parms

BCPL_STACK = 3000

call_bcpl:
	movem.l d2-d7/a2-a6,-(sp)

	move.l d0,d6
	move.l d1,d5

	move.l 4.w,a6
	move.l	_dosbase(pc),a5


	sub.l a1,a1
	jsr	_LVOFindTask(a6)
	move.l d0,a4

	* allocate BCPL stack
	move.l #BCPL_STACK,d0
	move.l #65536+1,d1
	jsr	_LVOAllocMem(a6)
	move.l d0,d7
	beq.s 0f
	
	movem.l d7/a5/a6,-(sp)

	moveq #0,d0
	move.l d5,d1
	sub.l a0,a0
	move.l d7,a1
	lea 3*4(a1),a1
	move.l 136(a4),a2
	lsl.w #2,d6
	move.l 0(a2,d6.w),a4
	movem.l 46(a5),a5/a6
	jsr (a5) | call bcpl!
	
	movem.l (sp)+,d7/a5/a6

0:
	move.l d7,a1
	move.l #BCPL_STACK,d0
	jsr	_LVOFreeMem(a6)


	movem.l (sp)+,d2-d7/a2-a6
	rts

* change return address from vblank
* D0: return address (0: no change)
osd_set_vblank_return_address:
	move.l	d0,return_address
	rts
	
get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
	bsr.b		get_hiscore_name
    move.l  _resload(pc),d0
    bne.b   1f

    move.l  _dosbase(pc),a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:
    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase(pc),a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts
    
	
* To get the core to run, you just need to jump to bagman_reset after
* you've initialised the platform (Amiga) stuff. That essentially does a
* Z80 reset. You also need to call bagman_im1_irq from the Amiga vblank
* routine. They are the only 2 entry points required for the core to run,
* even if there's no other I/O.


demo_game:
		move		#0x4000,_custom+intena						| disable interrupts
		move		#0x7FFF,_custom+intreq						| ack all interrupts
		bsr			platform_init					| amiga-specific init
		
0:	
		jmp			bagman_reset					| pass control to the bagman core
		
	
				
_vblank:
    movem.l d0-d7/a0-a6,-(a7)
	lea		_custom,a5
	move.w	(intreqr,a5),d0
	btst	#5,d0
	beq.b		1f

	move.l	_joypad_state(pc),d1
	moveq	#1,d0
	jsr	_read_joystick
	move.l	d0,_joypad_state
	
	* CD32 "play" is disabled but it's free to read
	* 3rd button on a Sega 3-button so 3rd button is pause
	btst	#JPB_BTN_PLAY,d0
	beq.b	0f
	btst	#JPB_BTN_PLAY,d1
	bne.b	0f
	bsr		toggle_pause
0:
	* here music doesn't loop. We have to stop it when it ends
	move.w	music_tick(pc),d1
	beq.b	13f
	
	subq	#1,d1

	move.w	d1,music_tick
	bne.b	13f
	bsr		osd_sound_stop
13:
	* ack vbl twice (040/pistorm bug)
	move.w	#0x20,(intreq,a5)
	move.w	#0x20,(intreq,a5)	
	bra.b	3f
1:
	* has to be copper
	* we're going to ack copper interrupt now
	* do it twice (040/pistorm bug)
	move.w	#0x10,(intreq,a5)
	move.w	#0x10,(intreq,a5)
	
	moveq	#ONE_TICK,d1
    move.w  vbl_counter(pc),d0
    addq.w  #1,d0
    cmp.w   #5,d0
    bne.b   22f
    * update a second time, simulate 60Hz
	moveq	#ONE_TICK*2,d1
	clr.w d0    
22:
	move.b	d1,vb_ticks_count
    move.w  d0,vbl_counter
	
	tst.b	pause_flag
	bne.b	23f

	sub.w	d1,delay_timer
	
	jbsr		bagman_irq
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING_BG
	bsr		switch_screen_buffers
	.endif
23:
	* now we check copper interrupt again
	move.w	_custom+intreqr,d0
	btst	#4,d0
	beq.b	3f		| clear: ok
	* copper interrupt has been called, which means that
	* rendering was so slow that we couldn't cope within a frame
	* skip a tick and ack again, we lose one update frame
	addq.b	#ONE_TICK,vb_ticks_count
	move.w	#0x10,_custom+intreq
3:
    movem.l (a7)+,d0-d7/a0-a6
	tst.l	return_address
	beq.b	4f
	move.l	return_address,(2,a7)		| change return address
	clr.l	return_address				| just for this time
4:
    rte
	
osd_break:
	blitz
	rts
	

	
* speed regulation for game mainloop, the bigger, the faster
* Slightly depends on PAL/NTSC.
* tried to calibrated it the best possible by recording
* the demo game on MAME and on this version and comparing
* them. 12 makes a slightly slower game, 13 should be all right

osd_get_sync_period:
	move.w	#13,d0
	rts
	

* < D0: number of 1/60Hz ticks
* can work with interrupts enabled or disabled
osd_wait:
	move.w	d0,delay_timer
	jbsr	osd_is_vblank_interrupt_enabled
	tst.w	d0
	jne		2f
	* interrupts are disabled: timer isn't going to change
	* wait using vertical blank interrupt request (we don't need it!)
	
0:
	move.w	#0x20,_custom+intreq
1:
	move.w	_custom+intreqr,d0
	btst	#5,d0
	beq.b	1b
	subq.w	#1,delay_timer
	bne.b	0b
	rts
	
2:
	tst.w	delay_timer
	bne.b	2b
	rts
	
*osd_calibrate_display:
*	movem.l	a0/d0-d1,-(a7)
*	move.l	bg_drawed_screen_ptr,a0
*	move.w	#NB_LINES-1,d1
*	clr		d0
*0:
*	st.b	(8,a0,d0.W)
*	st.b	(9,a0,d0.W)
*	st.b	(10,a0,d0.W)
*	
*	add.w	#NB_BYTES_PER_ROW,d0
*	dbf		D1,0b
*	movem.l	(a7)+,a0/d0-d1
*	rts

* < A0: pointer on sprite shadow zone 65A0:

osd_update_sprites:
	*lea		test_sprites,a0
	
	* clear host sprites
	move.w	#NB_HOST_SPRITES-1,d0

	lea		host_sprites(pc),a2
0:
	clr.b	(SPRITE_X,a2)	| clear X is enough to know it's free
	st.b	(SPRITE_CLUT,a2) | invalid clut
	addq.w	#SPRITE_SIZEOF,a2
	dbf		d0,0b
	
	* check active sprites, we'll disable the sprites that aren't active anymore
	moveq	#NB_TARGET_SPRITES-1,d7
1:
	* code = 0 and clut = 0 => disabled
	moveq	#0,d2
	moveq	#0,d3
	move.b	(a0),d2
	beq.b	2f
	move.b	(1,a0),d3
	beq.b	2f
	move.b	(3,a0),d1  | sprite Y
	beq.b	2f			| Y set to 0: not shown
	cmp.b	#255,d1
	beq.b	2f			| Y set to 255: not shown	
	move.b	(2,a0),d0  | sprite X
	cmp.b	#240,d0
	bcc.b	2f			| X >= 240: not shown	
	* bits 6 and 7 are used to flip Y and X
	* bit 6 is only set in cocktail mode, so we
	* can let bit 7 pass, add 0x40 if second bank
	* and filter it later when displaying
	btst	#5,d3
	beq.b	11f
	add.w	#0x40,d2
11:
	and.b	#0x1F,d3	| get attributes
12:
* < D2: sprite code & flags
* < D3: sprite color (clut index)
* > D6: allocated sprite index

	* special case: elevator at screen 2 (ok at screen 3
	* no need to change anything)
	cmp.b	#0x33,d2
	bne.b	21f
	cmp.b	#4,d3
	bne.b	21f
	* elevator color hack!
	* change clut, match player clut
	* also change elevator with different
	* bitplanes if clut 4 so colors are respected
	# (red instead of orange on screen 2)
	move.b	#8,d3	| same CLUT as player so sprite alloc keeps grouping them
	move.b	#10,d2	| but change graphics with a fake sprite derived from the original
21:

	* sprite active: allocate a sprite in host table
	* it HAS to succeed (in Pengo it did, here I'm less sure)
	bsr		alloc_sprite
2:
	addq.w	#4,a0
	dbf		d7,1b
	
	* all sprites are allocated: now display them
	lea		host_sprites(pc),a2		| input structure
	lea		sprites,a3				| copperlist
	lea		sprite_table,a4
	moveq	#0,d6
10:
	move.b	(SPRITE_X,a2),d0
	bne.b	20f		
	* slot free: replace sprite by blank
	move.l	#blank_sprite,d4
	move.w	d4,(6,a3)
	swap	d4
	move.w	d4,(2,a3)
	jra		30f
20:
	* lookup sprite code
	
	and.w	#0xFF,d0
	moveq	#0,d1
	move.b	(SPRITE_Y,a2),d1
	moveq	#0,d2
	move.b	(SPRITE_CODE,a2),d2
	move.b	d2,d5		| for flip bit
	bclr	#7,d2		| clear flip bit
	
	move.w	d2,d4
	add.w	d4,d4
	add.w	d4,d4
	move.l	(a4,d4.w),d4	| get pointer
	.ifndef	RELEASE
	bne.b	25f
	* sprite doesn't exist: blitz and bail out
	blitz
	move.b	d1,d1
	move.b	d2,d2
	jra		30f
25:
	.endif
	
	move.l	d4,a5
	move.w	d6,d4
	add.w	d4,d4
	add.w	d4,d4
	move.l	(a5,d4.W),a5			| get buffer for this sprite index

	tst.b	d5			| x flip bit
	bpl.b	21f
	addq.w	#4,a5
21:
	move.l	(a5),d4
	.ifndef	RELEASE
	bne.b	22f
	blitz		| should not happen
	jra		30f
22:
	.endif
	move.l	d4,a5	| sprite pointer

	* add offsets to both X & Y
	add.b	#9,d0
	add.b	#15,d1

	bsr		store_sprite_pos_16
	move.l	d0,(a5)
	* set colors
	lea		cluts+2,a6
	moveq	#0,d3
	move.b	(SPRITE_CLUT,a2),d3
	lsl.w	#3,d3		| times 8

	add.w	d3,a6
	* check if CLUT doesn't contain only color zero
	* (we may as well cache the values in spare registers)
	move.l	(a6)+,d3
	move.w	(a6)+,d7
	bne.b	24f
	tst.l	d3
	bne.b	24f
	* all black sprites would hide bagman sprites & tiles
	* we want to hide them instead (no need to change palette)
	* inherited from pengo, probably not required
	move.l	#blank_sprite,d4
	bra.b	25f
24:
	* d6 is the sprite index: compute/set proper color
	move.w	d6,d5
	bclr	#0,d5
	lsl.w	#2,d5	| times 4*2
	move.w	d5,d2
	add.w	d2,d2
	lea		sprite_cols+6,a5	| sprite palette + 2 (first color skipped)
	add.w	d2,a5
	* copy 3 colors from cached registers into sprite color copperlist
	move.w	d3,(4,a5)
	swap	d3
	move.w	d3,(a5)
	move.w	d7,(8,a5)
25:
	* set sprite in copperlist
	move.w	d4,(6,a3)
	swap	d4
	move.w	d4,(2,a3)	
30:
	* next sprite
	addq.w	#8,a3		| advance in copperlist
	lea		(SPRITE_SIZEOF,a2),a2
	addq	#1,d6
	cmp.w	#NB_HOST_SPRITES,d6
	jne	10b	
	rts


* priorities are from last to first
test_sprites_demo:
* guard chasing bagman+barrow
	.byte	0x3A,0x28,0x9D,0xC1,0x00,0x00,0x00,0x38,0x1E,0x08,0x90,0xC1,0x00,0x00,0x00,0xE1
	.byte	0x00,0x00,0x00,0x41,0x00,0x00,0x00,0xC9,0x2E,0x0C,0x30,0xC1,0x00,0x00,0x00,0x00

* guard only

	.byte  0x30,0xc,0x64,0xc1
	.rept	28
	.byte  0x0
	.endr

* in game with wagons & guards
	.byte  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12,0x1b,0x8,0x5e,0xe1,0x35,0x4,0x69,0xe1
	.byte  0x35,0x4,0x67,0xff,0x35,0x4,0x18,0xff,0x0,0x0,0x0,0x0,0x31,0xc,0x51,0x63

* 6 active sprites
test_sprites:
	.byte  0x3f,0x20,0x35,0xdf,0x33,0x4,0x97,0x15,0x1a,0x8,0x3d,0xe1,0x35,0x4,0x3d,0xe1
	.byte  0x35,0x4,0x39,0x41,0x35,0x4,0x6e,0xff,0x31,0xc,0x1d,0xe1,0x27,0xc,0x1c,0x5c


* < D0: sprite X
* < D1: sprite Y
* < D2: sprite code & flags
* < D3: sprite color (clut index)
* > D6: allocated sprite index
alloc_sprite:
	* first pass: find a free sprite next to a sprite with
	* same clut
	lea		host_sprites(pc),a2
	moveq	#0,d6
0:
	cmp.b	(SPRITE_CLUT,a2),d3
	bne.b	10f
	* allocated (else would be -1/invalid) + same clut
	* check even/odd index
	btst	#0,d6
	beq.b	1f
	* odd: check if previous entry is free
	tst.b	(SPRITE_X-SPRITE_SIZEOF,a2)
	beq.b	8f
	tst.b	(SPRITE_Y-SPRITE_SIZEOF,a2)
	bne.b	10f
8:
	* previous entry is free, same clut: we can use that
	* entry, no color conflict
	lea		(-SPRITE_SIZEOF,a2),a2
9:
	move.b	d0,(a2)+		| X
	move.b	d1,(a2)+		| Y
	move.b	d2,(a2)+		| code
	move.b	d3,(a2)+		| clut
	rts						| done
1:
	* even: check if next entry is free
	tst.b	(SPRITE_X+SPRITE_SIZEOF,a2)
	beq.b	2f
	tst.b	(SPRITE_Y+SPRITE_SIZEOF,a2)
	bne.b	10f
2:
	* next entry is free, same clut: we can use that
	* entry, no color conflict
	lea		(SPRITE_SIZEOF,a2),a2
	bra.b	9b
10:
	* next entry
	addq.w	#SPRITE_SIZEOF,a2
	addq	#1,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	0b
	* second pass if first pass failed (could not match
	* a pair with one occupied slot with compatible clut,
	* which happens when there are very few sprites
	* displayed): we have to find 2 consecutive free slots

	lea		host_sprites(pc),a2
	moveq	#0,d6
11:
	* we consider that a sprite is not allocated
	* if one of the coordinates is zero (real game
	* doesn't care and sets X to 255, and Y to 0 at times
	tst.b	(SPRITE_Y,a2)
	beq.b	12f
	tst.b	(SPRITE_X,a2)
	bne.b	20f
12:
	* not allocated: test odd sprite
	tst.b	(SPRITE_Y+SPRITE_SIZEOF,a2)
	jeq	9b
	tst.b	(SPRITE_X+SPRITE_SIZEOF,a2)
	jeq	9b		| ok, both slots are free, allocate the first one
20:
	* next sprite pair
	lea		(2*SPRITE_SIZEOF,a2),a2
	addq	#2,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	11b
	
	* third pass: last chance/emergency: there ARE free slots
	* (since only 6 sprites on the target) but maybe too many
	* different cluts so we can't find a suitable slot. In that
	* case, pick the first free slot, we'll handle the color changes
	* with a dynamic copperlist, let's hope that it works out
	* (only happens in demo screens)
	*
	* the strategy globally works because during game, all 4 enemies
	* share the same palette. bagman uses another one, and ice block
	* another one too. Blinking stunned enemies can be a problem
	* because of the extra blue color
	*
	lea		host_sprites(pc),a2
	moveq	#0,d6
21:
	tst.b	(SPRITE_X,a2)
	beq.b	9b		| ok, a slot is free, allocate it
	tst.b	(SPRITE_Y,a2)
	beq.b	9b		| ok, a slot is free, allocate it
30:
	* next sprite
	lea		(SPRITE_SIZEOF,a2),a2
	addq	#1,d6
	cmp.w	#NB_HOST_SPRITES,d6
	bne.b	21b
	* just cannot happen
	* if we reach that point there's a big problem
	blitz
	illegal
	illegal
	illegal
	rts
	

	
osd_sound_start:
	cmp.b	#CREDIT_SND,d0
	bcs.b	0f			| always play sampled sounds
	tst.b	music_playing
	beq.b	0f
	* don't play AY-sound when music is playing
	rts
0:
	movem.l	d0/d1/a0/a6,-(a7)
	tst.b	d0
	jmi	7f		| should stop the sound
	and.w	#0xFF,d0
	lea		_custom,a6
	
	
	lsl.w	#3,d0
	lea		sound_table,a0

	move.w	(a0,d0.w),d1	| sound type
	beq.b	0f		| no sound

2:
	cmp.w	#1,d1
	bne.b	4f		| music module
	move.w	(2,a0,d0.w),d1
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	tst.w	d1
	beq.b	3f
	* looped sound
	jsr		_mt_loopfx
	beq.b	1f
3:
	jsr		_mt_playfx
1:
	movem.l	(a7)+,d0/d1/a0/a6
	rts
0:
	* some sounds seem to be missing/blank in the real game
	lsr.w	#3,d0
	cmp.b	#0x14,d0	| when hatching
	beq.b	1b
	cmp.b	#0x6,d0		| game over
	beq.b	1b
	
	bra.b	1b
	* music
4:
	* don't play if game not in play
	* could have been handled at generic bagman.68k level
	* but it's way simpler here. I suppose than the real game
	* just turns music volume off to get away with it
	*tst.b	game_playing_8817
	*beq.b	1b
	
	* don't play if already playing
	* (music_tick value is not important for looped tunes
	* as long as it's not zero)
	tst.w	music_tick
	bne.b	1b
	* play the proper module pattern
	* load up the countdown if loop
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	* since it's not zero, next vbl tick will play the music
	cmp.b	music_track_start_number(pc),d1
	beq.b	1b		| same track, skip

    movem.l d0-a6,-(a7)
	bsr		osd_sound_stop
    lea _custom,a6
 	movem.l	d0/a0,-(a7)
    lea	bagman_tunes,a0
	move.b	d1,music_track_start_number
	move.w	d1,d0
    sub.l   a1,a1		| samples are in the module
    jsr _mt_init
	movem.l	(a7)+,d0/a0

    * set master volume a little less loud if needed
	move.b	(6,a0,d0.w),music_volume
	move.b	(7,a0,d0.w),music_loops
	move.w	(2,a0,d0.w),music_pattern	| pattern number in .mod file
	move.w	(4,a0,d0.w),d2

	move.w	d2,music_duration
	move.w	d2,music_tick

    moveq	#0,d0
	move.b	music_volume(pc),d0
    jsr	_mt_mastervol
	st.b	music_playing
    jsr _mt_start
    movem.l (a7)+,d0-a6
	
6:
	jra	1b

7:
	jra	1b
	tst.b	music_playing
	jeq	1b
	bsr		osd_sound_stop
	jra	1b
	

osd_sound_stop:
	movem.l	d0/a0/a6,-(a7)
	lea		_custom,a6
	move.b	#-1,music_track_start_number
    clr.w   music_tick   | not playing anymore
	clr.b	music_playing
    jsr		_mt_end
0:
	movem.l	(a7)+,d0/a0/a6
	rts
	


switch_screen_buffers:	
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING_BG
	* let's switch screen buffers, background (chars)
	* toggle fg planes (double buffering)
	lea		bg_drawed_screen_ptr(pc),a0
	lea		bg_displayed_screen_ptr(pc),a4
	lea		bg_screen_data_1,a1
	lea		bg_screen_data_2,a5
	* also switch previous state memory
	cmp.l	(a0),a1
	bne.b	2f
	* screen data 1 is displayed screen
	* set it to drawn screen
	exg		a1,a5
2:
	move.l	a1,(a0)
	move.l	a5,(a4)
	jbsr		set_bg_bitplanes
	.endif
	
	rts

	
store_system:
	tst.l	_resload
	beq.b	0f
	rts
0:
	* system copper
	
	move.l	4.W,a6
	move.w	AttnFlags(a6),d0
	btst	#AFB_68010,d0
	beq.b	1f
	lea	get_vbr,a5

	jsr		_LVOSupervisor(a6)
	move.l	d0,system_vbr
1:
	
*	move.w	AttnFlags(a6),d0
*	btst	#AFB_68020,d0
*	bne.b	1f
*	* no whdload, no 68020: assume slow
*	* if running on PiStorm, well, too bad use whdload
*	st.b	slow_machine
*1:
	lea	_custom,a6
	move.w	intenar(a6),old_intena
	move.w	dmaconr(a6),old_dmacon
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(0x64,a1),(a0)+
	move.l	(0x68,a1),(a0)+
	move.l	(0x6c,a1),(a0)+
	move.l	(0x70,a1),(a0)+
	move.l	(0x74,a1),(a0)+
	move.l	(0x78,a1),(a0)+
	rts

restore_system:
	lea	_custom,a6
	jsr		_mt_remove_cia

	move.w	#0x4000,intena(a6)	| ints off
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(a0)+,(0x64,a1)
	move.l	(a0)+,(0x68,a1)
	move.l	(a0)+,(0x6c,a1)
	move.l	(a0)+,(0x70,a1)
	move.l	(a0)+,(0x74,a1)
	move.l	(a0)+,(0x78,a1)


	bclr	#6,0xbfee01


	lea	_custom,a6
	move.w	old_intena,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0
	move.w	d0,intena(a6)		| clr bits
	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,intena(a6)		| set bits and main

	move.w	old_dmacon,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0

***		and.w	#0xfff0,d0		| preserve sound dma for now

	move.w	d0,dmacon(a6)		| clr bits



	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,dmacon(a6)		| set bits and main

	move.l	old_syscoplist,cop1lc(a6)
	move.l	_gfxbase,a6
	move.l	old_actiview,a1
	jsr	_LVOLoadView(a6)


	moveq	#0,d0
	rts

quit_to_os:
	tst.l	_resload
	bne.b	0f
	bsr		restore_system
	* set SR to 0 from here, so we return to OS with SR=0
	* (else it kills the system pretty quickly)
	* it works as quit_to_os is called from an interrupt
	move.w	#0,SR
	move.l	old_stack(pc),a7
	bsr		save_highscores
	moveq	#0,d0
	rts
0:
	pea	  TDREASON_OK
	move.l	_resload(pc),-(a7)
	addq.l	#resload_Abort,(a7)
	rts

platform_init:
	bsr		store_system
	

	lea		_custom,a5
	move.w	#0x7FFF,dmacon(a5)
	move.w	#0x7FFF,intena(a5)
	* set blitter parameters once and for all
	.ifndef	VARIABLE_BLITTER_MASKS_AND_MODS
    move.l  #-1,bltafwm(a5)
	.endif
	
	* restrict borders: we don't see bobs on the borders!
    move.w #0x1C99,diwstrt(a5)
    move.w #0x2C81-8,diwstop(a5)
    move.w #0x0038,ddfstrt(a5)
    move.w #0x00D0,ddfstop(a5)
    move.w #0x200+(NB_PLAYFIELD_PLANES<<12),bplcon0(a5) | 5 bitplanes
    move.w #0x0024,bplcon2(a5)
	* AGA-compatible ECS default values
    move.w #0x0C00,bplcon3(a5)     | no AGA specificities, default ECS
    move.w #0x0011,bplcon4(a5)     | ECS default for sprite colors
    move.w #0,fmode(a5)			
	

    move.w #0,bplcon1(a5)    | foreground tiles
	move.w	#0,d0
    move.w d0,bpl1mod(a5)
    move.w d0,bpl2mod(a5)

	* set other sprites to blank
	move.l		#blank_sprite,d0

	moveq	#7,d1
	lea		sprites,a1
0:
    move.w	d0,(6,a1)
	swap	d0
    move.w	d0,(2,a1)
	swap	d0
	addq.w	#8,a1
	dbf		d1,0b
	
	bsr		set_bg_bitplanes
	
	bsr		load_palette_in_copperlist
	
	* set copperlist
	move.l	#copperlist,cop1lc(a5)

	* wait 300 lines
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	
    * init sprite, bitplane, whatever dma

    move.w #0x83E0,dmacon(a5)
    *move.w #0x20,dmacon(a5)

	* install keyboard and vblank/copper handler
	pea		level2_interrupt(pc)
	move.l	system_vbr(pc),a1
	move.l	(a7)+,(0x68,a1)
	pea		_vblank(pc)
	move.l	(a7)+,(0x6C,a1)

	* soundfx lib
	lea		_custom,a6
	lea		blank_sound,a0
	move.l	a0,(0xA0,a6)
	move.l	a0,(0xB0,a6)
	move.l	a0,(0xC0,a6)
	move.l	a0,(0xD0,a6)
	move.l	system_vbr(pc),a0
	moveq	#1,d0	| PAL
	jsr		_mt_install_cia

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	lea		0x180000,a0
	move.l	#0x20000,d0
	lea		0x100,a1
	bsr		init_fixed_address
	bsr		install_profiler_vbl_hook
	.endif

	
    rts

set_black_palette:
	movem.l	d0-d1/a1,-(a7)

	move.w	#TOTAL_NB_COLORS-1,d0
	lea		copperlist_colors+2,a1
1:
	clr.w	(a1)+
	addq.w	#2,a1
	dbf		d0,1b
		
	movem.l	(a7)+,d0-d1/a1
	rts
	
load_palette_in_copperlist:
	movem.l	d0-d1/a0-a1,-(a7)
	lea		palette,a0

	move.w	#TOTAL_NB_COLORS-1,d0
	lea		copperlist_colors+2,a1
1:
	move.w	(a0)+,(a1)+
	addq.w	#2,a1
	dbf		d0,1b
		
	movem.l	(a7)+,d0-d1/a0-a1
	rts
	
* enable display (palette)
osd_enable_display:
	jbra	load_palette_in_copperlist
	rts
	
osd_disable_display:
	jbsr	set_black_palette
	jbsr	wait_tof
wait_tof:
0:
	MOVE.L	0xdff004,D0
	ANDI.L	#0x0001ff00,D0
	BNE.S	0b
    rts
	
* < D0: nonzero interrupts enabled
osd_is_vblank_interrupt_enabled:
	move.w	_custom+intenar,d0
	and.w	#0x0030,d0
	rts
	
* 60Hz VBLANK interrupt (also keyboard)
osd_enable_vblank_interrupt:
	move.w	#0xC038,_custom+intena
	rts

osd_ack_vblank_interrupt:
	move.w	#0x30,_custom+intreq
 	rts
		
* not used after all
*osd_test_vblank_interrupt:
*	move.w	_custom+intreqr,d0
*	btst	#5,d0
*	rts
	
osd_disable_vblank_interrupt:
	move.w	#0x0030,_custom+intena
	rts



	


* < D4: sprite properties
*     Y code+attrs clut X
* > D0,D1: X,Y.B
* > D5: clut index
* > D6: sprite index + attributes
* 
decode_sprite_data:
	move.b	d4,d1	| sprite X (aka Y on amiga)
	lsr.l	#8,d4
	move.b	d4,d5	| clut index
	lsr.l	#8,d4
	move.b	d4,d6	| sprite index
	lsr.l	#8,d4	
	move.b	d4,d0	| sprite Y (aka X on amiga)
	rts


	
* d6=screen address (preserved), d0=tile (preserved)
* d6 starts at 0x8000 ends at 0x83FF
* should preserve all registers

osd_w_videoram:
    .ifeq OPT_DISABLE_BG_LAYER
	movem.l	d0-d3/d6/a0-a2,-(a7)
	

	sub.w	#SCREEN_ADDRESS,d6
	bcs.b	0f
	cmp.w	#0x400,d6
	bcs.b	1f
0:
	* should not happen
	blitz
	nop
	move.b	d0,d0
	nop	
	bra.b	0f
	
1:
	cmp.w	#0x288,d6
	bne.b	2f
	* location of VA logo tile (to detect title)
	lea		palette+2,a0			| points on second color 
	lea		copperlist_colors+4,a1	| second color copperlist entry
	cmp.b	#0xE5,d0
	bne.b	22f
	* title: set proper colors for V/A logo in title: note: if palette is
	* reordered in python convert_graphics.py script
	* this will fail changing the proper colors!
	* But palette is fixed now so it's going to work.
	* Not as clean as it should be but this is a hack anyway...)
	move.w	#0xF90,(2,a1)
	move.w	#0x0DF,(6,a1)
	bra.b	2f
22:
	* not title: remove copperlist dynamic color changes
	move.w	(A0)+,(2,a1)
	move.w	(a0),(6,a1)
2:
	lea		bg_videoram,a1
	add.w	d6,a1
	
	cmp.b	(a1),d0
	beq.b	0f		| already the proper value
3:

	move.b	d0,(a1)	| update logical grid
	lea		bg_colorram,a1
	move.b	(a1,d6.W),d1
	

	jbsr		update_bg_tile
0:
	movem.l	(a7)+,d0-d3/d6/a0-a2
    .endif | OPT_DISABLE_BG_LAYER
	rts

* d6=screen address (preserved), d0=attribute (preserved)
* d6 starts at 0x8000 ends at 0x83FF
* should preserve all registers

osd_w_colorram:
    .ifeq OPT_DISABLE_BG_LAYER
	movem.l	d0-d3/d6/a0-a2,-(a7)
	sub.w	#SCREEN_ADDRESS+0x800,d6
	bcs.b	0f
	cmp.w	#0x400,d6
	bcs.b	1f
0:
	* should not happen
	blitz
	nop
	move.b	d1,d1
	nop
	nop
	bra.b	0f
1:
	lea		bg_colorram,a1
	add.w	d6,a1
	cmp.b	(a1),d0
	beq.b	0f		| already the proper value
	

	move.b	d0,(a1)	| update logical grid
	move.b	d0,d1
	lea		bg_videoram,a1
	move.b	(a1,d6.W),d0
	
	jbsr		update_bg_tile
0:
	movem.l	(a7)+,d0-d3/d6/a0-a2
    .endif | OPT_DISABLE_BG_LAYER
	rts


* d6: screen offset
* d0: tile code
* d1: attribute
*
* the layout is strange to say the least
* first row (last row in memory) is shown "normally" (X is mirrored, but horizontal,
* Y is at top of the screen)
* other rows use a X/Y transposed system like Galaxian or Xevious!
*
update_bg_tile:
	* compute Y

	and.w	#0xFF,d0	| mask up to 255
	and.w	#0xFF,d1	| mask up to 255

	
	.ifne	OPT_ENABLE_LOGGING
	* when logging is enabled, play a while
	* and break. Get the address in 0x100 then do
	* S used_cluts <address at $100> $10000
	* then run the compute_used_cluts.py program again
	
	lea		tile_log_table,a0
	move.l	a0,0x100
	movem.w	d0-d1,-(a7)
	and.l	#0xFFFF,d0
	lsl.l	#8,d0
	add.w	d1,d0
	st.b	(a0,d0.l)
	movem.w	(a7)+,d0-d1
	.endif
	
	* is it bank 2 ?
	btst	#4,D1
	beq.b	0f
	add.w	#0x200,d0
0:
	* is it upper part of bank ?
	btst	#5,D1
	beq.b	0f
	add.w	#0x100,d0
0:
	* color tile
	and.w	#0xF,d1
	
	cmp.w	#0x3C0,d6
	bcc.b	0f
	cmp.w	#0x40,d6
	bcs.b	2f
	move.w	d6,d3
	lsr.w	#5,d6		| this is X
	neg.w	d6
	add.w	#32,d6
	and.w	#0x1F,d3	| this is Y
	addq.w	#2,d3
	bra.b	1f
	* two first rows are special???
0:
	move.w	d6,d3
	lsr.w	#5,d3		| this is Y
	
	sub.w	#30,d3		| minus 2
	and.w	#0x1F,d6	| this is X
	neg.w	d6
	add.w	#32,d6
	bra.b	0f			| this is not enough to hide 2 first rows
	bra.b	1f
	* two last rows as well
2:
	move.w	d6,d3
	lsr.w	#5,d3		| this is Y
	add.w	#34,d3		| plus 2
	and.w	#0x1F,d6	| this is X
	neg.w	d6
	add.w	#32,d6
1:
	lea		mulNB_BYTES_PER_ROW_table(pc),a0

	
	move.l	bg_drawed_screen_ptr(pc),a1
	* D3 = Y

	add.w	d3,d3
	move.w	(a0,d3.w),d3
	lsl.w	#3,d3		| times 8
	add.w	d3,a1
	add.w	d6,a1

	moveq	#NB_PLAYFIELD_PLANES-1,d3

	* optimization when a well-known
	* empty character is passed (standard charset)
	cmp.w	#0xE0,d0	| empty character
	jeq	11f
	cmp.w	#0x10,d0	| empty character
	jeq	11f

	lea		character_table,a0
	add.w	d0,d0
	add.w	d0,d0
	move.l	(a0,d0.w),d0
	jeq	2f
	move.l	d0,a0		| pointer on clut table
	* now we use d1 (attribute)
	add.w	d1,d1
	add.w	(a0,d1.w),a0
	cmp.l	d0,a0
	jeq		12f		| should not happen

4:
	.set	offset,0
	.rept	8
	move.b	(a0)+,(offset,a1)	
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	add.w	#BG_SCREEN_PLANE_SIZE,a1
	dbf		d3,4b
0:
	rts

	* clear tile

11:
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	add.w	#BG_SCREEN_PLANE_SIZE,a1
	dbf		d3,11b
2:
	rts

12:
	* clut/tile combo not declared as used
	**blitz
	rts


			
store_sprite_pos_16:
	move.l	a1,-(a7)
	lea		HW_SpriteYTable_16,a1
	bsr		store_sprite_pos
	move.l	(a7)+,a1
	rts
	
* < d0.w: x
* < d1.w: y
* < a1: sprite pos table (depending on height)
* > d0.L: control word
store_sprite_pos:
    move.l  a0,-(a7)

    lea	HW_SpriteXTable(pc),a0
	
	.ifdef	NO68020
    add.w	d0,d0
    add.w	d0,d0
    move.l	(a0,d0.w),d0
	move.w	d1,-(a7)
    add.w	d1,d1
    add.w	d1,d1
    or.l	(a1,d1.w),d0
	move.w	(a7)+,d1
	.else
    move.l	(a0,d0.w*4),d0
    or.l	(a1,d1.w*4),d0	
	.endc
    move.l  (a7)+,a0
    rts
	
HW_SpriteXTable:
	.set	reptn,0
	.rept 320
	.set	x,reptn+0x80
	.set reptn,reptn+1
    .byte  0,x>>1,0,x&1
  .endr

	.macro DEF_HW_SPRITE_Y_TABLE	height
HW_SpriteYTable_\height:
  .set	reptn,0
  .rept 288
	.set	ys,reptn+0x1c
	.set	ye,ys+\height
    .byte  ys&255, 0, ye&255, ((ys>>6)&4)+((ye>>7)&2)
	.set	reptn,reptn+1
  .endr
	.endm


	DEF_HW_SPRITE_Y_TABLE	16




	
* set_bitplanes
* what: sets bitplanes in copperlist

set_bg_bitplanes:
    move.l	bg_displayed_screen_ptr(pc),a0
    moveq #NB_PLAYFIELD_PLANES-1,d1
	move.l	a0,d0
    lea	bg_bitplanes+2,a0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l #BG_SCREEN_PLANE_SIZE,d0
    dbf d1,1b
    rts

	

osd_debug_hook:
	rts
	
osd_get_random:
* > D0: pseudo random value (8 bits, all other bits zeroed)
	movem.l	a0,-(a7)
	lea	seed(pc),a0
	move.l	(a0),d0
	* thanks meynaf
	mulu #0xa57b,d0
	addi.l #0xbb40e62d,d0
	rol.l #6,d0	
	move.l	d0,(a0) 
	movem.l	(a7)+,a0
	add.b	_custom+vposr,d0
	and.l	#0xFF,d0
	rts
seed:
	dc.l	0x12345678

	
* d6=screen address
osd_r_videoram:
	movem.l	a0/d6,-(a7)
	sub.w	#SCREEN_ADDRESS,d6
	bmi.b	0f
	cmp.w	#0x400,d6
	bcs.b	1f
0:
	* should not happen
	blitz
	clr.b	d0
	move.b	D1,d1
	nop
	bra.b	2f
1:
	lea		bg_videoram,a0
	move.b	(a0,d6.w),d0
2:
	movem.l	(a7)+,a0/d6
	rts

osd_read_dipswitches:
	* actual dipswitches
	move.b	dip_switches(pc),d0
	not.b	d0		| active low
	

	rts
	
* reads most inputs in one call
* bits 0-1    coins
* bit 2: start game 1 player
* bit 10: (added) start game 2 players

osd_read_inputs:
	moveq	#-1,d0
	movem.l	a0/d1,-(a7)
	lea		keyboard_table(pc),a0
	* misc control keys
	tst.b	(6,a0)		| "6" key like in MAME
	beq.b	0f
	bclr	#1,d0
0:	
	tst.b	(5,a0)		| "5" key like in MAME
	beq.b	0f
	bclr	#0,d0
0:
	tst.b	(1,a0)		| "1" key like in MAME
	beq.b	0f
	bclr	#2,d0
0:
	tst.b	(2,a0)		| "2" key like in MAME
	beq.b	0f
	bclr	#10,d0
0:	
	tst.b	(0x4F,a0)		| "<-" key
	beq.b	0f
	bclr	#3,d0
0:
	tst.b	(0x4E,a0)		| "->" key
	beq.b	0f
	bclr	#4,d0
0:
	tst.b	(0x4C,a0)		| "up" key
	beq.b	0f
	bclr	#5,d0
0:
	tst.b	(0x4D,a0)		| "down" key
	beq.b	0f
	bclr	#6,d0
0:
	tst.b	(0x63,a0)		| "ctrl" key
	beq.b	0f
	bclr	#7,d0
0:
	* directions + fire
	move.l	_joypad_state(pc),d1
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#5,d0
0:
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#6,d0
0:
	btst	#JPB_BTN_LEFT,d1
	beq.b	0f
	bclr	#3,d0
0:
	btst	#JPB_BTN_RIGHT,d1
	beq.b	0f
	bclr	#4,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	bclr	#7,d0
0:
	* test all those flags to see if normal controls
	* could be used to insert coins/start game
	tst.b	gameplay_allowed_6054
	beq.b	1f			| demo mode: enable
	tst.b	check_scenery_disabled_61ED		| intro: enable
	bne.b	1f
	tst.b	game_locked_6053		| start screen: enable
	beq.b	3f
1:
	move.l	d2,-(a7)
	move.l	_previous_joypad_state(pc),d2
	* save prev state as game loops within vblank
	* pushing fire would either lockup the game
	* or insert a lot of credits simulatenously
	move.l	d1,_previous_joypad_state
	
	* game not in play, accept start 1P game with "up"
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#2,d0
0:
	* game not in play, accept start 2P game with "down"
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#10,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	btst	#JPB_BTN_RED,d2
	bne.b	0f
	* game not in play, accept insert coin with fire
	bclr	#0,d0
0:
	move.l	(a7)+,d2
3:

	movem.l	(a7)+,a0/d1
	rts
	


		
osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	move.l	a0,a4
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	a0,a3
	bsr		get_hiscore_name
 	jsr		resload_GetFileSize(a2)		
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	move.l	a3,a1
	jsr		resload_LoadFile(a2)
	* set highest score entry
    move.b    (a3)+,(a4)+
    move.b    (a3)+,(a4)+
    move.b    (a3)+,(a4)+		
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	1f
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	* set highest score entry
	move.w	#SCORE_FILE_SIZE-1,d0
0:
    move.b    (a1)+,(a4)+
	dbf		d0,0b
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	tst.b	cheat_used		| don't save score if cheat on
	bne.b	1f
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	move.l	a0,a1
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
	bra.b	1f
0:
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a0)+,(a1)+
	dbf		d0,0b

	st.b	highscore_needs_saving
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts


level2_interrupt:
	bsr		handle_keyboard
	move.w	#8,_custom+intreq
	rte
	
handle_keyboard:
	movem.l	D0/A0/A5,-(a7)
	LEA	0x00BFD000,A5
	MOVEQ	#0x08,D0
	AND.B	0x1D01(A5),D0
	jeq		1f
	MOVE.B	0x1C01(A5),D0
	NOT.B	D0
	ROR.B	#1,D0		| raw key code here
  
	CLR.B	0x1C01(A5)
  
    lea keyboard_table(pc),a0
    bclr    #7,d0
    seq (a0,d0.w)       | updates keyboard table
    jne   2f     | we don't care about key release
	
    cmp.b   #0x19,d0	| "P" key
    bne.b   0f

    bsr	toggle_pause
0:

	btst	#4,cheat_flags+3
	jeq		10f
	* cheat keys
	cmp.b	#0x50,d0	| F1 key
	bne.b	0f
	move.w	#0x0FF,_custom+color
	st.b	cheat_used
	st.b	next_bag_completes_level_flag
	
0:
	cmp.b	#0x51,d0	| F2 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	eor.b	#1,invincible_flag
	
0:
	cmp.b	#0x52,d0	| F3 key
	bne.b	0f
	st.b	cheat_used
	* add 10000 points
	add.b	#1,player_1_score_6176+2
0:
	cmp.b	#0x53,d0	| F4 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	eor.b	#1,guard_1_inactive
0:
	cmp.b	#0x54,d0	| F5 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	eor.b	#1,guard_2_inactive
0:

	cmp.b	#0x55,d0	| F6 key
	bne.b	0f
	* game over, no lives
	move.b	#1,player_death_flag_6025
	clr.b	lives_6056
0:
10:
	.ifndef	RELEASE
	cmp.b	#0x58,d0	| F9 key crashes game (restarts whdload)
	bne.b	0f
	illegal
	.endif
0:

	cmp.b	_keyexit,d0	| "ESC" key or whdload quitkey
	bne.b	2f
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key
	bra		quit_to_os
2:
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key

1:
	movem.l	(a7)+,d0/a0/a5
	rts
	
toggle_pause:
	* pause only within game
	*tst.b	game_playing_8817
	*beq.b	0f
	eor.b   #1,pause_flag
0:
	rts
	
    
* < D0: numbers of vertical positions to wait
beamdelay:
0:
	move.w  d0,-(a7)
    move.b	0xdff006,d0	| VPOS
1:
	cmp.b	0xdff006,d0
	beq.s	1b
	move.w	(a7)+,d0
	dbf	d0,0b
	rts

	
	MUL_TABLE	NB_BYTES_PER_ROW,288

	.align	4		| leave this long word alignment
program_args:	ds.l	64,0
program_args_end:
	.long	0		| add a longword else it overwrites the read args string in kick 1.3!
	.align	4
read_args_string:
	.byte	read_args_string_end-read_args_string
	.ascii	"INVINCIBLE/S,INFLIVES/S,INFTIME/S,INFPICK/S,"
	.ascii	"CHEATKEYS/S,HARDBAGS/S,FRENCH/S,SKILL/K/N,STARTLIVES/K/N"
read_args_string_end:
	.align	2


* 8 slots (indexed with the target sprite index, not
* the amiga sprite index) with
* - 4 bytes for the sprite actual address
* - 2 bytes amiga sprite index
* - 2 bytes??
hw_sprite_slots:
	ds.b	8*8
* 8 slots (indexed with the amiga sprite index)
amiga_sprite_slots:
	ds.b	8

old_intena:
	.long	0
old_dmacon:
	.long	0
old_sysvectors:
	ds.l	8
old_vbr:
	.long	0
old_syscoplist:
	.long	0
old_actiview:
	.long	0
old_stack:
	.long	0
return_address:
	.long	0
	
	
_tag:
		.long	WHDLTAG_CUSTOM1_GET
cheat_flags:
		.long	0

		.long	WHDLTAG_CUSTOM3_GET
misc_options:
		.long	0
		.long	WHDLTAG_CUSTOM4_GET
dip_switch_difficulty:
		.long	0
		.long	WHDLTAG_CUSTOM5_GET
dip_switch_start_lives:
		.long	0
	.long	0
dip_switches:
		.byte	0x20	| default english
		.byte	0

system_vbr:
	.long	0
	
orig_color_4:
	.word	0
	
high_score_buffer:
	ds.b	SCORE_FILE_SIZE

highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0
flip_flop:
	.byte	0
	.align	2

host_sprites:
	ds.b	8*SPRITE_SIZEOF
keyboard_table:
	ds.b	0x100

	
pause_flag:
	dc.w	0

	* sound variables
music_duration:
	.word	0
music_track_start_number:
	.word	0
music_pattern:
	.word	0
music_tick:
	.word	0
intro_music_counter:
	.word	0
vbl_counter:
	.word	0
_resload:
	.long	0
_joypad_state:
	.long	0
_previous_joypad_state:
	.long	0
_gfxbase:
	.long	0
_dosbase:
	.long	0
delay_timer:
	.word	0
bg_drawed_screen_ptr:
	.long	bg_screen_data_1
bg_displayed_screen_ptr:
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING_BG
	.long	bg_screen_data_2
	.else
	.long	bg_screen_data_1
	.endif


	.include	"sound_entries.68k"
	* continuing on sound table for guard step/climb sounds
	* which are the same as the player, only less loud
	.word	1,0
	.long	guard_climb_sound | 15

	.word	1,0
	.long	guard_walk_sound | 16

guard_climb_sound:
    .long    player_climb_raw
    .word   5136    | copied from player climb
    .word   FXFREQBASE/HQ_SOUNDFREQ,8
    .byte    2
    .byte    2		| priority

guard_walk_sound:
    .long    player_walk_raw
    .word   4467   | copied from player walk
    .word   FXFREQBASE/HQ_SOUNDFREQ,8
    .byte    2
    .byte    2		| priority

	
_keyexit:
	.byte	0x45	| ESC by default unless whdload overwrites it
music_loops:
	.byte	0
music_volume:
	.byte	0
music_playing:
	.byte	0
music_muted:
	.byte	0
dynamic_color_mode:
	.byte	0

cheat_used:
	.byte	0
dosname:
	.ascii	"dos.library"
	.byte	0
graphicsname:
	.ascii	"graphics.library"
	.byte	0
normal_hiscorename:
	.asciz	"bagman.high"
floppy_file:
	.ascii	"floppy"
	.byte	0
temp_filename_buffer:
	ds.b	255
_end_of_ng_code:
		
	.align 2
palette:
	.include "palette.68k"
	* sprites "individual" 4-color palettes

	.include "palette_cluts.68k"
	
	
	* on amiga, this file is included in bagman.68k file
	* so the assembler can optimize by using PC-relative addressing
	* whenever possible (and it does)
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000
	.align	0x10000

	.ifne	OPT_ENABLE_LOGGING
	.section	.bss
	.ascii	"TILE"
tile_log_table:
	* 32 cluts, 1024 tiles
	* a lot of combinations aren't used (fortunately!)
	ds.w	0x10000
	.endif
	.endif
	.ascii	"CODE_END"


	.section	.datachip
	
.macro	DECL_BITPLANES	bpoff_start
	.set	bpoff,\bpoff_start
	.rept	NB_PLAYFIELD_PLANES
	dc.w  0xe0+bpoff,0
	dc.w  0xe2+bpoff,0
	.set	bpoff,bpoff+4
	.endr
	.endm

.macro	DECL_16_COLORS	offset
	.set	colidx,\offset
	.rept	16
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm

blank_sound:
	ds.l	4
	
debug_copperlist:
	dc.w	color
debug_color:
	dc.w	0
	dc.l	-2
	
blank_sprite:
	.rept	32
	.long	0
	.endr
	
	
	* main copperlist
copperlist:
    *.word   0x1801,0xFFFE	

bg_bitplanes:
	DECL_BITPLANES	0
copperlist_colors:
	DECL_16_COLORS	0
sprite_cols:
	DECL_16_COLORS	16
sprites:
    * #0
    .word    sprpt+0,0
    .word    sprpt+2,0
    * #1
    .word    sprpt+4,0
    .word    sprpt+6,0
    * #2
    .word    sprpt+8,0
    .word    sprpt+10,0
    * #3
    .word    sprpt+12,0
    .word    sprpt+14,0   
    * #4
    .word    sprpt+16,0
    .word    sprpt+18,0
    * #5
    .word    sprpt+20,0
    .word    sprpt+22,0
    * #6
    .word    sprpt+24,0
    .word    sprpt+26,0
    * #7
    .word    sprpt+28,0
    .word    sprpt+30,0

	
	* pal limit
    .word  0xFFDF,0xFFFE       | PAL wait
    .word  0x0401,0xFFFE
	
    .word   0x1C01,0xFFFE
	.set    beampos,0x1E01
	
 	.word	beampos,0xFFFE   | wait before interrupt, avoid losing last bobs lines
    .word	 intreq,0x8010
    .long    -2					
	.ascii	"ENDCPLST"

	* aligning on 8 bytes so .align will work
	* in the next datachip sections
	.align	8
	
		.section .bsschip

bg_screen_data_1:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING_BG
bg_screen_data_2:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.endif
	.align	8

		